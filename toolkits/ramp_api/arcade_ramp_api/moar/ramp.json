{
  "name": "ramp",
  "spec_source": "openapi_spec",
  "token_for_http_testing": "",
  "package_name": "ramp_api",
  "package_dir_path": "/Users/franciscojuniodelimaliberal/git/Team/arcade-mcp/toolkits/ramp_api/ramp_api",
  "project_dir_path": "/Users/franciscojuniodelimaliberal/git/Team/arcade-mcp/toolkits/ramp_api",
  "arcade_new_cmd_executed": true,
  "api_endpoint_selection_customized": false,
  "api_endpoint_for_http_testing": "",
  "authorization_type": "oauth",
  "auth_provider_id": "arcade-ramp",
  "where_to_provide_token": "header",
  "token_key_name": "Authorization",
  "token_value": "Bearer {authorization}",
  "secrets": [],
  "global_base_url": "https://api.ramp.com",
  "global_headers": {},
  "edit_operations": [],
  "uuid": "235e7b1d-3528-4ddd-be08-7e957cf74cae",
  "api_endpoints": [
    {
      "name": "get_custom_field_option_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_field_options",
        "description": {
          "tagline": "List options for a given custom accounting field.",
          "detailed": "This tool retrieves available options for a specified custom accounting field, allowing users to view or select from predefined choices."
        },
        "return_annotation": "Options for a specified custom accounting field.",
        "arguments": [
          {
            "name": "custom_field_id",
            "alternative_names": [
              "field_identifier",
              "accounting_field_id"
            ],
            "description": "The unique identifier for the custom accounting field to retrieve options for.",
            "endpoint_argument_name": "field_id"
          },
          {
            "name": "filter_by_external_id",
            "alternative_names": [
              "filter_by_remote_id",
              "external_id_filter"
            ],
            "description": "Filter the options by the external/remote ID of custom accounting fields in the ERP system. Useful for narrowing down options to specific fields associated with a given external ID.",
            "endpoint_argument_name": "remote_id"
          },
          {
            "name": "filter_by_field_option_code",
            "alternative_names": [
              "code_filter",
              "custom_field_code_filter"
            ],
            "description": "Specify the code to filter custom accounting field options.",
            "endpoint_argument_name": "code"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_entity_id",
              "previous_page_end_id"
            ],
            "description": "The ID of the last entity from the previous page to retrieve the next page of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "number_of_results",
              "page_result_count"
            ],
            "description": "The number of results to return per page, between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "include_active_options",
            "alternative_names": [
              "filter_active_options",
              "active_options_only"
            ],
            "description": "Include only active options if true; otherwise, include all.",
            "endpoint_argument_name": "is_active"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/field-options",
      "tags": [
        "Accounting"
      ],
      "summary": "List options for a given custom accounting field",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "remote_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by Remote/external ID of custom accounting field options in ERP system."
            },
            "description": "Filter by Remote/external ID of custom accounting field options in ERP system.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "code",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by code of custom accounting field options."
            },
            "description": "Filter by code of custom accounting field options.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "field_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "is_active",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_custom_field_option_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_accounting_field_options",
        "description": {
          "tagline": "Upload multiple custom accounting field options.",
          "detailed": "Use this tool to upload up to 500 new field options for a custom accounting field in a single batch. Ensure the options are sanitized and do not already exist to prevent batch rejection. For updating existing options, use the PATCH method instead."
        },
        "return_annotation": "Result of the field options upload process.",
        "arguments": [
          {
            "name": "field_options_batch",
            "alternative_names": [
              "batch_of_field_options",
              "custom_field_options"
            ],
            "description": "A JSON object containing 'field_id' as a string and 'options' as a list of JSON objects. Each option requires a 'code', 'id', and 'value'.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/field-options",
      "tags": [
        "Accounting"
      ],
      "summary": "Upload new options",
      "description": "You can upload up to 500 new field options for a given custom accounting field in an all-or-nothing fashion. If a field option within a batch is malformed or violates a database constraint, the entire batch containing that field option will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the field options that you are trying to upload do not already exist on Ramp.\nIf a field option is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/field-options/{id} endpoint instead.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "field_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "id to uniquely identify a custom accounting field within Ramp system"
                },
                "options": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "code": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Code of the custom accounting field option; e.g. 400-100."
                    },
                    "id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote/external ID of custom accounting field option from ERP system."
                    },
                    "value": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "e.g. Employees:Salaries & Wages"
                    }
                  },
                  "description": "A list of field options for a given custom accounting field."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "field_id": {
                  "type": "string",
                  "description": "id to uniquely identify a custom accounting field within Ramp system",
                  "format": "uuid"
                },
                "options": {
                  "type": "array",
                  "description": "A list of field options for a given custom accounting field.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Code of the custom accounting field option; e.g. 400-100."
                      },
                      "id": {
                        "type": "string",
                        "description": "Remote/external ID of custom accounting field option from ERP system."
                      },
                      "value": {
                        "type": "string",
                        "description": "e.g. Employees:Salaries & Wages"
                      }
                    },
                    "required": [
                      "id",
                      "value"
                    ]
                  }
                }
              },
              "required": [
                "field_id",
                "options"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_connection_id\": null,\n          \"field_id\": \"46910cc3-ab41-4b80-b4a7-94dab9f1b795\",\n          \"options\": [\n            {\n              \"id\": \"418\",\n              \"value\": \"Engineering & Design\"\n            },\n            {\n              \"id\": \"514\",\n              \"value\": \"Sales & Marketing\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"field_id\": {\n            \"description\": \"id to uniquely identify a custom accounting field within Ramp system\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"options\": {\n            \"description\": \"A list of field options for a given custom accounting field.\",\n            \"items\": {\n              \"example\": {\n                \"code\": \"400-100\",\n                \"id\": \"514\",\n                \"value\": \"Employees:Salaries & Wages\"\n              },\n              \"properties\": {\n                \"code\": {\n                  \"description\": \"Code of the custom accounting field option; e.g. 400-100.\",\n                  \"type\": \"string\"\n                },\n                \"id\": {\n                  \"description\": \"Remote/external ID of custom accounting field option from ERP system.\",\n                  \"type\": \"string\"\n                },\n                \"value\": {\n                  \"description\": \"e.g. Employees:Salaries & Wages\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\",\n                \"value\"\n              ],\n              \"type\": \"object\"\n            },\n            \"maxItems\": 500,\n            \"minItems\": 1,\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"field_id\",\n          \"options\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_custom_field_option_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_custom_accounting_field_option",
        "description": {
          "tagline": "Fetch a custom accounting field option.",
          "detailed": "This tool retrieves information about a specific custom accounting field option using its unique identifier. It should be called when detailed data about a custom accounting field option is needed."
        },
        "return_annotation": "Details of the specified accounting field option.",
        "arguments": [
          {
            "name": "field_option_identifier",
            "alternative_names": [
              "custom_field_option_id",
              "accounting_field_option_id"
            ],
            "description": "The unique identifier for the custom accounting field option to fetch.",
            "endpoint_argument_name": "field_option_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/field-options/{field_option_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Fetch a custom accounting field option",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "field_option_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_custom_field_option_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_accounting_field_option",
        "description": {
          "tagline": "Update a custom accounting field option to reflect changes.",
          "detailed": "Use this tool to modify a specific custom accounting field option by providing its ID. It updates the metadata or details associated with the field option."
        },
        "return_annotation": "Details of the updated custom accounting field option.",
        "arguments": [
          {
            "name": "custom_field_option_id",
            "alternative_names": [
              "field_option_identification",
              "accounting_field_option_id"
            ],
            "description": "Unique identifier for the custom accounting field option to be updated. Required for specifying which field option to modify.",
            "endpoint_argument_name": "field_option_id"
          },
          {
            "name": "custom_field_option_code",
            "alternative_names": [
              "field_option_code",
              "accounting_field_option_code"
            ],
            "description": "Code of the custom accounting field option. Provide an empty string to reset the code. Only available if not using a direct ERP integration.",
            "endpoint_argument_name": "code"
          },
          {
            "name": "update_display_name",
            "alternative_names": [
              "change_display_name",
              "set_display_name"
            ],
            "description": "Update the display name of the custom field option.",
            "endpoint_argument_name": "display_name"
          },
          {
            "name": "field_option_name",
            "alternative_names": [
              "custom_field_option_name",
              "accounting_option_name"
            ],
            "description": "Name of the custom accounting field option. Only available if not using a direct ERP integration.",
            "endpoint_argument_name": "value"
          },
          {
            "name": "set_visibility",
            "alternative_names": [
              "change_visibility",
              "update_visibility"
            ],
            "description": "Set the visibility of the custom field option to 'HIDDEN' or 'VISIBLE'.",
            "endpoint_argument_name": "visibility"
          },
          {
            "name": "reactivate_custom_field_option",
            "alternative_names": [
              "restore_field_option",
              "enable_custom_field_option"
            ],
            "description": "Set to true to reactivate a deleted custom field option if not using direct ERP integration.",
            "endpoint_argument_name": "reactivate"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/accounting/field-options/{field_option_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Update a custom accounting field option",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "field_option_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "code",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Only available if not using a direct ERP integration: Code of the custom accounting field option; you could provide an empty string to reset the code."
            },
            "description": "Only available if not using a direct ERP integration: Code of the custom accounting field option; you could provide an empty string to reset the code.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Only available if not using a direct ERP integration: Code of the custom accounting field option; you could provide an empty string to reset the code."
            },
            "schema_required": false
          },
          {
            "name": "display_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Available to all: Update the display name of the custom field option."
            },
            "description": "Available to all: Update the display name of the custom field option.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Available to all: Update the display name of the custom field option."
            },
            "schema_required": false
          },
          {
            "name": "reactivate",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": [
                "True"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Only available if not using a direct ERP integration: reactivate a deleted custom field option"
            },
            "description": "Only available if not using a direct ERP integration: reactivate a deleted custom field option",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Only available if not using a direct ERP integration: reactivate a deleted custom field option",
              "enum": [
                true
              ]
            },
            "schema_required": false
          },
          {
            "name": "value",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Only available if not using a direct ERP integration: Name of the custom accounting field option."
            },
            "description": "Only available if not using a direct ERP integration: Name of the custom accounting field option.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Only available if not using a direct ERP integration: Name of the custom accounting field option."
            },
            "schema_required": false
          },
          {
            "name": "visibility",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "HIDDEN",
                "VISIBLE"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Available to all: Hide or Show option"
            },
            "description": "Available to all: Hide or Show option",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Available to all: Hide or Show option",
              "enum": [
                "HIDDEN",
                "VISIBLE"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"code\": \"450\",\n          \"display_name\": \"Sales & Marketing Display\",\n          \"reactivate\": true,\n          \"value\": \"Sales & Marketing\",\n          \"visibility\": \"VISIBLE\"\n        },\n        \"properties\": {\n          \"code\": {\n            \"description\": \"Only available if not using a direct ERP integration: Code of the custom accounting field option; you could provide an empty string to reset the code.\",\n            \"type\": \"string\"\n          },\n          \"display_name\": {\n            \"description\": \"Available to all: Update the display name of the custom field option.\",\n            \"type\": \"string\"\n          },\n          \"reactivate\": {\n            \"description\": \"Only available if not using a direct ERP integration: reactivate a deleted custom field option\",\n            \"enum\": [\n              true\n            ],\n            \"type\": \"boolean\"\n          },\n          \"value\": {\n            \"description\": \"Only available if not using a direct ERP integration: Name of the custom accounting field option.\",\n            \"type\": \"string\"\n          },\n          \"visibility\": {\n            \"description\": \"Available to all: Hide or Show option\",\n            \"enum\": [\n              \"HIDDEN\",\n              \"VISIBLE\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_custom_field_option_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_custom_accounting_field_option",
        "description": {
          "tagline": "Delete a custom accounting field option by ID.",
          "detailed": "Use this tool to delete a specific custom accounting field option by providing its unique ID. It should be called when you need to remove an obsolete or incorrect field option in the accounting system."
        },
        "return_annotation": "Confirmation of option deletion.",
        "arguments": [
          {
            "name": "field_option_id",
            "alternative_names": [
              "accounting_field_option_id",
              "custom_field_option_id"
            ],
            "description": "The unique identifier for the custom accounting field option to be deleted.",
            "endpoint_argument_name": "field_option_id"
          },
          {
            "name": "request_body",
            "alternative_names": [
              "body",
              "data_payload"
            ],
            "description": "JSON object containing the details for the field option to be deleted. This should include any necessary attributes required by the API to process the deletion.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/accounting/field-options/{field_option_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Delete a custom accounting field option",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "field_option_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {}
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {},\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_custom_field_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_accounting_fields",
        "description": {
          "tagline": "Retrieve a list of custom accounting fields.",
          "detailed": "Use this tool to get a list of custom fields used in accounting. It should be called when you need to understand the available custom accounting fields in the system."
        },
        "return_annotation": "A list of custom accounting fields.",
        "arguments": [
          {
            "name": "filter_by_remote_id",
            "alternative_names": [
              "external_id_filter",
              "custom_field_remote_id"
            ],
            "description": "Filter results by the Remote/external ID of custom accounting fields within the ERP system.",
            "endpoint_argument_name": "remote_id"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_entity_id",
              "continuation_id"
            ],
            "description": "ID of the last entity from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "number_of_results_per_page",
              "page_result_count"
            ],
            "description": "The number of results to return per page, between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "include_only_active",
            "alternative_names": [
              "is_active_filter",
              "filter_active_only"
            ],
            "description": "Set to True to include only active fields, False for inactive, or omit for all.",
            "endpoint_argument_name": "is_active"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/fields",
      "tags": [
        "Accounting"
      ],
      "summary": "List custom accounting fields",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "remote_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by Remote/external ID of custom accounting fields in ERP system."
            },
            "description": "Filter by Remote/external ID of custom accounting fields in ERP system.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "is_active",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_custom_field_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_or_reactivate_custom_field",
        "description": {
          "tagline": "Create or reactivate a custom field on Ramp.",
          "detailed": "Use this tool to create a new custom field on Ramp or reactivate an existing inactive custom field. If the field already exists, it will return the existing field without creating a new one. To update an existing field, use the PATCH endpoint instead."
        },
        "return_annotation": "The details of the existing or newly created custom field.",
        "arguments": [
          {
            "name": "custom_field_external_id",
            "alternative_names": [
              "erp_custom_field_id",
              "accounting_field_remote_id"
            ],
            "description": "Remote/external ID of the custom accounting field from the ERP system.",
            "endpoint_argument_name": "id"
          },
          {
            "name": "input_type_option",
            "alternative_names": [
              "field_input_type",
              "custom_field_input"
            ],
            "description": "Specifies if the input type is SINGLE_CHOICE, BOOLEAN, or FREE_FORM_TEXT for the custom field.",
            "endpoint_argument_name": "input_type"
          },
          {
            "name": "custom_accounting_field_name",
            "alternative_names": [
              "accounting_field_name",
              "custom_field_name"
            ],
            "description": "Name of the custom accounting field to be created or reactivated on Ramp.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "custom_field_display_name",
            "alternative_names": [
              "accounting_field_display_name",
              "field_display_name"
            ],
            "description": "The name of the custom accounting field as displayed on Ramp. This should be a clear and descriptive name.",
            "endpoint_argument_name": "display_name"
          },
          {
            "name": "required_object_types_for_sync",
            "alternative_names": [
              "sync_required_objects",
              "objects_needing_coding_for_sync"
            ],
            "description": "List of object types that need this accounting field for coding before syncing.",
            "endpoint_argument_name": "is_required_for"
          },
          {
            "name": "enable_split_line_annotation",
            "alternative_names": [
              "allow_split_lines",
              "support_split_line_items"
            ],
            "description": "Set to true to allow the field to annotate split line items. Defaults to false if unspecified.",
            "endpoint_argument_name": "is_splittable"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/fields",
      "tags": [
        "Accounting"
      ],
      "summary": "Create a new custom accounting field",
      "description": "If a custom field with the same id already exists on Ramp, then that existing one will be returned instead of creating a new one; If the existing custom field is inactive, it will be reactivated.\nIf you want to update the existing custom field, please use the PATCH developer/v1/accounting/fields/{id} endpoint instead.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "display_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The name of the custom accounting field as shown on Ramp."
            },
            "description": "The name of the custom accounting field as shown on Ramp.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The name of the custom accounting field as shown on Ramp."
            },
            "schema_required": false
          },
          {
            "name": "id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Remote/external ID of custom accounting field from ERP system."
            },
            "description": "Remote/external ID of custom accounting field from ERP system.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Remote/external ID of custom accounting field from ERP system."
            },
            "schema_required": true
          },
          {
            "name": "input_type",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "BOOLEAN",
                "FREE_FORM_TEXT",
                "SINGLE_CHOICE"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT."
            },
            "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.",
              "enum": [
                "BOOLEAN",
                "FREE_FORM_TEXT",
                "SINGLE_CHOICE"
              ]
            },
            "schema_required": true
          },
          {
            "name": "is_required_for",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Types of objects that require this accounting field to be used for coding before they can be marked as ready to sync."
            },
            "description": "Types of objects that require this accounting field to be used for coding before they can be marked as ready to sync.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "array",
              "description": "Types of objects that require this accounting field to be used for coding before they can be marked as ready to sync.",
              "items": {
                "type": "string",
                "enum": [
                  "BILL",
                  "BILL_PAYMENT",
                  "PURCHASE_ORDER",
                  "REIMBURSEMENT",
                  "TRANSACTION"
                ]
              }
            },
            "schema_required": false
          },
          {
            "name": "is_splittable",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "If set to True, the accounting field can be used to annotate split line items. If not specified, the default value will be False."
            },
            "description": "If set to True, the accounting field can be used to annotate split line items. If not specified, the default value will be False.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "If set to True, the accounting field can be used to annotate split line items. If not specified, the default value will be False."
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "name of the custom accounting field."
            },
            "description": "name of the custom accounting field.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "name of the custom accounting field."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_connection_id\": null,\n          \"display_name\": \"Dept\",\n          \"id\": \"Department\",\n          \"input_type\": \"SINGLE_CHOICE\",\n          \"is_splittable\": \"True\",\n          \"name\": \"Department\"\n        },\n        \"properties\": {\n          \"display_name\": {\n            \"description\": \"The name of the custom accounting field as shown on Ramp.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"description\": \"Remote/external ID of custom accounting field from ERP system.\",\n            \"type\": \"string\"\n          },\n          \"input_type\": {\n            \"description\": \"The input type could be SINGLE_CHOICE, BOOLEAN or FREE_FORM_TEXT.\",\n            \"enum\": [\n              \"BOOLEAN\",\n              \"FREE_FORM_TEXT\",\n              \"SINGLE_CHOICE\"\n            ],\n            \"type\": \"string\"\n          },\n          \"is_required_for\": {\n            \"description\": \"Types of objects that require this accounting field to be used for coding before they can be marked as ready to sync.\",\n            \"items\": {\n              \"enum\": [\n                \"BILL\",\n                \"BILL_PAYMENT\",\n                \"PURCHASE_ORDER\",\n                \"REIMBURSEMENT\",\n                \"TRANSACTION\"\n              ],\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"is_splittable\": {\n            \"description\": \"If set to True, the accounting field can be used to annotate split line items. If not specified, the default value will be False.\",\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"description\": \"name of the custom accounting field.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"id\",\n          \"input_type\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_custom_field_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_custom_accounting_field",
        "description": {
          "tagline": "Fetch details of a specific custom accounting field.",
          "detailed": "Use this tool to obtain information about a custom accounting field by specifying its field ID."
        },
        "return_annotation": "Details of the specified custom accounting field.",
        "arguments": [
          {
            "name": "field_identifier",
            "alternative_names": [
              "field_id_number",
              "custom_field_id"
            ],
            "description": "The unique identifier for the custom accounting field to be retrieved.",
            "endpoint_argument_name": "field_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/fields/{field_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Fetch a custom accounting field",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "field_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_custom_field_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_custom_accounting_field",
        "description": {
          "tagline": "Update a custom accounting field with new information.",
          "detailed": "This tool updates a custom accounting field specified by a field ID. Use this when you need to modify the details of a particular accounting field."
        },
        "return_annotation": "Confirmation of the updated accounting field.",
        "arguments": [
          {
            "name": "custom_field_id",
            "alternative_names": [
              "accounting_field_id",
              "field_identifier"
            ],
            "description": "The unique identifier for the custom accounting field you want to update. This is required to specify which field to modify.",
            "endpoint_argument_name": "field_id"
          },
          {
            "name": "field_display_name",
            "alternative_names": [
              "field_name_display",
              "display_name_for_field"
            ],
            "description": "The new display name for the custom accounting field on Ramp.",
            "endpoint_argument_name": "display_name"
          },
          {
            "name": "custom_accounting_field_name",
            "alternative_names": [
              "field_name",
              "accounting_field_name"
            ],
            "description": "The name of the custom accounting field to update on Ramp.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "field_is_splittable",
            "alternative_names": [
              "splittable_status",
              "enable_splitting"
            ],
            "description": "Boolean to determine if the custom accounting field is splittable on Ramp.",
            "endpoint_argument_name": "is_splittable"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/accounting/fields/{field_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Update a custom accounting field",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "field_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "display_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Update the name of the custom accounting field on Ramp."
            },
            "description": "Update the name of the custom accounting field on Ramp.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Update the name of the custom accounting field on Ramp."
            },
            "schema_required": false
          },
          {
            "name": "is_splittable",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Update the is_splittable of the custom accounting field on Ramp."
            },
            "description": "Update the is_splittable of the custom accounting field on Ramp.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Update the is_splittable of the custom accounting field on Ramp."
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Name of the custom accounting field."
            },
            "description": "Name of the custom accounting field.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Name of the custom accounting field."
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"display_name\": \"department\",\n          \"is_splittable\": \"True\",\n          \"name\": \"New Department\"\n        },\n        \"properties\": {\n          \"display_name\": {\n            \"description\": \"Update the name of the custom accounting field on Ramp.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"is_splittable\": {\n            \"description\": \"Update the is_splittable of the custom accounting field on Ramp.\",\n            \"type\": \"boolean\"\n          },\n          \"name\": {\n            \"description\": \"Name of the custom accounting field.\",\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_custom_field_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_custom_accounting_field",
        "description": {
          "tagline": "Delete a custom accounting field by its unique ID.",
          "detailed": "Use this tool to delete a specified custom accounting field by providing its unique field ID."
        },
        "return_annotation": "Confirmation of custom accounting field deletion.",
        "arguments": [
          {
            "name": "custom_field_id",
            "alternative_names": [
              "accounting_field_id",
              "field_identifier"
            ],
            "description": "The unique identifier for the custom accounting field to be deleted.",
            "endpoint_argument_name": "field_id"
          },
          {
            "name": "custom_field_details",
            "alternative_names": [
              "field_data",
              "accounting_field_info"
            ],
            "description": "JSON object containing details for the custom field to be deleted.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/accounting/fields/{field_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Delete a custom accounting field",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "field_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {}
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {},\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_gl_account_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_gl_accounts",
        "description": {
          "tagline": "Retrieve a list of general ledger accounts.",
          "detailed": "Call this tool to obtain a list of general ledger accounts, which are essential for accounting and financial tracking."
        },
        "return_annotation": "A list of general ledger accounts.",
        "arguments": [
          {
            "name": "filter_by_external_id",
            "alternative_names": [
              "filter_by_remote_id",
              "external_id_filter"
            ],
            "description": "Filter ledger accounts by their remote/external ID.",
            "endpoint_argument_name": "remote_id"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "pagination_last_entity_id",
              "next_page_start_id"
            ],
            "description": "The ID of the last entity from the previous page, used to access the next page.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "number_of_results",
              "page_limit"
            ],
            "description": "Number of results per page. Must be between 2 and 100, defaulting to 20 if unspecified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "include_only_active_accounts",
            "alternative_names": [
              "filter_by_active_status",
              "show_active_accounts_only"
            ],
            "description": "Set to true to only include active accounts in the results.",
            "endpoint_argument_name": "is_active"
          },
          {
            "name": "filter_by_synced_status",
            "alternative_names": [
              "synced_status_filter",
              "is_account_synced"
            ],
            "description": "Filter accounts by synchronization status. Use true for synced accounts and false for unsynced accounts.",
            "endpoint_argument_name": "is_synced"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/accounts",
      "tags": [
        "Accounting"
      ],
      "summary": "List general ledger accounts",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "remote_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by Remote/external ID"
            },
            "description": "Filter by Remote/external ID",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "is_active",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "is_synced",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_gl_account_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_gl_accounts",
        "description": {
          "tagline": "Upload a batch of general ledger accounts to Ramp.",
          "detailed": "Use this tool to upload up to 500 general ledger accounts in a single batch to Ramp. Ensure data is sanitized and accounts do not already exist on Ramp. If any account is invalid, the entire batch is rejected."
        },
        "return_annotation": "Status and details of the upload operation.",
        "arguments": [
          {
            "name": "gl_account_list",
            "alternative_names": [
              "general_ledger_account_data",
              "ledger_account_entries"
            ],
            "description": "JSON array of up to 500 general ledger accounts. Each account should include fields for classification, code, id, and name.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/accounts",
      "tags": [
        "Accounting"
      ],
      "summary": "Upload general ledger accounts",
      "description": "You can upload up to 500 general ledger accounts in an all-or-nothing fashion. If a general ledger accounts within a batch is malformed or violates a database constraint, the entire batch containing that account will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the general ledger accounts that you are trying to upload do not already exist on Ramp.\nIf a general ledger account is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/accounts/{id} endpoint instead.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "gl_accounts": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "classification": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": [
                        "ANY",
                        "ASSET",
                        "CREDCARD",
                        "EQUITY",
                        "EXPENSE",
                        "LIABILITY",
                        "REVENUE",
                        "UNKNOWN"
                      ],
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "code": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "e.g. 400-100."
                    },
                    "id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote/external ID of GL account in ERP system."
                    },
                    "name": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "e.g. Travel : Travel - Lodging."
                    }
                  },
                  "description": "A list of general ledger accounts that you want to use to classify your Ramp transactions."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "gl_accounts": {
                  "type": "array",
                  "description": "A list of general ledger accounts that you want to use to classify your Ramp transactions.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "classification": {
                        "type": "string",
                        "enum": [
                          "ANY",
                          "ASSET",
                          "CREDCARD",
                          "EQUITY",
                          "EXPENSE",
                          "LIABILITY",
                          "REVENUE",
                          "UNKNOWN"
                        ]
                      },
                      "code": {
                        "type": "string",
                        "description": "e.g. 400-100."
                      },
                      "id": {
                        "type": "string",
                        "description": "Remote/external ID of GL account in ERP system."
                      },
                      "name": {
                        "type": "string",
                        "description": "e.g. Travel : Travel - Lodging."
                      }
                    },
                    "required": [
                      "classification",
                      "id",
                      "name"
                    ]
                  }
                }
              },
              "required": [
                "gl_accounts"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_connection_id\": null,\n          \"gl_accounts\": [\n            {\n              \"classification\": \"EXPENSE\",\n              \"code\": \"6410\",\n              \"id\": \"514\",\n              \"name\": \"Employees:Salaries & Wages\"\n            },\n            {\n              \"classification\": \"EXPENSE\",\n              \"id\": \"418\",\n              \"name\": \"Office/Admin:Phone & Internet\"\n            },\n            {\n              \"classification\": \"REVENUE\",\n              \"id\": \"425\",\n              \"name\": \"Sales\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"gl_accounts\": {\n            \"description\": \"A list of general ledger accounts that you want to use to classify your Ramp transactions.\",\n            \"items\": {\n              \"example\": {\n                \"classification\": \"EXPENSE\",\n                \"code\": \"6410\",\n                \"id\": \"514\",\n                \"name\": \"Employees:Salaries & Wages\"\n              },\n              \"properties\": {\n                \"classification\": {\n                  \"enum\": [\n                    \"ANY\",\n                    \"ASSET\",\n                    \"CREDCARD\",\n                    \"EQUITY\",\n                    \"EXPENSE\",\n                    \"LIABILITY\",\n                    \"REVENUE\",\n                    \"UNKNOWN\"\n                  ],\n                  \"type\": \"string\"\n                },\n                \"code\": {\n                  \"description\": \"e.g. 400-100.\",\n                  \"type\": \"string\"\n                },\n                \"id\": {\n                  \"description\": \"Remote/external ID of GL account in ERP system.\",\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"description\": \"e.g. Travel : Travel - Lodging.\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"classification\",\n                \"id\",\n                \"name\"\n              ],\n              \"type\": \"object\"\n            },\n            \"maxItems\": 500,\n            \"minItems\": 1,\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"gl_accounts\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_gl_account_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_gl_account",
        "description": {
          "tagline": "Fetch details of a general ledger account.",
          "detailed": "Use this tool to retrieve information about a specific general ledger account by its ID."
        },
        "return_annotation": "Details of a general ledger account.",
        "arguments": [
          {
            "name": "general_ledger_account_id",
            "alternative_names": [
              "gl_account_identifier",
              "ledger_account_id"
            ],
            "description": "The unique identifier for the general ledger account to fetch details for.",
            "endpoint_argument_name": "gl_account_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/accounts/{gl_account_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Fetch a general ledger account",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "gl_account_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_gl_account_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_gl_account",
        "description": {
          "tagline": "Update the name or code of a GL account.",
          "detailed": ""
        },
        "return_annotation": "Updated GL account details.",
        "arguments": [
          {
            "name": "gl_account_id",
            "alternative_names": [
              "ledger_account_id",
              "account_id"
            ],
            "description": "Unique identifier for the GL account to update. It must be a string.",
            "endpoint_argument_name": "gl_account_id"
          },
          {
            "name": "gl_account_code",
            "alternative_names": [
              "ledger_account_code",
              "account_code"
            ],
            "description": "Code of the general ledger account. Provide an empty string to reset the code.",
            "endpoint_argument_name": "code"
          },
          {
            "name": "gl_account_name",
            "alternative_names": [
              "general_ledger_account_name",
              "account_name"
            ],
            "description": "The new name for the general ledger account.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "reactivate_deleted_gl_account",
            "alternative_names": [
              "restore_gl_account",
              "enable_gl_account"
            ],
            "description": "Set to true to reactivate a deleted general ledger account. If false, the account remains inactive.",
            "endpoint_argument_name": "reactivate"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/accounting/accounts/{gl_account_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Update a general ledger account",
      "description": "This endpoint can be used to update the name or code of a GL account;",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "gl_account_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "code",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "code of the general ledger account; you could provide an empty string if you want to reset the code."
            },
            "description": "code of the general ledger account; you could provide an empty string if you want to reset the code.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "code of the general ledger account; you could provide an empty string if you want to reset the code."
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "name of the general ledger account"
            },
            "description": "name of the general ledger account",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "name of the general ledger account"
            },
            "schema_required": false
          },
          {
            "name": "reactivate",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": [
                "True"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "reactivate a deleted general ledger account"
            },
            "description": "reactivate a deleted general ledger account",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "reactivate a deleted general ledger account",
              "enum": [
                true
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"code\": \"6410\",\n          \"name\": \"Employees:Salaries & Wages\",\n          \"reactivate\": true\n        },\n        \"properties\": {\n          \"code\": {\n            \"description\": \"code of the general ledger account; you could provide an empty string if you want to reset the code.\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"name of the general ledger account\",\n            \"type\": \"string\"\n          },\n          \"reactivate\": {\n            \"description\": \"reactivate a deleted general ledger account\",\n            \"enum\": [\n              true\n            ],\n            \"type\": \"boolean\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_gl_account_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_general_ledger_account",
        "description": {
          "tagline": "Deletes a specified general ledger account.",
          "detailed": "Use this tool to delete a general ledger account by providing the GL account ID. It should be called when you need to permanently remove an account from the records."
        },
        "return_annotation": "Confirmation of account deletion.",
        "arguments": [
          {
            "name": "general_ledger_account_id",
            "alternative_names": [
              "gl_account_identifier",
              "ledger_account_id"
            ],
            "description": "The ID of the general ledger account to be deleted. It must be a valid string representing the account.",
            "endpoint_argument_name": "gl_account_id"
          },
          {
            "name": "delete_request_body",
            "alternative_names": [
              "delete_gl_account_request",
              "gl_account_deletion_body"
            ],
            "description": "The JSON object containing details for the account deletion request. Must include account specifications required by the API.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/accounting/accounts/{gl_account_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Delete a general ledger account",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "gl_account_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {}
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {},\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_accounting_all_connections_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_accounting_connections",
        "description": {
          "tagline": "Fetch all accounting connections for the current business.",
          "detailed": ""
        },
        "return_annotation": "List of accounting connections for the current business.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/accounting/all-connections",
      "tags": [
        "Accounting"
      ],
      "summary": "Fetch all accounting connections for the current business",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_accounting_current_connection_resource_deprecated",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_current_accounting_connection",
        "description": {
          "tagline": "Get deprecated current accounting connection resource.",
          "detailed": "Fetches the deprecated current accounting connection resource, usually needed to handle legacy integrations."
        },
        "return_annotation": "Information about the current accounting connection status.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/accounting/connection",
      "tags": [
        "Accounting"
      ],
      "summary": "Fetch the current active accounting connection",
      "description": "This endpoint is now deprecated. Please use the `/all-connections` endpoint instead here.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_accounting_connection_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_accounting_connection",
        "description": {
          "tagline": "Establish or upgrade an accounting API connection.",
          "detailed": "Use this tool to set up a new accounting API connection or upgrade an existing Universal CSV connection to an API-based connection."
        },
        "return_annotation": "Confirmation of accounting connection creation or upgrade.",
        "arguments": [
          {
            "name": "accounting_connection_name",
            "alternative_names": [
              "accounting_provider_name",
              "connection_provider_name"
            ],
            "description": "The name of the accounting connection to establish or upgrade.",
            "endpoint_argument_name": "remote_provider_name"
          },
          {
            "name": "reactivate",
            "alternative_names": [
              "enable_reactivation",
              "reactivate_feature"
            ],
            "description": "This argument is deprecated. Use POST accounting/connection/<connection_id>/reactivate instead.",
            "endpoint_argument_name": "reactivate"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/connection",
      "tags": [
        "Accounting"
      ],
      "summary": "Register a new API based accounting connection",
      "description": "A connection is required in order to use our accounting API functionality.\nIf a Universal CSV connection already exists, it will be upgraded to an API based connection.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "reactivate",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Deprecated, use POST accounting/connection/<connection_id>/reactivate."
            },
            "description": "Deprecated, use POST accounting/connection/<connection_id>/reactivate.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Deprecated, use POST accounting/connection/<connection_id>/reactivate."
            },
            "schema_required": false
          },
          {
            "name": "remote_provider_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The name of the accounting connection."
            },
            "description": "The name of the accounting connection.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The name of the accounting connection."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"reactivate\": false,\n          \"remote_provider_name\": \"ACCOUNTING_SEED\"\n        },\n        \"properties\": {\n          \"reactivate\": {\n            \"default\": false,\n            \"deprecated\": true,\n            \"description\": \"Deprecated, use POST accounting/connection/<connection_id>/reactivate.\",\n            \"type\": \"boolean\"\n          },\n          \"remote_provider_name\": {\n            \"description\": \"The name of the accounting connection.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"remote_provider_name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_accounting_connection_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "disconnect_accounting_connection",
        "description": {
          "tagline": "Disconnect an API-based accounting connection.",
          "detailed": "This tool is used to disconnect API-based accounting connections when they are no longer needed. It should be called when a user wants to remove an integration with an accounting service."
        },
        "return_annotation": "Confirmation of disconnection of the accounting connection.",
        "arguments": []
      },
      "method": "DELETE",
      "path": "/developer/v1/accounting/connection",
      "tags": [
        "Accounting"
      ],
      "summary": "Disconnect an accounting connection",
      "description": "This endpoint only allows disconnecting API based connections.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_reactivate_connection_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "reactivate_accounting_connection",
        "description": {
          "tagline": "Reactivate a previously disconnected accounting connection.",
          "detailed": "Utilize this tool to reactivate an accounting connection that was previously disconnected. It restores the connection status to linked, maintaining all previous configurations and settings. Ensure there are no other active accounting connections for the business."
        },
        "return_annotation": "Confirmation of reactivated accounting connection status.",
        "arguments": [
          {
            "name": "accounting_connection_id",
            "alternative_names": [
              "connection_identifier",
              "connection_id_string"
            ],
            "description": "A unique identifier for the accounting connection to be reactivated. This ID is required to change the status back to linked.",
            "endpoint_argument_name": "connection_id"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/connection/{connection_id}/reactivate",
      "tags": [
        "Accounting"
      ],
      "summary": "Reactivate a previously unlinked accounting connection",
      "description": "This endpoint allows reactivating a previously disconnected accounting connection\nby changing its status back to linked. This preserves all previous accounting\nfield configurations and settings.\n\nThe business must not have any other active accounting connections.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "connection_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_sync_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "notify_sync_results",
        "description": {
          "tagline": "Notify Ramp of a list of sync results.",
          "detailed": "Use this tool to inform Ramp about sync results, ensuring proper handling of subsequent requests with an idempotency key."
        },
        "return_annotation": "Confirmation of sync results notification.",
        "arguments": [
          {
            "name": "sync_details",
            "alternative_names": [
              "synchronization_results",
              "sync_information"
            ],
            "description": "A JSON object containing arrays of failed and successful syncs, an idempotency key, and a sync type.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/syncs",
      "tags": [
        "Accounting"
      ],
      "summary": "Post sync status",
      "description": "This endpoint allows customers to notify Ramp of a list of sync results.\nAn idempotency key is required to ensure that subsequent requests are properly handled.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "failed_syncs": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "error": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "describes the reason why the sync object failed to sync."
                    },
                    "id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "ID that uniquely identifies a transaction/reimbursement in Ramp systems."
                    }
                  },
                  "description": "A list of objects that failed to be synced."
                },
                "idempotency_key": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "successful_syncs": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "deep_link_url": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "URL that links to the object in the remote ERP system. Only applicable for bills."
                    },
                    "id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "ID that uniquely identifies the object to sync in Ramp systems."
                    },
                    "reference_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "ID that uniquely identifies the object to sync in remote ERP systems."
                    }
                  },
                  "description": "A list of successfully synced objects."
                },
                "sync_type": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "ACCRUAL_SYNC",
                    "AMORTIZATION_ENTRY_SYNC",
                    "BANKING_TRANSACTION_SYNC",
                    "BILL_PAYMENT_SYNC",
                    "BILL_SYNC",
                    "BROKERAGE_ORDER_SYNC",
                    "PAYEE_SYNC",
                    "REIMBURSEMENT_SYNC",
                    "STATEMENT_CREDIT_SYNC",
                    "TRACKING_CATEGORY_OPTION_SYNC",
                    "TRANSACTION_SYNC",
                    "TRANSFER_SYNC",
                    "WALLET_TRANSFER_SYNC"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": "The type of object to sync."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "failed_syncs": {
                  "type": "array",
                  "description": "A list of objects that failed to be synced.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "error": {
                        "type": "object",
                        "description": "describes the reason why the sync object failed to sync.",
                        "properties": {},
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "message": {
                                "type": "string",
                                "description": "an error message that explains the reason of the sync failure."
                              }
                            },
                            "required": [
                              "message"
                            ]
                          }
                        ]
                      },
                      "id": {
                        "type": "string",
                        "description": "ID that uniquely identifies a transaction/reimbursement in Ramp systems.",
                        "format": "uuid"
                      }
                    },
                    "required": [
                      "error",
                      "id"
                    ]
                  }
                },
                "idempotency_key": {
                  "type": "string",
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "successful_syncs": {
                  "type": "array",
                  "description": "A list of successfully synced objects.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "deep_link_url": {
                        "type": "string",
                        "description": "URL that links to the object in the remote ERP system. Only applicable for bills.",
                        "format": "url"
                      },
                      "id": {
                        "type": "string",
                        "description": "ID that uniquely identifies the object to sync in Ramp systems.",
                        "format": "uuid"
                      },
                      "reference_id": {
                        "type": "string",
                        "description": "ID that uniquely identifies the object to sync in remote ERP systems."
                      }
                    },
                    "required": [
                      "id",
                      "reference_id"
                    ]
                  }
                },
                "sync_type": {
                  "type": "string",
                  "description": "The type of object to sync.",
                  "enum": [
                    "ACCRUAL_SYNC",
                    "AMORTIZATION_ENTRY_SYNC",
                    "BANKING_TRANSACTION_SYNC",
                    "BILL_PAYMENT_SYNC",
                    "BILL_SYNC",
                    "BROKERAGE_ORDER_SYNC",
                    "PAYEE_SYNC",
                    "REIMBURSEMENT_SYNC",
                    "STATEMENT_CREDIT_SYNC",
                    "TRACKING_CATEGORY_OPTION_SYNC",
                    "TRANSACTION_SYNC",
                    "TRANSFER_SYNC",
                    "WALLET_TRANSFER_SYNC"
                  ]
                }
              },
              "required": [
                "idempotency_key",
                "sync_type"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"failed_syncs\": [\n            {\n              \"error\": {\n                \"message\": \"The account period has closed and the account books cannot be updated.\"\n              },\n              \"id\": \"d471d830-2e73-4082-8a75-68540f83e86e\"\n            }\n          ],\n          \"idempotency_key\": \"d471d830-2e73-4082-8a75-68540f83e86e\",\n          \"successful_syncs\": [\n            {\n              \"id\": \"5a58eb94-a583-458f-810d-c794f32f2f90\",\n              \"reference_id\": \"d8573713-a97d-4119-bdd7-b69c318df9bb\"\n            },\n            {\n              \"id\": \"bb037f47-c664-46f9-afa7-cc68cbcf5a23\",\n              \"reference_id\": \"83283a15-c0a0-4105-9724-2fcfefa9924f\"\n            }\n          ],\n          \"sync_type\": \"TRANSACTION_SYNC\"\n        },\n        \"properties\": {\n          \"failed_syncs\": {\n            \"description\": \"A list of objects that failed to be synced.\",\n            \"items\": {\n              \"example\": {\n                \"error\": {\n                  \"message\": \"The account period has closed and the account books cannot be updated.\"\n                },\n                \"id\": \"bb037f47-c664-46f9-afa7-cc68cbcf5a23\"\n              },\n              \"properties\": {\n                \"error\": {\n                  \"allOf\": [\n                    {\n                      \"example\": {\n                        \"message\": \"The account period has closed and the account books cannot be updated.\"\n                      },\n                      \"properties\": {\n                        \"message\": {\n                          \"description\": \"an error message that explains the reason of the sync failure.\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"message\"\n                      ],\n                      \"type\": \"object\"\n                    }\n                  ],\n                  \"description\": \"describes the reason why the sync object failed to sync.\"\n                },\n                \"id\": {\n                  \"description\": \"ID that uniquely identifies a transaction/reimbursement in Ramp systems.\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"error\",\n                \"id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"maxItems\": 5000,\n            \"minItems\": 1,\n            \"type\": \"array\"\n          },\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          },\n          \"successful_syncs\": {\n            \"description\": \"A list of successfully synced objects.\",\n            \"items\": {\n              \"example\": {\n                \"id\": \"bb037f47-c664-46f9-afa7-cc68cbcf5a23\",\n                \"reference_id\": \"83283a15-c0a0-4105-9724-2fcfefa9924f\"\n              },\n              \"properties\": {\n                \"deep_link_url\": {\n                  \"description\": \"URL that links to the object in the remote ERP system. Only applicable for bills.\",\n                  \"format\": \"url\",\n                  \"type\": \"string\"\n                },\n                \"id\": {\n                  \"description\": \"ID that uniquely identifies the object to sync in Ramp systems.\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                },\n                \"reference_id\": {\n                  \"description\": \"ID that uniquely identifies the object to sync in remote ERP systems.\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\",\n                \"reference_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"maxItems\": 5000,\n            \"minItems\": 1,\n            \"type\": \"array\"\n          },\n          \"sync_type\": {\n            \"description\": \"The type of object to sync.\",\n            \"enum\": [\n              \"ACCRUAL_SYNC\",\n              \"AMORTIZATION_ENTRY_SYNC\",\n              \"BANKING_TRANSACTION_SYNC\",\n              \"BILL_PAYMENT_SYNC\",\n              \"BILL_SYNC\",\n              \"BROKERAGE_ORDER_SYNC\",\n              \"PAYEE_SYNC\",\n              \"REIMBURSEMENT_SYNC\",\n              \"STATEMENT_CREDIT_SYNC\",\n              \"TRACKING_CATEGORY_OPTION_SYNC\",\n              \"TRANSACTION_SYNC\",\n              \"TRANSFER_SYNC\",\n              \"WALLET_TRANSFER_SYNC\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"sync_type\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_accounting_vendor_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_vendors",
        "description": {
          "tagline": "Retrieve a list of vendors from the accounting system.",
          "detailed": "This tool is used to obtain a comprehensive list of vendors from the accounting system. It should be called when you need to access vendor information for accounting purposes."
        },
        "return_annotation": "List of vendors from the accounting system.",
        "arguments": [
          {
            "name": "filter_by_remote_id",
            "alternative_names": [
              "filter_by_external_id",
              "remote_id_filter"
            ],
            "description": "Filter the vendor list by a specific Remote or external ID. This helps refine the results to match a particular identifier.",
            "endpoint_argument_name": "remote_id"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "pagination_start",
              "start_id_for_next_page"
            ],
            "description": "The ID of the last entity from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "vendors_per_page",
              "items_per_page"
            ],
            "description": "Specify the number of vendor results to return per page. Must be between 2 and 100. Defaults to 20 if not provided.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "retrieve_active_vendors",
            "alternative_names": [
              "active_vendors_filter",
              "only_active_vendors"
            ],
            "description": "Set to true to retrieve only active vendors; false to retrieve all vendors.",
            "endpoint_argument_name": "is_active"
          },
          {
            "name": "include_synced_vendors",
            "alternative_names": [
              "show_synced_vendors",
              "display_synced_vendors"
            ],
            "description": "Include vendors based on their sync status with the remote system. Set to true to include only synced vendors, and false to exclude them.",
            "endpoint_argument_name": "is_synced"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/vendors",
      "tags": [
        "Accounting"
      ],
      "summary": "List vendors",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "remote_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by Remote/external ID"
            },
            "description": "Filter by Remote/external ID",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "is_active",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "is_synced",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_accounting_vendor_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_vendor_list",
        "description": {
          "tagline": "Upload a batch of up to 500 vendors to Ramp.",
          "detailed": "Use this tool to upload a batch of up to 500 vendors to Ramp in an all-or-nothing manner. Ensure that the vendor data is clean and does not contain duplicates already on Ramp to avoid batch rejection. For updating existing vendors, use a different endpoint."
        },
        "return_annotation": "Confirmation message of vendor upload success or failure.",
        "arguments": [
          {
            "name": "vendor_data",
            "alternative_names": [
              "vendors_list",
              "list_of_vendors"
            ],
            "description": "JSON object containing up to 500 vendors with their IDs and names for classification of Ramp transactions.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/accounting/vendors",
      "tags": [
        "Accounting"
      ],
      "summary": "Upload vendors",
      "description": "You can upload up to 500 vendors in an all-or-nothing fashion. If a vendors within a batch is malformed or violates a database constraint, the entire batch containing that vendors will be disregarded.\nTo have a successful upload, please sanitize the data and ensure the vendors that you are trying to upload do not already exist on Ramp.\nIf a vendors is already on Ramp but you want to update its attributes, please use the PATCH developer/v1/accounting/vendors/{id} endpoint instead.",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "vendors": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote/external ID of accounting vendor in ERP system."
                    },
                    "name": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "name of the vendor"
                    }
                  },
                  "description": "A list of vendors that you want to use to classify your Ramp transactions."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "vendors": {
                  "type": "array",
                  "description": "A list of vendors that you want to use to classify your Ramp transactions.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Remote/external ID of accounting vendor in ERP system."
                      },
                      "name": {
                        "type": "string",
                        "description": "name of the vendor"
                      }
                    },
                    "required": [
                      "id",
                      "name"
                    ]
                  }
                }
              },
              "required": [
                "vendors"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"vendors\": [\n            {\n              \"id\": \"V-5500-0130\",\n              \"name\": \"AirTable\"\n            },\n            {\n              \"id\": \"V-5500-0135\",\n              \"name\": \"Slack Technologies, LLC\"\n            },\n            {\n              \"id\": \"V-5500-0142\",\n              \"name\": \"Microsoft\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"vendors\": {\n            \"description\": \"A list of vendors that you want to use to classify your Ramp transactions.\",\n            \"items\": {\n              \"example\": {\n                \"id\": \"V-5500-0135\",\n                \"name\": \"Slack Technologies, LLC\"\n              },\n              \"properties\": {\n                \"id\": {\n                  \"description\": \"Remote/external ID of accounting vendor in ERP system.\",\n                  \"type\": \"string\"\n                },\n                \"name\": {\n                  \"description\": \"name of the vendor\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\",\n                \"name\"\n              ],\n              \"type\": \"object\"\n            },\n            \"maxItems\": 500,\n            \"minItems\": 1,\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"vendors\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_accounting_vendor_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_vendor_info",
        "description": {
          "tagline": "Fetch detailed information about a vendor.",
          "detailed": "Use this tool to fetch information about a vendor using their vendor ID. It returns detailed data associated with the specified vendor."
        },
        "return_annotation": "Vendor information data.",
        "arguments": [
          {
            "name": "vendor_identifier",
            "alternative_names": [
              "vendor_id_number",
              "vendor_key"
            ],
            "description": "A unique identifier for the vendor to fetch its information.",
            "endpoint_argument_name": "vendor_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/accounting/vendors/{vendor_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Fetch a vendor",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_accounting_vendor_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_vendor_details",
        "description": {
          "tagline": "Update vendor information in the accounting system.",
          "detailed": "Use this tool to update the details of an existing vendor in the accounting system. It should be called when vendor information needs to be modified or corrected."
        },
        "return_annotation": "Confirmation of vendor update success or failure.",
        "arguments": [
          {
            "name": "vendor_id",
            "alternative_names": [
              "vendor_identifier",
              "vendor_key"
            ],
            "description": "The unique identifier for the vendor to be updated. This is a required string value used to specify which vendor's details are to be modified.",
            "endpoint_argument_name": "vendor_id"
          },
          {
            "name": "vendor_code",
            "alternative_names": [
              "vendor_identifier",
              "vendor_code_value"
            ],
            "description": "Specify the vendor's code. Use an empty string to reset the code.",
            "endpoint_argument_name": "code"
          },
          {
            "name": "vendor_name",
            "alternative_names": [
              "name_of_vendor",
              "vendor_title"
            ],
            "description": "Specify the name of the vendor to update their details.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "reactivate_vendor",
            "alternative_names": [
              "restore_deleted_vendor",
              "enable_vendor"
            ],
            "description": "Set to true to reactivate a deleted vendor.",
            "endpoint_argument_name": "reactivate"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/accounting/vendors/{vendor_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Update a vendor",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "code",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Code of the vendor; you could provide an empty string to reset the code."
            },
            "description": "Code of the vendor; you could provide an empty string to reset the code.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Code of the vendor; you could provide an empty string to reset the code."
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Name of a vendor"
            },
            "description": "Name of a vendor",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Name of a vendor"
            },
            "schema_required": false
          },
          {
            "name": "reactivate",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": [
                "True"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "reactivate a deleted vendor"
            },
            "description": "reactivate a deleted vendor",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "reactivate a deleted vendor",
              "enum": [
                true
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"code\": \"19566\",\n          \"name\": \"Amazon\",\n          \"reactivate\": true\n        },\n        \"properties\": {\n          \"code\": {\n            \"description\": \"Code of the vendor; you could provide an empty string to reset the code.\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Name of a vendor\",\n            \"type\": \"string\"\n          },\n          \"reactivate\": {\n            \"description\": \"reactivate a deleted vendor\",\n            \"enum\": [\n              true\n            ],\n            \"type\": \"boolean\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_accounting_vendor_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_vendor",
        "description": {
          "tagline": "Deletes a specified vendor from accounting.",
          "detailed": "Use this tool to delete a vendor from the accounting system by specifying the vendor ID. It should be called when a vendor needs to be removed from records."
        },
        "return_annotation": "Confirmation of vendor deletion.",
        "arguments": [
          {
            "name": "vendor_id",
            "alternative_names": [
              "supplier_id",
              "accounting_vendor_id"
            ],
            "description": "The unique identifier for the vendor to be deleted. This is required to specify which vendor to remove from the system.",
            "endpoint_argument_name": "vendor_id"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/accounting/vendors/{vendor_id}",
      "tags": [
        "Accounting"
      ],
      "summary": "Delete a vendor",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "accounting:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_audit_log_events_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_audit_log_events",
        "description": {
          "tagline": "Retrieve a list of audit log events for analysis.",
          "detailed": "This tool retrieves a list of audit log events from the ramp service. It should be called when there is a need to analyze or review audit logs for security or compliance purposes."
        },
        "return_annotation": "List of audit log events.",
        "arguments": [
          {
            "name": "filter_user_ids",
            "alternative_names": [
              "user_id_filter",
              "attributed_user_ids"
            ],
            "description": "Filter by audit log events attributed to these specific user IDs, provided as an array of strings.",
            "endpoint_argument_name": "user_ids"
          },
          {
            "name": "filter_by_start_date",
            "alternative_names": [
              "start_date_filter",
              "begin_date_filter"
            ],
            "description": "Filter audit log events by those created on or after this date. Format should be YYYY-MM-DD.",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "filter_end_date",
            "alternative_names": [
              "max_date_filter",
              "end_date_filter"
            ],
            "description": "Filter audit log events created on or before this date. Use format YYYY-MM-DD.",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "actor_type_filters",
            "alternative_names": [
              "actor_types_filter",
              "filter_by_actor_types"
            ],
            "description": "Filter audit log events by specifying actor types. Provide an array of strings representing the actor types to include.",
            "endpoint_argument_name": "event_actor_types"
          },
          {
            "name": "filter_event_types",
            "alternative_names": [
              "event_types_filter",
              "event_type_criteria"
            ],
            "description": "An array of event types to filter audit log events by. Supply event type identifiers as strings to specify the criteria for filtering results.",
            "endpoint_argument_name": "event_types"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "next_page_start_id",
              "page_continuation_id"
            ],
            "description": "The ID of the last entity from the previous page to fetch the next page of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_results",
              "items_per_page"
            ],
            "description": "Number of results returned per page. Must be between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/audit-logs/events",
      "tags": [
        "Audit Log"
      ],
      "summary": "Get audit log events",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "audit_logs:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "user_ids",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by audit log events attributed to these user IDs"
            },
            "description": "Filter by audit log events attributed to these user IDs",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by audit log events created at or after this date"
            },
            "description": "Filter by audit log events created at or after this date",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by audit log events created at or before this date"
            },
            "description": "Filter by audit log events created at or before this date",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "event_actor_types",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by audit log events of these actor types"
            },
            "description": "Filter by audit log events of these actor types",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "policy_agent",
                  "ramp",
                  "user"
                ]
              }
            },
            "schema_required": false
          },
          {
            "name": "event_types",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by audit log events of these types"
            },
            "description": "Filter by audit log events of these types",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Accounting ai auto mark ready",
                  "Activated card",
                  "Added bill field",
                  "Added card acceptance policy",
                  "Added procurement field",
                  "Added user to funds",
                  "Added vendor field",
                  "Admin changed email",
                  "Admin changed phone",
                  "Agent created",
                  "Agent current version changed",
                  "Agent permissions updated",
                  "Agent version created",
                  "Agent version published",
                  "Approval chain updated",
                  "Approval step added",
                  "Approval step approved",
                  "Approval step rejected",
                  "Approval step skipped",
                  "Approval step terminated",
                  "Approved by manager",
                  "Approved card edit request with modifications",
                  "Approved card edit request",
                  "Approved funds edit request with modifications",
                  "Approved funds edit request",
                  "Approved new card request with modifications",
                  "Approved new card request",
                  "Approved procurement change request",
                  "Approved request for new funds with modifications",
                  "Approved request for new funds",
                  "Attendee split",
                  "Bank account updated",
                  "Bill linked to PO",
                  "Bill linked",
                  "Bill pay accepted sync for bank account from vendor network",
                  "Bill pay accepted sync for vendor card acceptance policy from vendor network",
                  "Bill pay accepted sync for vendor check mailing address from vendor network",
                  "Bill pay accepted sync for vendor information from vendor network",
                  "Bill pay accepted sync for vendor tax info from vendor network",
                  "Bill pay accounting manual user action",
                  "Bill pay accounting sync triggered",
                  "Bill pay approval policy updated",
                  "Bill pay automatic card payment no longer eligible",
                  "Bill pay automatic card payment",
                  "Bill pay bank account updated",
                  "Bill pay batch payment initiated",
                  "Bill pay business vendor unlinked from vendor network",
                  "Bill pay card delivery",
                  "Bill pay check address update",
                  "Bill pay check tracking update",
                  "Bill pay deleted bill",
                  "Bill pay delivered payment",
                  "Bill pay dismissed fraud alert",
                  "Bill pay edited payee address",
                  "Bill pay edited payment method",
                  "Bill pay initiated payment refund",
                  "Bill pay mailed check payment",
                  "Bill pay marked as paid",
                  "Bill pay matched transaction to bill",
                  "Bill pay payment failed",
                  "Bill pay payment posted",
                  "Bill pay recurrence info changed for recurring series",
                  "Bill pay rejected sync for bank account from vendor network",
                  "Bill pay rejected sync for vendor card acceptance policy from vendor network",
                  "Bill pay rejected sync for vendor check mailing address from vendor network",
                  "Bill pay rejected sync for vendor information from vendor network",
                  "Bill pay rejected sync for vendor tax info from vendor network",
                  "Bill pay retried payment",
                  "Bill pay returned funds",
                  "Bill unlinked from PO",
                  "Bill unlinked",
                  "Billing config updated",
                  "Blank canvas workflow execution updated",
                  "Booking request approval policy updated",
                  "Brokerage order updated",
                  "Cancel revision request",
                  "Cancelled by customer",
                  "Cancelled by ramp",
                  "Card payment initiated",
                  "Cash agent recommendation updated",
                  "Changed bank account on bill",
                  "Changed card holder",
                  "Changed funds user",
                  "Communication sent",
                  "Complete revision",
                  "Created accounting split line item",
                  "Created card",
                  "Created merchant error",
                  "Created unrecognized charge",
                  "Created",
                  "Deleted bill field",
                  "Deleted card acceptance policy",
                  "Deleted procurement field",
                  "Deleted vendor field",
                  "Deleted",
                  "Demoted co-owner to member",
                  "Detached funds from spend program",
                  "Document updated",
                  "Docusign envelope updated",
                  "Draft vendor created",
                  "Draft vendor deleted",
                  "Draft vendor published",
                  "Edited bill field",
                  "Edited card acceptance policy",
                  "Edited procurement field",
                  "Edited spend intent",
                  "Edited tin",
                  "Edited vendor field",
                  "Edited wallet automation",
                  "Email updated",
                  "Emailed purchase order",
                  "Exception given from dispute resolution",
                  "Exception given from repayment",
                  "Exception request approved",
                  "Exception request cancelled",
                  "Exception request denied",
                  "Exception requested",
                  "External ticket created asana",
                  "External ticket created jira",
                  "External ticket created linear",
                  "Funds activated from reissued virtual card",
                  "Ironclad workflow updated",
                  "Issued funds",
                  "Linked funds to spend program",
                  "Locked access to funds",
                  "Locked card",
                  "Managed portfolio transfer updated",
                  "Manager updated",
                  "Mark as accidental",
                  "Matched purchase order to transaction",
                  "Matched transaction to purchase order",
                  "Memo updated",
                  "Merged vendors",
                  "Name updated hris",
                  "Name updated",
                  "New virtual card issued for currency migration",
                  "Notification sent due to purchase order request modification",
                  "Password reset required",
                  "Password reset user",
                  "Password updated user",
                  "Payback cancelled",
                  "Payback payment failed",
                  "Payback payment manually paid",
                  "Payback payment retried",
                  "Payback payment succeeded",
                  "Payback request approved by user",
                  "Payback request cancelled by manager",
                  "Payback request rejected by user",
                  "Payback requested by manager",
                  "Payback triggered by user",
                  "Payee linked to accounting",
                  "Payment run updated",
                  "Payment updated",
                  "Phone updated",
                  "Policy agent suggestion feedback submitted",
                  "Post spend approval policy updated",
                  "Procurement  unmatched purchase order from transaction",
                  "Procurement  unmatched transaction from purchase order",
                  "Procurement change request approval policy updated",
                  "Procurement send global form",
                  "Procurement submit global form response",
                  "Procurement vendor onboarding submitted",
                  "Procurement vendor onboarding triggered",
                  "Promoted member to co-owner",
                  "Purchase order accounting sync created vendor",
                  "Purchase order accounting sync failed",
                  "Purchase order accounting sync success",
                  "Receipt created",
                  "Receipt deleted",
                  "Receipt matched",
                  "Refund cleared",
                  "Refund paid",
                  "Reimbursement from user",
                  "Reimbursement policy agent suggestion feedback submitted",
                  "Reimbursement to user",
                  "Reissued card",
                  "Rejected card edit request",
                  "Rejected funds edit request",
                  "Rejected new card request",
                  "Rejected procurement change request",
                  "Rejected request for new funds",
                  "Reminded to approve items",
                  "Reminded to upload missing items",
                  "Removed user from funds",
                  "Request revision",
                  "Requested an edit to these funds",
                  "Requested new card",
                  "Requested new funds",
                  "Resolved by ramp",
                  "Review needed",
                  "Reviewed by ramp",
                  "Role updated",
                  "Separation of duties disabled",
                  "Separation of duties enabled",
                  "Spend approved",
                  "Spend rejected",
                  "Spend request approval policy updated",
                  "Status updated",
                  "Submitted procurement change request",
                  "Temporarily unlocked access to funds",
                  "Terminated card",
                  "Terminated funds",
                  "Test",
                  "Third party risk management vendor review updated",
                  "Ticket assignee updated",
                  "Ticket status updated",
                  "Totp authenticator created",
                  "Totp authenticator deleted",
                  "Totp authenticator updated",
                  "Transaction approval policy updated",
                  "Transaction cleared",
                  "Transaction entity changed",
                  "Transaction missing item reminder event",
                  "Transaction paid",
                  "Transaction receipt updated",
                  "Transaction submission policy exemption event",
                  "Transferred ownership of funds",
                  "Travel policy selection updated",
                  "Undid marking transaction as accidental",
                  "Unlocked access to funds",
                  "Unlocked card temporarily",
                  "Unlocked card",
                  "Unmark as accidental",
                  "Updated card program",
                  "Updated card",
                  "Updated funds",
                  "Updated spend program",
                  "User accepted invite",
                  "User assigned by external firm",
                  "User assigned through external firm merge",
                  "User created",
                  "User deactivated",
                  "User deleted",
                  "User invited",
                  "User locked",
                  "User login",
                  "User reactivated",
                  "User undeleted",
                  "User unlocked",
                  "Vendor credit action",
                  "Vendor imported from erp",
                  "Vendor management  vendor added to managed list",
                  "Vendor management  vendor removed from managed list",
                  "Vendor payment approval policy updated",
                  "Vendor profile access created",
                  "Vendor profile access denied",
                  "Vendor profile access edited",
                  "Vendor profile access email sent",
                  "Vendor profile access requested",
                  "Vendor profile access revoked",
                  "Vendor profile all documents downloaded",
                  "Vendor profile document downloaded",
                  "Vendor sync failure",
                  "Viewed sensitive card details",
                  "Violation from manager",
                  "Violation from rule",
                  "Violation from user",
                  "Virtual card reissued",
                  "Workflow restarted due to purchase order request modification"
                ]
              }
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_token",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "request_access_token",
        "description": {
          "tagline": "Request an access token using various authorization grants.",
          "detailed": "Use this tool to request an access token from the Ramp API using different authorization methods. It supports Authorization Code, Refresh Token, and Client Credentials grants. The tool is useful for integrating with services that require OAuth2 authentication."
        },
        "return_annotation": "Access token and related authentication information.",
        "arguments": [
          {
            "name": "grant_type",
            "alternative_names": [
              "authorization_flow",
              "auth_grant_type"
            ],
            "description": "Specifies the type of OAuth2 authorization grant to use: 'authorization_code', 'client_credentials', or 'refresh_token'. Ensure that the grant type is permitted for your app.",
            "endpoint_argument_name": "grant_type"
          },
          {
            "name": "authorization_code",
            "alternative_names": [
              "auth_code",
              "authz_code"
            ],
            "description": "Authorization code from https://app.ramp.com/v1/authorize, required if grant_type=authorization_code.",
            "endpoint_argument_name": "code"
          },
          {
            "name": "authorization_redirect_uri",
            "alternative_names": [
              "oauth_redirect_uri",
              "callback_uri"
            ],
            "description": "The URI used in the initial authorization request. Required for `grant_type=authorization_code`.",
            "endpoint_argument_name": "redirect_uri"
          },
          {
            "name": "refresh_token",
            "alternative_names": [
              "token_refresh",
              "authentication_refresh_token"
            ],
            "description": "The refresh token used to obtain a new access token. Required for grant_type=refresh_token.",
            "endpoint_argument_name": "refresh_token"
          },
          {
            "name": "authorization_scope",
            "alternative_names": [
              "token_scope",
              "authentication_scope"
            ],
            "description": "Space-separated list of scopes for the returned token. Required if using client_credentials grant type.",
            "endpoint_argument_name": "scope"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/token",
      "tags": [
        "Token"
      ],
      "summary": "Create a token",
      "description": "Expects two headers:\n- Authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`\n- `Content-Type: application/x-www-form-urlencoded`\n\nRequired content body depends on authorization type method, as defined by `grant_type`.\n- Authorization Code Grant (`grant_type=authorization_code`): `grant_type`, `code`, and `redirect_uri` are required. Request must happen after requested scopes have been approved and exchanged for authorization code.\n- Refresh Token Grant (`grant_type=refresh_token`): `grant_type` and `refresh_token` are required. User must have previously obtained refresh token in authorization code flow.\n- Client Credentials Grant (`grant_type=client_credentials`): `grant_type` and `scope` are required.",
      "requires_security": false,
      "oauth_scopes": [],
      "security_schemes": [],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "code",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Authorization code obtained from request to https://app.ramp.com/v1/authorize, to be exchanged for access token. Field is required if grant_type=authorization_code."
            },
            "description": "Authorization code obtained from request to https://app.ramp.com/v1/authorize, to be exchanged for access token. Field is required if grant_type=authorization_code.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Authorization code obtained from request to https://app.ramp.com/v1/authorize, to be exchanged for access token. Field is required if grant_type=authorization_code."
            },
            "schema_required": false
          },
          {
            "name": "grant_type",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "authorization_code",
                "client_credentials",
                "refresh_token"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Grant type, must be one of: ['authorization_code', 'client_credentials', 'refresh_token']. Refresh token and client credentials grants must be added to app's permitted Grant Types."
            },
            "description": "Grant type, must be one of: ['authorization_code', 'client_credentials', 'refresh_token']. Refresh token and client credentials grants must be added to app's permitted Grant Types.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Grant type, must be one of: ['authorization_code', 'client_credentials', 'refresh_token']. Refresh token and client credentials grants must be added to app's permitted Grant Types.",
              "enum": [
                "authorization_code",
                "client_credentials",
                "refresh_token"
              ]
            },
            "schema_required": true
          },
          {
            "name": "redirect_uri",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The redirect URI previously used in the authorization request, used to verify app. Field is required if grant_type=authorization_code."
            },
            "description": "The redirect URI previously used in the authorization request, used to verify app. Field is required if grant_type=authorization_code.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The redirect URI previously used in the authorization request, used to verify app. Field is required if grant_type=authorization_code."
            },
            "schema_required": false
          },
          {
            "name": "refresh_token",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The refresh token issued to you to get a new access token."
            },
            "description": "The refresh token issued to you to get a new access token.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The refresh token issued to you to get a new access token."
            },
            "schema_required": false
          },
          {
            "name": "scope",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Space-separated list of scopes to be granted to the returned token. These must be a subset (including full set) of the app's allowed scopes. Field is required if grant_type=client_credentials."
            },
            "description": "Space-separated list of scopes to be granted to the returned token. These must be a subset (including full set) of the app's allowed scopes. Field is required if grant_type=client_credentials.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Space-separated list of scopes to be granted to the returned token. These must be a subset (including full set) of the app's allowed scopes. Field is required if grant_type=client_credentials."
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"code\": \"wUvTfJmrDiTogz3dRNsUJdBRtSl658ibsH8xLKwKQ2PbttRr\",\n          \"grant_type\": \"authorization_code\",\n          \"redirect_uri\": \"https://www.yourawesomeapp.com\",\n          \"refresh_token\": \"ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\",\n          \"scope\": \"users:read users:write\"\n        },\n        \"properties\": {\n          \"code\": {\n            \"description\": \"Authorization code obtained from request to https://app.ramp.com/v1/authorize, to be exchanged for access token. Field is required if grant_type=authorization_code.\",\n            \"type\": \"string\"\n          },\n          \"grant_type\": {\n            \"description\": \"Grant type, must be one of: ['authorization_code', 'client_credentials', 'refresh_token']. Refresh token and client credentials grants must be added to app's permitted Grant Types.\",\n            \"enum\": [\n              \"authorization_code\",\n              \"client_credentials\",\n              \"refresh_token\"\n            ],\n            \"type\": \"string\"\n          },\n          \"redirect_uri\": {\n            \"description\": \"The redirect URI previously used in the authorization request, used to verify app. Field is required if grant_type=authorization_code.\",\n            \"type\": \"string\"\n          },\n          \"refresh_token\": {\n            \"description\": \"The refresh token issued to you to get a new access token.\",\n            \"type\": \"string\"\n          },\n          \"scope\": {\n            \"description\": \"Space-separated list of scopes to be granted to the returned token. These must be a subset (including full set) of the app's allowed scopes. Field is required if grant_type=client_credentials.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"grant_type\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_revoke_token",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "revoke_api_token",
        "description": {
          "tagline": "Revoke an API token to prevent its use.",
          "detailed": "Use this tool to revoke a Ramp API token, ensuring it can no longer be utilized for authentication."
        },
        "return_annotation": "Confirmation of token revocation.",
        "arguments": [
          {
            "name": "token_to_revoke",
            "alternative_names": [
              "api_token_to_revoke",
              "auth_token_to_revoke"
            ],
            "description": "The access or refresh token that needs to be revoked.",
            "endpoint_argument_name": "token"
          },
          {
            "name": "token_type",
            "alternative_names": [
              "token_category",
              "token_kind"
            ],
            "description": "Specify whether the token to be revoked is an 'access_token' or 'refresh_token'.",
            "endpoint_argument_name": "token_type_hint"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/token/revoke",
      "tags": [
        "Token"
      ],
      "summary": "Revoke an access or refresh token",
      "description": "Expects an authorization header formed from base-64 encoded client credentials as `Authorization: Basic <base64-encoded client_id:client_secret>`.\n\nContent body must be form-encoded. Example:\n```\ncurl \\\n    -X POST \\\n    -H \"Authorization: Basic <base64-encoded client_id:client_secret>\" \\\n    -H \"Content-Type: application/x-www-form-urlencoded\" \\\n    --data-urlencode 'token=$RAMP_API_TOKEN' \\\n    'https://api.ramp.com/developer/v1/token/revoke'\n```",
      "requires_security": false,
      "oauth_scopes": [],
      "security_schemes": [],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "token",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Access token or refresh token to be revoked."
            },
            "description": "Access token or refresh token to be revoked.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Access token or refresh token to be revoked."
            },
            "schema_required": true
          },
          {
            "name": "token_type_hint",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "access_token",
                "refresh_token"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Type of the token to be revoked."
            },
            "description": "Type of the token to be revoked.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Type of the token to be revoked.",
              "enum": [
                "access_token",
                "refresh_token"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"token\": \"ramp_tok_IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\",\n          \"token_type_hint\": \"refresh_token\"\n        },\n        \"properties\": {\n          \"token\": {\n            \"description\": \"Access token or refresh token to be revoked.\",\n            \"type\": \"string\"\n          },\n          \"token_type_hint\": {\n            \"description\": \"Type of the token to be revoked.\",\n            \"enum\": [\n              \"access_token\",\n              \"refresh_token\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"token\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_bank_account_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_bank_account_details",
        "description": {
          "tagline": "Retrieve detailed bank account information by ID.",
          "detailed": "Use this tool to get detailed information about a specific bank account by providing the bank account ID."
        },
        "return_annotation": "Bank account details including related information.",
        "arguments": [
          {
            "name": "bank_account_id",
            "alternative_names": [
              "account_number",
              "bank_id"
            ],
            "description": "The unique identifier for the bank account to retrieve details for. It must be a string.",
            "endpoint_argument_name": "bank_account_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/bank-accounts/{bank_account_id}",
      "tags": [
        "Bank Accounts"
      ],
      "summary": "Get bank account details",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "bank_accounts:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "bank_account_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_bill_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": false,
      "should_skip": true,
      "skip_reason": "Complex objects in non-body parameters: query parameter 'min_amount', query parameter 'max_amount'",
      "wrapper_tool": null,
      "method": "GET",
      "path": "/developer/v1/bills",
      "tags": [
        "Bill"
      ],
      "summary": "List bills",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "bills:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter bills by entity."
            },
            "description": "Filter bills by entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "accounting_field_selection_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter bills by its accounting field selection. Bills that are coded with this accounting field will be returned."
            },
            "description": "Filter bills by its accounting field selection. Bills that are coded with this accounting field will be returned.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter bills by vendor."
            },
            "description": "Filter bills by vendor.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "approval_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "APPROVED",
                "INITIALIZED",
                "PENDING",
                "REJECTED",
                "TERMINATED"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "List bills of the provided approval status."
            },
            "description": "List bills of the provided approval status.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "APPROVED",
                "INITIALIZED",
                "PENDING",
                "REJECTED",
                "TERMINATED"
              ]
            },
            "schema_required": false
          },
          {
            "name": "payment_method",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "ACH",
                "AUTOMATIC_CARD_PAYMENT",
                "CARD",
                "CHECK",
                "CRYPTO_WALLET_TRANSFER",
                "DOMESTIC_WIRE",
                "INTERNATIONAL",
                "LOCAL_BANK_TRANSFER",
                "ONE_TIME_CARD",
                "ONE_TIME_CARD_DELIVERY",
                "PAID_MANUALLY",
                "SWIFT",
                "UNSPECIFIED",
                "VENDOR_CREDIT"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "List bills of the provided payment method."
            },
            "description": "List bills of the provided payment method.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "ACH",
                "AUTOMATIC_CARD_PAYMENT",
                "CARD",
                "CHECK",
                "CRYPTO_WALLET_TRANSFER",
                "DOMESTIC_WIRE",
                "INTERNATIONAL",
                "LOCAL_BANK_TRANSFER",
                "ONE_TIME_CARD",
                "ONE_TIME_CARD_DELIVERY",
                "PAID_MANUALLY",
                "SWIFT",
                "UNSPECIFIED",
                "VENDOR_CREDIT"
              ]
            },
            "schema_required": false
          },
          {
            "name": "payment_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "OPEN",
                "PAID"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "List bills of the provided payment status."
            },
            "description": "List bills of the provided payment status.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "OPEN",
                "PAID"
              ]
            },
            "schema_required": false
          },
          {
            "name": "sync_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "BILL_AND_PAYMENT_SYNCED",
                "BILL_SYNCED",
                "NOT_SYNCED"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "List bills of the provided sync status."
            },
            "description": "List bills of the provided sync status.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "BILL_AND_PAYMENT_SYNCED",
                "BILL_SYNCED",
                "NOT_SYNCED"
              ]
            },
            "schema_required": false
          },
          {
            "name": "sync_ready",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Only show bills that are ready to sync to ERP, if set to True"
            },
            "description": "Only show bills that are ready to sync to ERP, if set to True",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "is_archived",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Show archived (deleted) bills instead of active bills. Defaults to False."
            },
            "description": "Show archived (deleted) bills instead of active bills. Defaults to False.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "from_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a created_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a created_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a created_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a created_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "from_due_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_due_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a due_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a due_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "from_issued_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_issued_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a issued_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a issued_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "from_paid_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a paid_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a paid_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_paid_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with a paid_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only bills with a paid_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "min_amount",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with an amount greater than or equal to this value."
            },
            "description": "Shows only bills with an amount greater than or equal to this value.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "object",
              "properties": {},
              "oneOf": [
                {
                  "type": "string",
                  "format": "decimal"
                },
                {
                  "type": "number"
                }
              ]
            },
            "schema_required": false
          },
          {
            "name": "max_amount",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only bills with an amount less than or equal to this value."
            },
            "description": "Shows only bills with an amount less than or equal to this value.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "object",
              "properties": {},
              "oneOf": [
                {
                  "type": "string",
                  "format": "decimal"
                },
                {
                  "type": "number"
                }
              ]
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_bill_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_bills_with_pagination",
        "description": {
          "tagline": "Creates a paginated list of bills via the API.",
          "detailed": "Use this tool to submit a list of bills with pagination capabilities. This tool does not support batch payments. It is useful for creating bills in a structured manner with the ability to paginate through them."
        },
        "return_annotation": "Response indicating success or failure of bill creation.",
        "arguments": [
          {
            "name": "bill_creation_request_body",
            "alternative_names": [
              "bill_data_payload",
              "pagination_bill_list"
            ],
            "description": "JSON object containing the details for each bill in a paginated list. Includes necessary fields like due date, entity ID, line items, invoice details, vendor information, and payment methods.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/bills",
      "tags": [
        "Bill"
      ],
      "summary": "Create a bill",
      "description": "Batch payments cannot be created in the API.",
      "requires_security": true,
      "oauth_scopes": [
        "bills:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_field_selections": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_external_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                    },
                    "field_option_external_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                    }
                  },
                  "description": "List of accounting field options selected to code the bill."
                },
                "due_at": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Due date of the bill."
                },
                "entity_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Associated business entity."
                },
                "inventory_line_items": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "accounting_field_selections": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "field_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                        },
                        "field_option_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                        }
                      },
                      "description": null
                    },
                    "memo": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "unit_price": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "unit_quantity": {
                      "val_type": "integer",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    }
                  },
                  "description": "List of inventory line items related to the bill."
                },
                "invoice_currency": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "AED",
                    "AFN",
                    "ALL",
                    "AMD",
                    "ANG",
                    "AOA",
                    "ARS",
                    "AUD",
                    "AWG",
                    "AZN",
                    "BAM",
                    "BBD",
                    "BDT",
                    "BGN",
                    "BHD",
                    "BIF",
                    "BMD",
                    "BND",
                    "BOB",
                    "BOV",
                    "BRL",
                    "BSD",
                    "BTN",
                    "BWP",
                    "BYN",
                    "BZD",
                    "CAD",
                    "CDF",
                    "CHE",
                    "CHF",
                    "CHW",
                    "CLF",
                    "CLP",
                    "CNY",
                    "COP",
                    "COU",
                    "CRC",
                    "CUC",
                    "CUP",
                    "CVE",
                    "CZK",
                    "DJF",
                    "DKK",
                    "DOP",
                    "DZD",
                    "EGP",
                    "ERN",
                    "ETB",
                    "EUR",
                    "EURC",
                    "FJD",
                    "FKP",
                    "GBP",
                    "GEL",
                    "GHS",
                    "GIP",
                    "GMD",
                    "GNF",
                    "GTQ",
                    "GYD",
                    "HKD",
                    "HNL",
                    "HRK",
                    "HTG",
                    "HUF",
                    "IDR",
                    "ILS",
                    "INR",
                    "IQD",
                    "IRR",
                    "ISK",
                    "JMD",
                    "JOD",
                    "JPY",
                    "KES",
                    "KGS",
                    "KHR",
                    "KMF",
                    "KPW",
                    "KRW",
                    "KWD",
                    "KYD",
                    "KZT",
                    "LAK",
                    "LBP",
                    "LKR",
                    "LRD",
                    "LSL",
                    "LYD",
                    "MAD",
                    "MDL",
                    "MGA",
                    "MKD",
                    "MMK",
                    "MNT",
                    "MOP",
                    "MRU",
                    "MUR",
                    "MVR",
                    "MWK",
                    "MXN",
                    "MXV",
                    "MYR",
                    "MZN",
                    "NAD",
                    "NGN",
                    "NIO",
                    "NOK",
                    "NPR",
                    "NZD",
                    "OMR",
                    "PAB",
                    "PEN",
                    "PGK",
                    "PHP",
                    "PKR",
                    "PLN",
                    "PYG",
                    "QAR",
                    "RON",
                    "RSD",
                    "RUB",
                    "RWF",
                    "SAR",
                    "SBD",
                    "SCR",
                    "SDG",
                    "SEK",
                    "SGD",
                    "SHP",
                    "SLE",
                    "SLL",
                    "SOS",
                    "SRD",
                    "SSP",
                    "STN",
                    "SVC",
                    "SYP",
                    "SZL",
                    "THB",
                    "TJS",
                    "TMT",
                    "TND",
                    "TOP",
                    "TRY",
                    "TTD",
                    "TWD",
                    "TZS",
                    "UAH",
                    "UGX",
                    "USD",
                    "USDC",
                    "USN",
                    "UYI",
                    "UYU",
                    "UYW",
                    "UZS",
                    "VED",
                    "VES",
                    "VND",
                    "VUV",
                    "WST",
                    "XAD",
                    "XAF",
                    "XAG",
                    "XAU",
                    "XBA",
                    "XBB",
                    "XBC",
                    "XBD",
                    "XCD",
                    "XCG",
                    "XDR",
                    "XOF",
                    "XPD",
                    "XPF",
                    "XPT",
                    "XSU",
                    "XTS",
                    "XUA",
                    "XXX",
                    "YER",
                    "ZAR",
                    "ZMW",
                    "ZWG",
                    "ZWL"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": "Currency of the invoice."
                },
                "invoice_number": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The invoice number on the bill."
                },
                "issued_at": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Issued date of the bill."
                },
                "line_items": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "accounting_field_selections": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "field_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                        },
                        "field_option_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                        }
                      },
                      "description": null
                    },
                    "amount": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "memo": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    }
                  },
                  "description": "List of line items related to the bill."
                },
                "memo": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Memo of the bill."
                },
                "payment_details": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Payment details of the bill. Expected schema depends on payment method."
                },
                "payment_method": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "ACH",
                    "AUTOMATIC_CARD_PAYMENT",
                    "CARD",
                    "CHECK",
                    "CRYPTO_WALLET_TRANSFER",
                    "DOMESTIC_WIRE",
                    "INTERNATIONAL",
                    "LOCAL_BANK_TRANSFER",
                    "ONE_TIME_CARD",
                    "ONE_TIME_CARD_DELIVERY",
                    "PAID_MANUALLY",
                    "SWIFT",
                    "UNSPECIFIED",
                    "VENDOR_CREDIT"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": "Payment method of the bill."
                },
                "posting_date": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The date the bill is posted to the accounting system."
                },
                "remote_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "An ID that identifies the bill on client's side."
                },
                "vendor_contact_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of vendor contact, must be associated with passed vendor."
                },
                "vendor_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of bill vendor."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_field_selections": {
                  "type": "array",
                  "description": "List of accounting field options selected to code the bill.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_external_id": {
                        "type": "string",
                        "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                      },
                      "field_option_external_id": {
                        "type": "string",
                        "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                      }
                    },
                    "required": [
                      "field_external_id",
                      "field_option_external_id"
                    ]
                  }
                },
                "due_at": {
                  "type": "string",
                  "description": "Due date of the bill.",
                  "format": "date"
                },
                "entity_id": {
                  "type": "string",
                  "description": "Associated business entity.",
                  "format": "uuid"
                },
                "inventory_line_items": {
                  "type": "array",
                  "description": "List of inventory line items related to the bill.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accounting_field_selections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                            },
                            "field_option_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                            }
                          },
                          "required": [
                            "field_external_id",
                            "field_option_external_id"
                          ]
                        }
                      },
                      "memo": {
                        "type": "string"
                      },
                      "unit_price": {
                        "type": "object",
                        "properties": {},
                        "oneOf": [
                          {
                            "type": "string",
                            "format": "decimal"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "unit_quantity": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": [
                      "unit_price",
                      "unit_quantity"
                    ]
                  }
                },
                "invoice_currency": {
                  "type": "string",
                  "description": "Currency of the invoice.",
                  "enum": [
                    "AED",
                    "AFN",
                    "ALL",
                    "AMD",
                    "ANG",
                    "AOA",
                    "ARS",
                    "AUD",
                    "AWG",
                    "AZN",
                    "BAM",
                    "BBD",
                    "BDT",
                    "BGN",
                    "BHD",
                    "BIF",
                    "BMD",
                    "BND",
                    "BOB",
                    "BOV",
                    "BRL",
                    "BSD",
                    "BTN",
                    "BWP",
                    "BYN",
                    "BZD",
                    "CAD",
                    "CDF",
                    "CHE",
                    "CHF",
                    "CHW",
                    "CLF",
                    "CLP",
                    "CNY",
                    "COP",
                    "COU",
                    "CRC",
                    "CUC",
                    "CUP",
                    "CVE",
                    "CZK",
                    "DJF",
                    "DKK",
                    "DOP",
                    "DZD",
                    "EGP",
                    "ERN",
                    "ETB",
                    "EUR",
                    "EURC",
                    "FJD",
                    "FKP",
                    "GBP",
                    "GEL",
                    "GHS",
                    "GIP",
                    "GMD",
                    "GNF",
                    "GTQ",
                    "GYD",
                    "HKD",
                    "HNL",
                    "HRK",
                    "HTG",
                    "HUF",
                    "IDR",
                    "ILS",
                    "INR",
                    "IQD",
                    "IRR",
                    "ISK",
                    "JMD",
                    "JOD",
                    "JPY",
                    "KES",
                    "KGS",
                    "KHR",
                    "KMF",
                    "KPW",
                    "KRW",
                    "KWD",
                    "KYD",
                    "KZT",
                    "LAK",
                    "LBP",
                    "LKR",
                    "LRD",
                    "LSL",
                    "LYD",
                    "MAD",
                    "MDL",
                    "MGA",
                    "MKD",
                    "MMK",
                    "MNT",
                    "MOP",
                    "MRU",
                    "MUR",
                    "MVR",
                    "MWK",
                    "MXN",
                    "MXV",
                    "MYR",
                    "MZN",
                    "NAD",
                    "NGN",
                    "NIO",
                    "NOK",
                    "NPR",
                    "NZD",
                    "OMR",
                    "PAB",
                    "PEN",
                    "PGK",
                    "PHP",
                    "PKR",
                    "PLN",
                    "PYG",
                    "QAR",
                    "RON",
                    "RSD",
                    "RUB",
                    "RWF",
                    "SAR",
                    "SBD",
                    "SCR",
                    "SDG",
                    "SEK",
                    "SGD",
                    "SHP",
                    "SLE",
                    "SLL",
                    "SOS",
                    "SRD",
                    "SSP",
                    "STN",
                    "SVC",
                    "SYP",
                    "SZL",
                    "THB",
                    "TJS",
                    "TMT",
                    "TND",
                    "TOP",
                    "TRY",
                    "TTD",
                    "TWD",
                    "TZS",
                    "UAH",
                    "UGX",
                    "USD",
                    "USDC",
                    "USN",
                    "UYI",
                    "UYU",
                    "UYW",
                    "UZS",
                    "VED",
                    "VES",
                    "VND",
                    "VUV",
                    "WST",
                    "XAD",
                    "XAF",
                    "XAG",
                    "XAU",
                    "XBA",
                    "XBB",
                    "XBC",
                    "XBD",
                    "XCD",
                    "XCG",
                    "XDR",
                    "XOF",
                    "XPD",
                    "XPF",
                    "XPT",
                    "XSU",
                    "XTS",
                    "XUA",
                    "XXX",
                    "YER",
                    "ZAR",
                    "ZMW",
                    "ZWG",
                    "ZWL"
                  ]
                },
                "invoice_number": {
                  "type": "string",
                  "description": "The invoice number on the bill."
                },
                "issued_at": {
                  "type": "string",
                  "description": "Issued date of the bill.",
                  "format": "date"
                },
                "line_items": {
                  "type": "array",
                  "description": "List of line items related to the bill.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accounting_field_selections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                            },
                            "field_option_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                            }
                          },
                          "required": [
                            "field_external_id",
                            "field_option_external_id"
                          ]
                        }
                      },
                      "amount": {
                        "type": "object",
                        "properties": {},
                        "oneOf": [
                          {
                            "type": "string",
                            "format": "decimal"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "memo": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount"
                    ]
                  }
                },
                "memo": {
                  "type": "string",
                  "description": "Memo of the bill."
                },
                "payment_details": {
                  "type": "object",
                  "description": "Payment details of the bill. Expected schema depends on payment method.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {},
                      "oneOf": [
                        {
                          "type": "object",
                          "properties": {
                            "payment_arrival_date": {
                              "type": "string",
                              "description": "\nThe expected date the payment will arrive in the vendor's bank account.\n\nThe required time and fee to process the payment depends on the payment method. See the [Ramp Help Center](https://support.ramp.com/hc/en-us/articles/4417836454419-Bill-payment-methods-and-timelines) for more information on payment speeds. An error will be thrown if selected date is invalid.\n",
                              "format": "date"
                            },
                            "source_bank_account_id": {
                              "type": "string",
                              "description": "Unique identifier of the bank account to pay the bill from. Must be associated with the passed business entity and have usage_type=BILL_PAY_BANK_ACCOUNT.",
                              "format": "uuid"
                            },
                            "vendor_account_id": {
                              "type": "string",
                              "description": "Unique identifier of the vendor account to pay the bill to.",
                              "format": "uuid"
                            }
                          },
                          "required": [
                            "payment_arrival_date",
                            "source_bank_account_id",
                            "vendor_account_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "payment_arrival_date": {
                              "type": "string",
                              "description": "\nThe expected date the payment will arrive in the vendor's bank account.\n\nThe required time and fee to process the payment depends on the payment method. See the [Ramp Help Center](https://support.ramp.com/hc/en-us/articles/4417836454419-Bill-payment-methods-and-timelines) for more information on payment speeds. An error will be thrown if selected date is invalid.\n",
                              "format": "date"
                            },
                            "source_bank_account_id": {
                              "type": "string",
                              "description": "Unique identifier of the bank account to pay the bill from. Must be associated with the passed business entity and have usage_type=BILL_PAY_BANK_ACCOUNT.",
                              "format": "uuid"
                            }
                          },
                          "required": [
                            "payment_arrival_date",
                            "source_bank_account_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "spend_limit_id": {
                              "type": "string",
                              "description": "Unique identifier of the spend limit associated with the matched transaction.",
                              "format": "uuid"
                            },
                            "transaction_id": {
                              "type": "string",
                              "description": "If already paid, the unique identifier of the bill payment transaction. The bill will be marked as paid with this transaction once approved.",
                              "format": "uuid"
                            }
                          },
                          "required": [
                            "spend_limit_id"
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "manual_payment_method": {
                              "type": "string",
                              "description": "Manual payment method of the bill. If passed, payment_date must also be passed and the bill will be marked as paid.",
                              "enum": [
                                "CASH",
                                "CHECK",
                                "CROSS_BORDER_PAYMENT",
                                "CRYPTO_WALLET_TRANSFER",
                                "DIRECT_DEBIT",
                                "DOMESTIC_WIRE_TRANSFER",
                                "NON_RAMP_CREDIT_CARD",
                                "OTHER",
                                "PAID_IN_ERP"
                              ]
                            },
                            "payment_date": {
                              "type": "string",
                              "description": "The date the bill is paid. This field is not relevant for one-time card delivery, as limits are created immediately and sent out to the vendor on the due date.",
                              "format": "date"
                            }
                          },
                          "required": [
                            "manual_payment_method",
                            "payment_date"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method of the bill.",
                  "enum": [
                    "ACH",
                    "AUTOMATIC_CARD_PAYMENT",
                    "CARD",
                    "CHECK",
                    "CRYPTO_WALLET_TRANSFER",
                    "DOMESTIC_WIRE",
                    "INTERNATIONAL",
                    "LOCAL_BANK_TRANSFER",
                    "ONE_TIME_CARD",
                    "ONE_TIME_CARD_DELIVERY",
                    "PAID_MANUALLY",
                    "SWIFT",
                    "UNSPECIFIED",
                    "VENDOR_CREDIT"
                  ]
                },
                "posting_date": {
                  "type": "string",
                  "description": "The date the bill is posted to the accounting system.",
                  "format": "date"
                },
                "remote_id": {
                  "type": "string",
                  "description": "An ID that identifies the bill on client's side."
                },
                "vendor_contact_id": {
                  "type": "string",
                  "description": "Unique identifier of vendor contact, must be associated with passed vendor.",
                  "format": "uuid"
                },
                "vendor_id": {
                  "type": "string",
                  "description": "Unique identifier of bill vendor.",
                  "format": "uuid"
                }
              },
              "required": [
                "due_at",
                "entity_id",
                "invoice_currency",
                "invoice_number",
                "issued_at",
                "payment_method",
                "vendor_contact_id",
                "vendor_id"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_field_selections\": [\n            {\n              \"field_external_id\": \"b3B0aW9uX2lk\",\n              \"field_option_external_id\": \"aln2l3B0aW9uX2lk\"\n            }\n          ],\n          \"due_at\": \"2024-10-15\",\n          \"entity_id\": \"1cc4b57c-fe4a-4425-90f1-9019d06376b3\",\n          \"inventory_line_items\": [\n            {\n              \"accounting_field_selections\": [\n                {\n                  \"field_external_id\": \"aa73laMazi2\",\n                  \"field_option_external_id\": \"abk3Rkfnls25\"\n                }\n              ],\n              \"memo\": \"Pens\",\n              \"unit_price\": 55,\n              \"unit_quantity\": 2\n            }\n          ],\n          \"invoice_currency\": \"USD\",\n          \"invoice_number\": \"123\",\n          \"issued_at\": \"2024-08-15\",\n          \"line_items\": [\n            {\n              \"accounting_field_selections\": [],\n              \"amount\": 100,\n              \"memo\": \"Printing services\"\n            }\n          ],\n          \"memo\": \"Office supplies\",\n          \"payment_details\": {\n            \"manual_payment_method\": \"CASH\",\n            \"payment_date\": \"2024-08-15\"\n          },\n          \"payment_method\": \"ONE_TIME_CARD_DELIVERY\",\n          \"posting_date\": null,\n          \"remote_id\": \"bo2f1lAnkf3llL\",\n          \"vendor_contact_id\": \"12f55361-8c7f-42dc-8667-64926d330b80\",\n          \"vendor_id\": \"c0c89fa8-976e-428d-938d-a5ec89838474\"\n        },\n        \"properties\": {\n          \"accounting_field_selections\": {\n            \"description\": \"List of accounting field options selected to code the bill.\",\n            \"items\": {\n              \"properties\": {\n                \"field_external_id\": {\n                  \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                  \"type\": \"string\"\n                },\n                \"field_option_external_id\": {\n                  \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_external_id\",\n                \"field_option_external_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"due_at\": {\n            \"description\": \"Due date of the bill.\",\n            \"format\": \"date\",\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Associated business entity.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"inventory_line_items\": {\n            \"description\": \"List of inventory line items related to the bill.\",\n            \"items\": {\n              \"properties\": {\n                \"accounting_field_selections\": {\n                  \"items\": {\n                    \"properties\": {\n                      \"field_external_id\": {\n                        \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      },\n                      \"field_option_external_id\": {\n                        \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"field_external_id\",\n                      \"field_option_external_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"memo\": {\n                  \"default\": null,\n                  \"nullable\": true,\n                  \"type\": \"string\"\n                },\n                \"unit_price\": {\n                  \"minimum\": 0,\n                  \"oneOf\": [\n                    {\n                      \"format\": \"decimal\",\n                      \"type\": \"string\"\n                    },\n                    {\n                      \"type\": \"number\"\n                    }\n                  ]\n                },\n                \"unit_quantity\": {\n                  \"minimum\": 0,\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"unit_price\",\n                \"unit_quantity\"\n              ],\n              \"type\": \"object\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          },\n          \"invoice_currency\": {\n            \"description\": \"Currency of the invoice.\",\n            \"enum\": [\n              \"AED\",\n              \"AFN\",\n              \"ALL\",\n              \"AMD\",\n              \"ANG\",\n              \"AOA\",\n              \"ARS\",\n              \"AUD\",\n              \"AWG\",\n              \"AZN\",\n              \"BAM\",\n              \"BBD\",\n              \"BDT\",\n              \"BGN\",\n              \"BHD\",\n              \"BIF\",\n              \"BMD\",\n              \"BND\",\n              \"BOB\",\n              \"BOV\",\n              \"BRL\",\n              \"BSD\",\n              \"BTN\",\n              \"BWP\",\n              \"BYN\",\n              \"BZD\",\n              \"CAD\",\n              \"CDF\",\n              \"CHE\",\n              \"CHF\",\n              \"CHW\",\n              \"CLF\",\n              \"CLP\",\n              \"CNY\",\n              \"COP\",\n              \"COU\",\n              \"CRC\",\n              \"CUC\",\n              \"CUP\",\n              \"CVE\",\n              \"CZK\",\n              \"DJF\",\n              \"DKK\",\n              \"DOP\",\n              \"DZD\",\n              \"EGP\",\n              \"ERN\",\n              \"ETB\",\n              \"EUR\",\n              \"EURC\",\n              \"FJD\",\n              \"FKP\",\n              \"GBP\",\n              \"GEL\",\n              \"GHS\",\n              \"GIP\",\n              \"GMD\",\n              \"GNF\",\n              \"GTQ\",\n              \"GYD\",\n              \"HKD\",\n              \"HNL\",\n              \"HRK\",\n              \"HTG\",\n              \"HUF\",\n              \"IDR\",\n              \"ILS\",\n              \"INR\",\n              \"IQD\",\n              \"IRR\",\n              \"ISK\",\n              \"JMD\",\n              \"JOD\",\n              \"JPY\",\n              \"KES\",\n              \"KGS\",\n              \"KHR\",\n              \"KMF\",\n              \"KPW\",\n              \"KRW\",\n              \"KWD\",\n              \"KYD\",\n              \"KZT\",\n              \"LAK\",\n              \"LBP\",\n              \"LKR\",\n              \"LRD\",\n              \"LSL\",\n              \"LYD\",\n              \"MAD\",\n              \"MDL\",\n              \"MGA\",\n              \"MKD\",\n              \"MMK\",\n              \"MNT\",\n              \"MOP\",\n              \"MRU\",\n              \"MUR\",\n              \"MVR\",\n              \"MWK\",\n              \"MXN\",\n              \"MXV\",\n              \"MYR\",\n              \"MZN\",\n              \"NAD\",\n              \"NGN\",\n              \"NIO\",\n              \"NOK\",\n              \"NPR\",\n              \"NZD\",\n              \"OMR\",\n              \"PAB\",\n              \"PEN\",\n              \"PGK\",\n              \"PHP\",\n              \"PKR\",\n              \"PLN\",\n              \"PYG\",\n              \"QAR\",\n              \"RON\",\n              \"RSD\",\n              \"RUB\",\n              \"RWF\",\n              \"SAR\",\n              \"SBD\",\n              \"SCR\",\n              \"SDG\",\n              \"SEK\",\n              \"SGD\",\n              \"SHP\",\n              \"SLE\",\n              \"SLL\",\n              \"SOS\",\n              \"SRD\",\n              \"SSP\",\n              \"STN\",\n              \"SVC\",\n              \"SYP\",\n              \"SZL\",\n              \"THB\",\n              \"TJS\",\n              \"TMT\",\n              \"TND\",\n              \"TOP\",\n              \"TRY\",\n              \"TTD\",\n              \"TWD\",\n              \"TZS\",\n              \"UAH\",\n              \"UGX\",\n              \"USD\",\n              \"USDC\",\n              \"USN\",\n              \"UYI\",\n              \"UYU\",\n              \"UYW\",\n              \"UZS\",\n              \"VED\",\n              \"VES\",\n              \"VND\",\n              \"VUV\",\n              \"WST\",\n              \"XAD\",\n              \"XAF\",\n              \"XAG\",\n              \"XAU\",\n              \"XBA\",\n              \"XBB\",\n              \"XBC\",\n              \"XBD\",\n              \"XCD\",\n              \"XCG\",\n              \"XDR\",\n              \"XOF\",\n              \"XPD\",\n              \"XPF\",\n              \"XPT\",\n              \"XSU\",\n              \"XTS\",\n              \"XUA\",\n              \"XXX\",\n              \"YER\",\n              \"ZAR\",\n              \"ZMW\",\n              \"ZWG\",\n              \"ZWL\"\n            ],\n            \"type\": \"string\"\n          },\n          \"invoice_number\": {\n            \"description\": \"The invoice number on the bill.\",\n            \"maxLength\": 20,\n            \"type\": \"string\"\n          },\n          \"issued_at\": {\n            \"description\": \"Issued date of the bill.\",\n            \"format\": \"date\",\n            \"type\": \"string\"\n          },\n          \"line_items\": {\n            \"description\": \"List of line items related to the bill.\",\n            \"items\": {\n              \"properties\": {\n                \"accounting_field_selections\": {\n                  \"items\": {\n                    \"properties\": {\n                      \"field_external_id\": {\n                        \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      },\n                      \"field_option_external_id\": {\n                        \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"field_external_id\",\n                      \"field_option_external_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"amount\": {\n                  \"oneOf\": [\n                    {\n                      \"format\": \"decimal\",\n                      \"type\": \"string\"\n                    },\n                    {\n                      \"type\": \"number\"\n                    }\n                  ]\n                },\n                \"memo\": {\n                  \"default\": null,\n                  \"nullable\": true,\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"amount\"\n              ],\n              \"type\": \"object\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          },\n          \"memo\": {\n            \"default\": null,\n            \"description\": \"Memo of the bill.\",\n            \"maxLength\": 1000,\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"payment_details\": {\n            \"allOf\": [\n              {\n                \"discriminator\": {\n                  \"mapping\": {\n                    \"ACH\": \"#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody\",\n                    \"CARD\": \"#/components/schemas/ApiCreateCardBillPaymentParamsRequestBody\",\n                    \"CHECK\": \"#/components/schemas/ApiCreateBillVendorPaymentParamsRequestBody\",\n                    \"DOMESTIC_WIRE\": \"#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody\",\n                    \"INTERNATIONAL\": \"#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody\",\n                    \"PAID_MANUALLY\": \"#/components/schemas/ApiCreateManualBillPaymentParamsRequestBody\",\n                    \"SWIFT\": \"#/components/schemas/ApiCreateBankAccountPaymentParamsRequestBody\"\n                  },\n                  \"propertyName\": \"payment_method\"\n                },\n                \"oneOf\": [\n                  {\n                    \"properties\": {\n                      \"payment_arrival_date\": {\n                        \"description\": \"\\nThe expected date the payment will arrive in the vendor's bank account.\\n\\nThe required time and fee to process the payment depends on the payment method. See the [Ramp Help Center](https://support.ramp.com/hc/en-us/articles/4417836454419-Bill-payment-methods-and-timelines) for more information on payment speeds. An error will be thrown if selected date is invalid.\\n\",\n                        \"format\": \"date\",\n                        \"type\": \"string\"\n                      },\n                      \"source_bank_account_id\": {\n                        \"description\": \"Unique identifier of the bank account to pay the bill from. Must be associated with the passed business entity and have usage_type=BILL_PAY_BANK_ACCOUNT.\",\n                        \"format\": \"uuid\",\n                        \"type\": \"string\"\n                      },\n                      \"vendor_account_id\": {\n                        \"description\": \"Unique identifier of the vendor account to pay the bill to.\",\n                        \"format\": \"uuid\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"payment_arrival_date\",\n                      \"source_bank_account_id\",\n                      \"vendor_account_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"properties\": {\n                      \"payment_arrival_date\": {\n                        \"description\": \"\\nThe expected date the payment will arrive in the vendor's bank account.\\n\\nThe required time and fee to process the payment depends on the payment method. See the [Ramp Help Center](https://support.ramp.com/hc/en-us/articles/4417836454419-Bill-payment-methods-and-timelines) for more information on payment speeds. An error will be thrown if selected date is invalid.\\n\",\n                        \"format\": \"date\",\n                        \"type\": \"string\"\n                      },\n                      \"source_bank_account_id\": {\n                        \"description\": \"Unique identifier of the bank account to pay the bill from. Must be associated with the passed business entity and have usage_type=BILL_PAY_BANK_ACCOUNT.\",\n                        \"format\": \"uuid\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"payment_arrival_date\",\n                      \"source_bank_account_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"properties\": {\n                      \"spend_limit_id\": {\n                        \"description\": \"Unique identifier of the spend limit associated with the matched transaction.\",\n                        \"format\": \"uuid\",\n                        \"type\": \"string\"\n                      },\n                      \"transaction_id\": {\n                        \"default\": null,\n                        \"description\": \"If already paid, the unique identifier of the bill payment transaction. The bill will be marked as paid with this transaction once approved.\",\n                        \"format\": \"uuid\",\n                        \"nullable\": true,\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"spend_limit_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  {\n                    \"properties\": {\n                      \"manual_payment_method\": {\n                        \"description\": \"Manual payment method of the bill. If passed, payment_date must also be passed and the bill will be marked as paid.\",\n                        \"enum\": [\n                          \"CASH\",\n                          \"CHECK\",\n                          \"CROSS_BORDER_PAYMENT\",\n                          \"CRYPTO_WALLET_TRANSFER\",\n                          \"DIRECT_DEBIT\",\n                          \"DOMESTIC_WIRE_TRANSFER\",\n                          \"NON_RAMP_CREDIT_CARD\",\n                          \"OTHER\",\n                          \"PAID_IN_ERP\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"payment_date\": {\n                        \"description\": \"The date the bill is paid. This field is not relevant for one-time card delivery, as limits are created immediately and sent out to the vendor on the due date.\",\n                        \"format\": \"date\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"manual_payment_method\",\n                      \"payment_date\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ]\n              }\n            ],\n            \"default\": null,\n            \"description\": \"Payment details of the bill. Expected schema depends on payment method.\",\n            \"nullable\": true\n          },\n          \"payment_method\": {\n            \"description\": \"Payment method of the bill.\",\n            \"enum\": [\n              \"ACH\",\n              \"AUTOMATIC_CARD_PAYMENT\",\n              \"CARD\",\n              \"CHECK\",\n              \"CRYPTO_WALLET_TRANSFER\",\n              \"DOMESTIC_WIRE\",\n              \"INTERNATIONAL\",\n              \"LOCAL_BANK_TRANSFER\",\n              \"ONE_TIME_CARD\",\n              \"ONE_TIME_CARD_DELIVERY\",\n              \"PAID_MANUALLY\",\n              \"SWIFT\",\n              \"UNSPECIFIED\",\n              \"VENDOR_CREDIT\"\n            ],\n            \"type\": \"string\"\n          },\n          \"posting_date\": {\n            \"default\": null,\n            \"description\": \"The date the bill is posted to the accounting system.\",\n            \"format\": \"date\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"remote_id\": {\n            \"default\": null,\n            \"description\": \"An ID that identifies the bill on client's side.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"vendor_contact_id\": {\n            \"description\": \"Unique identifier of vendor contact, must be associated with passed vendor.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"vendor_id\": {\n            \"description\": \"Unique identifier of bill vendor.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"due_at\",\n          \"entity_id\",\n          \"invoice_currency\",\n          \"invoice_number\",\n          \"issued_at\",\n          \"payment_method\",\n          \"vendor_contact_id\",\n          \"vendor_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_draft_bill_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_draft_bills",
        "description": {
          "tagline": "Retrieve a list of draft bills.",
          "detailed": "This tool is used to get a list of draft bills from the Ramp service, including pagination information. Call this when you need to access or manage draft billing entries."
        },
        "return_annotation": "A list of draft bills with pagination details.",
        "arguments": [
          {
            "name": "filter_by_entity_id",
            "alternative_names": [
              "filter_drafts_by_entity",
              "entity_filter"
            ],
            "description": "Filter draft bills by a specific entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_by_vendor_id",
            "alternative_names": [
              "vendor_identifier_filter",
              "vendor_id_filter"
            ],
            "description": "Filter draft bills by vendor using a vendor ID as a string.",
            "endpoint_argument_name": "vendor_id"
          },
          {
            "name": "filter_from_creation_date",
            "alternative_names": [
              "created_at_start_date",
              "creation_date_start"
            ],
            "description": "Filter draft bills with a creation date on or after this ISO 8601 datetime string.",
            "endpoint_argument_name": "from_created_at"
          },
          {
            "name": "before_creation_date",
            "alternative_names": [
              "created_date_end",
              "creation_cutoff_date"
            ],
            "description": "Filters draft bills created on or before this date. Provide as an ISO 8601 datetime string.",
            "endpoint_argument_name": "to_created_at"
          },
          {
            "name": "due_date_from",
            "alternative_names": [
              "from_due_at_date",
              "start_due_date"
            ],
            "description": "Shows draft bills due on or after this date. Use ISO 8601 datetime format.",
            "endpoint_argument_name": "from_due_date"
          },
          {
            "name": "due_date_before",
            "alternative_names": [
              "to_due",
              "end_due_date"
            ],
            "description": "Filter draft bills by a due date on or before this date. Must be an ISO 8601 datetime string.",
            "endpoint_argument_name": "to_due_date"
          },
          {
            "name": "issued_date_start_filter",
            "alternative_names": [
              "start_issued_date_filter",
              "issued_date_from_filter"
            ],
            "description": "Filter draft bills issued on or after this date (ISO 8601 format).",
            "endpoint_argument_name": "from_issued_date"
          },
          {
            "name": "filter_to_issued_date",
            "alternative_names": [
              "end_issued_date",
              "max_issued_date"
            ],
            "description": "Filter draft bills to those issued on or before this date. Use ISO 8601 format.",
            "endpoint_argument_name": "to_issued_date"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "page_start_id",
              "prev_entity_id"
            ],
            "description": "The ID of the last entity from the previous page for pagination purposes.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_limit",
              "pagination_size"
            ],
            "description": "Number of draft bills to return per page, between 2 and 100. Default is 20.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/bills/drafts",
      "tags": [
        "Bill"
      ],
      "summary": "List draft bills",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "bills:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter draft bills by entity."
            },
            "description": "Filter draft bills by entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter draft bills by vendor."
            },
            "description": "Filter draft bills by vendor.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "from_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only draft bills with a created_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only draft bills with a created_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only draft bills with a created_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only draft bills with a created_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "from_due_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only draft bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only draft bills with a due_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_due_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only draft bills with a due_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only draft bills with a due_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "from_issued_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only draft bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only draft bills with a issued_at on or after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_issued_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Shows only draft bills with a issued_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Shows only draft bills with a issued_at on or before this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_draft_bill_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_draft_bill",
        "description": {
          "tagline": "Fetches details of a draft bill using its ID.",
          "detailed": "Call this tool to retrieve detailed information about a draft bill by providing its specific ID. Useful for accessing draft bill data when reviewing or editing bills."
        },
        "return_annotation": "Draft bill details for the given ID.",
        "arguments": [
          {
            "name": "draft_bill_identifier",
            "alternative_names": [
              "bill_id",
              "draft_id"
            ],
            "description": "A unique identifier for the draft bill to fetch. Provide this to retrieve specific draft bill details.",
            "endpoint_argument_name": "draft_bill_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/bills/drafts/{draft_bill_id}",
      "tags": [
        "Bill"
      ],
      "summary": "Fetch a draft bill",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "bills:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "draft_bill_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_bill_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_bill_details",
        "description": {
          "tagline": "Fetch details of a specified bill using its ID.",
          "detailed": "This tool retrieves detailed information about a specific bill using the bill ID. It should be called when you need to know the specifics of a bill, such as in financial review or customer billing inquiries."
        },
        "return_annotation": "Details of the specified bill.",
        "arguments": [
          {
            "name": "bill_identifier",
            "alternative_names": [
              "invoice_id",
              "billing_id"
            ],
            "description": "The unique identifier for the bill you want to fetch details for. Provide this to retrieve specific bill information.",
            "endpoint_argument_name": "bill_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/bills/{bill_id}",
      "tags": [
        "Bill"
      ],
      "summary": "Fetch a bill",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "bills:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "bill_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_bill_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_bill",
        "description": {
          "tagline": "Update details of an existing bill.",
          "detailed": "Use this tool to make changes to an existing bill's data. It should be called when modifications to bill details are necessary."
        },
        "return_annotation": "Confirmation of bill update success or failure.",
        "arguments": [
          {
            "name": "bill_identifier",
            "alternative_names": [
              "bill_id",
              "bill_reference"
            ],
            "description": "The unique identifier of the bill to be updated. This is required to specify which bill to modify.",
            "endpoint_argument_name": "bill_id"
          },
          {
            "name": "bill_update_details",
            "alternative_names": [
              "bill_update_data",
              "bill_modification_content"
            ],
            "description": "JSON object containing details to update a bill, including due date, entity ID, line items, memo, payment method, and other related data.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/bills/{bill_id}",
      "tags": [
        "Bill"
      ],
      "summary": "Update a bill",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "bills:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "bill_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_field_selections": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_external_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                    },
                    "field_option_external_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                    }
                  },
                  "description": "List of accounting field options selected to code the bill."
                },
                "due_at": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Due date of the bill."
                },
                "entity_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Associated business entity."
                },
                "inventory_line_items": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "accounting_field_selections": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "field_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                        },
                        "field_option_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                        }
                      },
                      "description": null
                    },
                    "memo": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "unit_price": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "unit_quantity": {
                      "val_type": "integer",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    }
                  },
                  "description": "List of inventory line items related to the bill."
                },
                "invoice_number": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The invoice number on the bill."
                },
                "issued_at": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Issued date of the bill."
                },
                "line_items": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "accounting_field_selections": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "field_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                        },
                        "field_option_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                        }
                      },
                      "description": null
                    },
                    "amount": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    },
                    "memo": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    }
                  },
                  "description": "List of line items related to the bill."
                },
                "memo": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Memo of the bill."
                },
                "payment_method": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "ACH",
                    "AUTOMATIC_CARD_PAYMENT",
                    "CARD",
                    "CHECK",
                    "CRYPTO_WALLET_TRANSFER",
                    "DOMESTIC_WIRE",
                    "INTERNATIONAL",
                    "LOCAL_BANK_TRANSFER",
                    "ONE_TIME_CARD",
                    "ONE_TIME_CARD_DELIVERY",
                    "PAID_MANUALLY",
                    "SWIFT",
                    "UNSPECIFIED",
                    "VENDOR_CREDIT"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": "Payment method of the bill."
                },
                "posting_date": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The date the bill is posted to the accounting system."
                },
                "purchase_order_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the purchase order to match this bill to. Set to null to remove the link to the purchase order from the bill."
                },
                "remote_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "An ID that identifies the bill on client's side."
                },
                "vendor_contact_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of vendor contact, must be associated with passed vendor."
                },
                "vendor_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of bill vendor."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_field_selections": {
                  "type": "array",
                  "description": "List of accounting field options selected to code the bill.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_external_id": {
                        "type": "string",
                        "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                      },
                      "field_option_external_id": {
                        "type": "string",
                        "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                      }
                    },
                    "required": [
                      "field_external_id",
                      "field_option_external_id"
                    ]
                  }
                },
                "due_at": {
                  "type": "string",
                  "description": "Due date of the bill.",
                  "format": "date"
                },
                "entity_id": {
                  "type": "string",
                  "description": "Associated business entity.",
                  "format": "uuid"
                },
                "inventory_line_items": {
                  "type": "array",
                  "description": "List of inventory line items related to the bill.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accounting_field_selections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                            },
                            "field_option_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                            }
                          },
                          "required": [
                            "field_external_id",
                            "field_option_external_id"
                          ]
                        }
                      },
                      "memo": {
                        "type": "string"
                      },
                      "unit_price": {
                        "type": "object",
                        "properties": {},
                        "oneOf": [
                          {
                            "type": "string",
                            "format": "decimal"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "unit_quantity": {
                        "type": "integer",
                        "minimum": 0
                      }
                    },
                    "required": [
                      "unit_price",
                      "unit_quantity"
                    ]
                  }
                },
                "invoice_number": {
                  "type": "string",
                  "description": "The invoice number on the bill."
                },
                "issued_at": {
                  "type": "string",
                  "description": "Issued date of the bill.",
                  "format": "date"
                },
                "line_items": {
                  "type": "array",
                  "description": "List of line items related to the bill.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accounting_field_selections": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                            },
                            "field_option_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                            }
                          },
                          "required": [
                            "field_external_id",
                            "field_option_external_id"
                          ]
                        }
                      },
                      "amount": {
                        "type": "object",
                        "properties": {},
                        "oneOf": [
                          {
                            "type": "string",
                            "format": "decimal"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "memo": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "amount"
                    ]
                  }
                },
                "memo": {
                  "type": "string",
                  "description": "Memo of the bill."
                },
                "payment_method": {
                  "type": "string",
                  "description": "Payment method of the bill.",
                  "enum": [
                    "ACH",
                    "AUTOMATIC_CARD_PAYMENT",
                    "CARD",
                    "CHECK",
                    "CRYPTO_WALLET_TRANSFER",
                    "DOMESTIC_WIRE",
                    "INTERNATIONAL",
                    "LOCAL_BANK_TRANSFER",
                    "ONE_TIME_CARD",
                    "ONE_TIME_CARD_DELIVERY",
                    "PAID_MANUALLY",
                    "SWIFT",
                    "UNSPECIFIED",
                    "VENDOR_CREDIT"
                  ]
                },
                "posting_date": {
                  "type": "string",
                  "description": "The date the bill is posted to the accounting system.",
                  "format": "date"
                },
                "purchase_order_id": {
                  "type": "string",
                  "description": "Unique identifier of the purchase order to match this bill to. Set to null to remove the link to the purchase order from the bill.",
                  "format": "uuid"
                },
                "remote_id": {
                  "type": "string",
                  "description": "An ID that identifies the bill on client's side."
                },
                "vendor_contact_id": {
                  "type": "string",
                  "description": "Unique identifier of vendor contact, must be associated with passed vendor.",
                  "format": "uuid"
                },
                "vendor_id": {
                  "type": "string",
                  "description": "Unique identifier of bill vendor.",
                  "format": "uuid"
                }
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_field_selections\": [\n            {\n              \"field_external_id\": \"b3B0aW9uX2lk\",\n              \"field_option_external_id\": \"aln2l3B0aW9uX2lk\"\n            }\n          ],\n          \"due_at\": \"2024-10-15\",\n          \"entity_id\": \"1cc4b57c-fe4a-4425-90f1-9019d06376b3\",\n          \"inventory_line_items\": [\n            {\n              \"accounting_field_selections\": [\n                {\n                  \"field_external_id\": \"aa73laMazi2\",\n                  \"field_option_external_id\": \"abk3Rkfnls25\"\n                }\n              ],\n              \"memo\": \"Pens\",\n              \"unit_price\": 55,\n              \"unit_quantity\": 2\n            }\n          ],\n          \"invoice_number\": \"123\",\n          \"issued_at\": \"2024-08-15\",\n          \"line_items\": [\n            {\n              \"accounting_field_selections\": [],\n              \"amount\": 100,\n              \"memo\": \"Printing services\"\n            }\n          ],\n          \"memo\": \"Office supplies\",\n          \"payment_method\": \"ONE_TIME_CARD_DELIVERY\",\n          \"posting_date\": null,\n          \"remote_id\": \"bo2f1lAnkf3llL\",\n          \"vendor_contact_id\": \"12f55361-8c7f-42dc-8667-64926d330b80\",\n          \"vendor_id\": \"c0c89fa8-976e-428d-938d-a5ec89838474\"\n        },\n        \"properties\": {\n          \"accounting_field_selections\": {\n            \"description\": \"List of accounting field options selected to code the bill.\",\n            \"items\": {\n              \"properties\": {\n                \"field_external_id\": {\n                  \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                  \"type\": \"string\"\n                },\n                \"field_option_external_id\": {\n                  \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_external_id\",\n                \"field_option_external_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"due_at\": {\n            \"description\": \"Due date of the bill.\",\n            \"format\": \"date\",\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Associated business entity.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"inventory_line_items\": {\n            \"description\": \"List of inventory line items related to the bill.\",\n            \"items\": {\n              \"properties\": {\n                \"accounting_field_selections\": {\n                  \"items\": {\n                    \"properties\": {\n                      \"field_external_id\": {\n                        \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      },\n                      \"field_option_external_id\": {\n                        \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"field_external_id\",\n                      \"field_option_external_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"memo\": {\n                  \"default\": null,\n                  \"nullable\": true,\n                  \"type\": \"string\"\n                },\n                \"unit_price\": {\n                  \"minimum\": 0,\n                  \"oneOf\": [\n                    {\n                      \"format\": \"decimal\",\n                      \"type\": \"string\"\n                    },\n                    {\n                      \"type\": \"number\"\n                    }\n                  ]\n                },\n                \"unit_quantity\": {\n                  \"minimum\": 0,\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"unit_price\",\n                \"unit_quantity\"\n              ],\n              \"type\": \"object\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          },\n          \"invoice_number\": {\n            \"description\": \"The invoice number on the bill.\",\n            \"maxLength\": 20,\n            \"type\": \"string\"\n          },\n          \"issued_at\": {\n            \"description\": \"Issued date of the bill.\",\n            \"format\": \"date\",\n            \"type\": \"string\"\n          },\n          \"line_items\": {\n            \"description\": \"List of line items related to the bill.\",\n            \"items\": {\n              \"properties\": {\n                \"accounting_field_selections\": {\n                  \"items\": {\n                    \"properties\": {\n                      \"field_external_id\": {\n                        \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      },\n                      \"field_option_external_id\": {\n                        \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"field_external_id\",\n                      \"field_option_external_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"amount\": {\n                  \"oneOf\": [\n                    {\n                      \"format\": \"decimal\",\n                      \"type\": \"string\"\n                    },\n                    {\n                      \"type\": \"number\"\n                    }\n                  ]\n                },\n                \"memo\": {\n                  \"default\": null,\n                  \"nullable\": true,\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"amount\"\n              ],\n              \"type\": \"object\"\n            },\n            \"nullable\": true,\n            \"type\": \"array\"\n          },\n          \"memo\": {\n            \"description\": \"Memo of the bill.\",\n            \"maxLength\": 1000,\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"payment_method\": {\n            \"description\": \"Payment method of the bill.\",\n            \"enum\": [\n              \"ACH\",\n              \"AUTOMATIC_CARD_PAYMENT\",\n              \"CARD\",\n              \"CHECK\",\n              \"CRYPTO_WALLET_TRANSFER\",\n              \"DOMESTIC_WIRE\",\n              \"INTERNATIONAL\",\n              \"LOCAL_BANK_TRANSFER\",\n              \"ONE_TIME_CARD\",\n              \"ONE_TIME_CARD_DELIVERY\",\n              \"PAID_MANUALLY\",\n              \"SWIFT\",\n              \"UNSPECIFIED\",\n              \"VENDOR_CREDIT\"\n            ],\n            \"type\": \"string\"\n          },\n          \"posting_date\": {\n            \"description\": \"The date the bill is posted to the accounting system.\",\n            \"format\": \"date\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"purchase_order_id\": {\n            \"description\": \"Unique identifier of the purchase order to match this bill to. Set to null to remove the link to the purchase order from the bill.\",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"remote_id\": {\n            \"description\": \"An ID that identifies the bill on client's side.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"vendor_contact_id\": {\n            \"description\": \"Unique identifier of vendor contact, must be associated with passed vendor.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"vendor_id\": {\n            \"description\": \"Unique identifier of bill vendor.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "delete_bill_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_bill",
        "description": {
          "tagline": "Delete a bill and cancel associated payments if possible.",
          "detailed": "Use this tool to delete a specified bill. Note that inflight payments will be canceled if possible, or attached one-time-cards will be terminated. This action cannot be performed on paid bills or those in a batch payment."
        },
        "return_annotation": "Confirmation of bill deletion.",
        "arguments": [
          {
            "name": "bill_identifier",
            "alternative_names": [
              "bill_reference",
              "identifier_for_bill"
            ],
            "description": "The unique identifier of the bill to delete. It must be a string specifying the bill's ID.",
            "endpoint_argument_name": "bill_id"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/bills/{bill_id}",
      "tags": [
        "Bill"
      ],
      "summary": "Archive a bill",
      "description": "This is a destructive action. Associated inflight payments will be cancelled\nif possible or any attached one-time-card will be terminated. Paid bills and\nbills belonging to a batch payment cannot be deleted.",
      "requires_security": true,
      "oauth_scopes": [
        "bills:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "bill_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_bill_attachment_upload_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_bill_attachment",
        "description": {
          "tagline": "Upload an attachment to a bill as INVOICE or FILE.",
          "detailed": "Use this tool to upload a file attachment to a bill. The attachment can be of type INVOICE or FILE. The tool should be called when there is a need to associate a document with a specific bill. Note that INVOICE type cannot be uploaded if it already exists."
        },
        "return_annotation": "Confirmation of file upload to a bill.",
        "arguments": [
          {
            "name": "bill_identifier",
            "alternative_names": [
              "bill_reference_id",
              "bill_unique_key"
            ],
            "description": "A unique string identifier for the bill to which the file will be attached.",
            "endpoint_argument_name": "bill_id"
          },
          {
            "name": "attachment_type",
            "alternative_names": [
              "document_type",
              "file_category"
            ],
            "description": "Specify the type of attachment: 'INVOICE' for the actual invoice, or 'FILE' for other supporting documents.",
            "endpoint_argument_name": "attachment_type"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/bills/{bill_id}/attachments",
      "tags": [
        "Bill"
      ],
      "summary": "Upload a file attachment to an existing bill",
      "description": "Upload a file as an attachment to a bill. The file can be uploaded as either\nan INVOICE or FILE type. INVOICE type attachments cannot be uploaded if one\nalready exists on the bill.\n\nThis endpoint accepts the [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) format.\n\nInclude the file as a part named 'file' with `Content-Disposition: attachment`.\nInclude the attachment_type as a form field with value 'INVOICE' or 'FILE'.",
      "requires_security": true,
      "oauth_scopes": [
        "bills:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "bill_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "attachment_type",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "FILE",
                "INVOICE"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Type of attachment: 'INVOICE' for the actual invoice on a bill, or 'FILE' for other supporting documents"
            },
            "description": "Type of attachment: 'INVOICE' for the actual invoice on a bill, or 'FILE' for other supporting documents",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Type of attachment: 'INVOICE' for the actual invoice on a bill, or 'FILE' for other supporting documents",
              "enum": [
                "FILE",
                "INVOICE"
              ]
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"attachment_type\": {\n            \"description\": \"Type of attachment: 'INVOICE' for the actual invoice on a bill, or 'FILE' for other supporting documents\",\n            \"enum\": [\n              \"FILE\",\n              \"INVOICE\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"attachment_type\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_business_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_company_info",
        "description": {
          "tagline": "Fetch company information from the business resource endpoint.",
          "detailed": "This tool retrieves detailed company information by calling the business resource endpoint. It should be used when you need to access or display company details."
        },
        "return_annotation": "Returns detailed company information.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/business",
      "tags": [
        "Business"
      ],
      "summary": "Fetch the company information",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "business:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_business_balance_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_company_balance_info",
        "description": {
          "tagline": "Fetch the company balance information.",
          "detailed": ""
        },
        "return_annotation": "Company balance information.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/business/balance",
      "tags": [
        "Business"
      ],
      "summary": "Fetch the company balance information",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "business:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_card_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_cards",
        "description": {
          "tagline": "Retrieve a paginated list of cards from the service.",
          "detailed": "Use this tool to fetch a list of cards with pagination support. It provides card details across multiple pages if necessary."
        },
        "return_annotation": "A list of cards with pagination details.",
        "arguments": [
          {
            "name": "business_entity_filter",
            "alternative_names": [
              "entity_id_filter",
              "business_filter"
            ],
            "description": "Filter cards by the business entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_by_user_id",
            "alternative_names": [
              "user_id_filter",
              "card_owner_id"
            ],
            "description": "String identifier to filter the cards by card owner's user ID.",
            "endpoint_argument_name": "user_id"
          },
          {
            "name": "filter_by_card_program_id",
            "alternative_names": [
              "card_program_filter",
              "program_id_filter"
            ],
            "description": "A string to filter cards by their associated card program.",
            "endpoint_argument_name": "card_program_id"
          },
          {
            "name": "filter_by_display_name",
            "alternative_names": [
              "search_display_name",
              "card_display_name_filter"
            ],
            "description": "String to filter cards by their display name.",
            "endpoint_argument_name": "display_name"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "start_id",
              "previous_page_last_id"
            ],
            "description": "The ID of the last entity from the previous page for fetching the next page.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_results_limit",
              "number_of_cards_per_page"
            ],
            "description": "Specify the number of cards to return per page, between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "filter_activated_cards",
            "alternative_names": [
              "activated_filter",
              "activated_cards_only"
            ],
            "description": "Set to true to filter only activated cards. Defaults to true if not specified.",
            "endpoint_argument_name": "is_activated"
          },
          {
            "name": "filter_only_terminated_cards",
            "alternative_names": [
              "terminated_cards_only",
              "include_terminated_cards"
            ],
            "description": "Set to True to filter for only terminated cards. Defaults to False if not specified.",
            "endpoint_argument_name": "is_terminated"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/cards",
      "tags": [
        "Card"
      ],
      "summary": "List cards",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "cards:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by business entity."
            },
            "description": "Filter by business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by card owner."
            },
            "description": "Filter by card owner.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "card_program_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by card program."
            },
            "description": "Filter by card program.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "display_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by display name."
            },
            "description": "Filter by display name.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "is_activated",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter only for activated cards. Defaults to True if not specified"
            },
            "description": "Filter only for activated cards. Defaults to True if not specified",
            "required": false,
            "deprecated": false,
            "default": true,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "is_terminated",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter only for terminated cards. Defaults to False if not specified"
            },
            "description": "Filter only for terminated cards. Defaults to False if not specified",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_physical_card",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "request_physical_card",
        "description": {
          "tagline": "Create a task to request a new physical card.",
          "detailed": "Use this tool to initiate an asynchronous task to request a new physical card. Ideal for situations where a new card issuance is needed."
        },
        "return_annotation": "Confirmation of task for a new physical card request.",
        "arguments": [
          {
            "name": "physical_card_request",
            "alternative_names": [
              "new_card_request_details",
              "card_creation_parameters"
            ],
            "description": "JSON object containing details like card_program_id, display_name, entity_id, etc., for the physical card request. Must include either card_program_id or spending_restrictions.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/cards/deferred/physical",
      "tags": [
        "Card"
      ],
      "summary": "Create a physical card",
      "description": "Call this endpoint to create an async task to request for new physical card.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "card_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given."
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Cosmetic display name of the card."
                },
                "entity_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location."
                },
                "fulfillment": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Fulfillment details of a Ramp card. For physical cards only."
                },
                "idempotency_key": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "is_temporary": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Set to true to create a temporary card"
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided."
                },
                "user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the card owner."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "card_program_id": {
                  "type": "string",
                  "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.",
                  "format": "uuid"
                },
                "display_name": {
                  "type": "string",
                  "description": "Cosmetic display name of the card."
                },
                "entity_id": {
                  "type": "string",
                  "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location.",
                  "format": "uuid"
                },
                "fulfillment": {
                  "type": "object",
                  "description": "Fulfillment details of a Ramp card. For physical cards only.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "card_personalization": {
                          "type": "object",
                          "properties": {
                            "text": {
                              "type": "object",
                              "properties": {
                                "name_line_1": {
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "name_line_2": {
                                  "type": "object",
                                  "properties": {
                                    "value": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "cardholder_uuid": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "shipping": {
                          "type": "object",
                          "properties": {
                            "method": {
                              "type": "string"
                            },
                            "recipient_address": {
                              "type": "object",
                              "properties": {
                                "address1": {
                                  "type": "string"
                                },
                                "address2": {
                                  "type": "string"
                                },
                                "city": {
                                  "type": "string"
                                },
                                "country": {
                                  "type": "string"
                                },
                                "first_name": {
                                  "type": "string"
                                },
                                "last_name": {
                                  "type": "string"
                                },
                                "phone": {
                                  "type": "string"
                                },
                                "postal_code": {
                                  "type": "string"
                                },
                                "state": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "address1",
                                "city",
                                "country",
                                "first_name",
                                "last_name",
                                "postal_code"
                              ]
                            },
                            "recipient_address_verification_state": {
                              "type": "string",
                              "enum": [
                                "NOT_VERIFIED",
                                "OVERRIDEN",
                                "VERIFIED"
                              ]
                            },
                            "return_address": {
                              "type": "object",
                              "properties": {},
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "address1": {
                                      "type": "string"
                                    },
                                    "address2": {
                                      "type": "string"
                                    },
                                    "city": {
                                      "type": "string"
                                    },
                                    "country": {
                                      "type": "string"
                                    },
                                    "first_name": {
                                      "type": "string"
                                    },
                                    "last_name": {
                                      "type": "string"
                                    },
                                    "phone": {
                                      "type": "string"
                                    },
                                    "postal_code": {
                                      "type": "string"
                                    },
                                    "state": {
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "address1",
                                    "city",
                                    "country",
                                    "first_name",
                                    "last_name",
                                    "postal_code"
                                  ]
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "idempotency_key": {
                  "type": "string",
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "is_temporary": {
                  "type": "boolean",
                  "description": "Set to true to create a temporary card"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "object",
                          "description": "Amount limit total per interval.",
                          "properties": {},
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "decimal"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "card_accounting_rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tracking_category_id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "tracking_category_option_id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "tracking_category_option_remote_name": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tracking_category_id",
                              "tracking_category_option_id",
                              "tracking_category_option_remote_name"
                            ]
                          }
                        },
                        "categories": {
                          "type": "array",
                          "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "categories_blacklist": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "categories_whitelist": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "currency": {
                          "type": "string",
                          "description": "Currency in which the amount is specified."
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.",
                          "format": "date-time"
                        },
                        "policy_id": {
                          "type": "string"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount limit per transaction.",
                          "properties": {},
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "decimal"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "vendor_blacklist": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "vendor_whitelist": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "required": [
                        "amount",
                        "interval"
                      ]
                    }
                  ]
                },
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier of the card owner.",
                  "format": "uuid"
                }
              },
              "required": [
                "idempotency_key",
                "user_id"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"display_name\": \"T&E\",\n          \"fulfillment\": {\n            \"shipping\": {\n              \"recipient_address\": {\n                \"address1\": \"123 Main St\",\n                \"city\": \"New York City\",\n                \"country\": \"US\",\n                \"first_name\": \"Cardholder's first name\",\n                \"last_name\": \"Cardholder's last name\",\n                \"postal_code\": \"10003\",\n                \"state\": \"NY\"\n              }\n            }\n          },\n          \"idempotency_key\": \"3a5b1f62-988f-4190-bf31-b7ae87c5df42\",\n          \"spending_restrictions\": {\n            \"amount\": 5000,\n            \"categories\": [],\n            \"currency\": \"USD\",\n            \"interval\": \"MONTHLY\",\n            \"transaction_amount_limit\": 100\n          },\n          \"user_id\": \"d8135cfe-0396-4b2d-b2cf-ad809fb04731\"\n        },\n        \"properties\": {\n          \"card_program_id\": {\n            \"description\": \"Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"display_name\": {\n            \"description\": \"Cosmetic display name of the card.\",\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Create card associated with business entity. If not provided, defaults to entity associated with user's location.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"fulfillment\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"card_personalization\": {\n                    \"properties\": {\n                      \"text\": {\n                        \"properties\": {\n                          \"name_line_1\": {\n                            \"properties\": {\n                              \"value\": {\n                                \"nullable\": true,\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          },\n                          \"name_line_2\": {\n                            \"properties\": {\n                              \"value\": {\n                                \"nullable\": true,\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"type\": \"object\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    },\n                    \"type\": \"object\"\n                  },\n                  \"cardholder_uuid\": {\n                    \"format\": \"uuid\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  },\n                  \"shipping\": {\n                    \"properties\": {\n                      \"method\": {\n                        \"nullable\": true,\n                        \"type\": \"string\"\n                      },\n                      \"recipient_address\": {\n                        \"properties\": {\n                          \"address1\": {\n                            \"maxLength\": 50,\n                            \"minLength\": 1,\n                            \"type\": \"string\"\n                          },\n                          \"address2\": {\n                            \"maxLength\": 50,\n                            \"minLength\": 0,\n                            \"nullable\": true,\n                            \"type\": \"string\"\n                          },\n                          \"city\": {\n                            \"type\": \"string\"\n                          },\n                          \"country\": {\n                            \"type\": \"string\"\n                          },\n                          \"first_name\": {\n                            \"type\": \"string\"\n                          },\n                          \"last_name\": {\n                            \"type\": \"string\"\n                          },\n                          \"phone\": {\n                            \"nullable\": true,\n                            \"type\": \"string\"\n                          },\n                          \"postal_code\": {\n                            \"type\": \"string\"\n                          },\n                          \"state\": {\n                            \"nullable\": true,\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"address1\",\n                          \"city\",\n                          \"country\",\n                          \"first_name\",\n                          \"last_name\",\n                          \"postal_code\"\n                        ],\n                        \"type\": \"object\"\n                      },\n                      \"recipient_address_verification_state\": {\n                        \"enum\": [\n                          \"NOT_VERIFIED\",\n                          \"OVERRIDEN\",\n                          \"VERIFIED\"\n                        ],\n                        \"nullable\": true,\n                        \"type\": \"string\"\n                      },\n                      \"return_address\": {\n                        \"allOf\": [\n                          {\n                            \"properties\": {\n                              \"address1\": {\n                                \"maxLength\": 50,\n                                \"minLength\": 1,\n                                \"type\": \"string\"\n                              },\n                              \"address2\": {\n                                \"maxLength\": 50,\n                                \"minLength\": 0,\n                                \"nullable\": true,\n                                \"type\": \"string\"\n                              },\n                              \"city\": {\n                                \"type\": \"string\"\n                              },\n                              \"country\": {\n                                \"type\": \"string\"\n                              },\n                              \"first_name\": {\n                                \"type\": \"string\"\n                              },\n                              \"last_name\": {\n                                \"type\": \"string\"\n                              },\n                              \"phone\": {\n                                \"nullable\": true,\n                                \"type\": \"string\"\n                              },\n                              \"postal_code\": {\n                                \"type\": \"string\"\n                              },\n                              \"state\": {\n                                \"nullable\": true,\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"address1\",\n                              \"city\",\n                              \"country\",\n                              \"first_name\",\n                              \"last_name\",\n                              \"postal_code\"\n                            ],\n                            \"type\": \"object\"\n                          }\n                        ],\n                        \"nullable\": true\n                      }\n                    },\n                    \"type\": \"object\"\n                  }\n                },\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Fulfillment details of a Ramp card. For physical cards only.\"\n          },\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          },\n          \"is_temporary\": {\n            \"default\": false,\n            \"description\": \"Set to true to create a temporary card\",\n            \"type\": \"boolean\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"amount\": {\n                    \"description\": \"Amount limit total per interval.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"card_accounting_rules\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"tracking_category_id\": {\n                          \"format\": \"uuid\",\n                          \"type\": \"string\"\n                        },\n                        \"tracking_category_option_id\": {\n                          \"format\": \"uuid\",\n                          \"type\": \"string\"\n                        },\n                        \"tracking_category_option_remote_name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"tracking_category_id\",\n                        \"tracking_category_option_id\",\n                        \"tracking_category_option_remote_name\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories\": {\n                    \"description\": \"List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_blacklist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_whitelist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"currency\": {\n                    \"description\": \"Currency in which the amount is specified.\",\n                    \"type\": \"string\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"policy_id\": {\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"description\": \"Max amount limit per transaction.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"vendor_blacklist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"vendor_whitelist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"amount\",\n                  \"interval\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided.\"\n          },\n          \"user_id\": {\n            \"description\": \"Unique identifier of the card owner.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"user_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_card_deferred_task_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_deferred_task_status",
        "description": {
          "tagline": "Fetch the status of a deferred task using its ID.",
          "detailed": "Use this tool to check the current status of a specific deferred task by providing its task ID. Ideal for monitoring task progress or completion."
        },
        "return_annotation": "Deferred task status information.",
        "arguments": [
          {
            "name": "task_identifier",
            "alternative_names": [
              "deferred_task_id",
              "task_reference_id"
            ],
            "description": "The unique identifier for the deferred task whose status you want to retrieve.",
            "endpoint_argument_name": "task_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/cards/deferred/status/{task_id}",
      "tags": [
        "Card"
      ],
      "summary": "Fetch deferred task status",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "task_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_virtual_card",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_virtual_card_request",
        "description": {
          "tagline": "Initiate a request to create a new virtual card.",
          "detailed": "Call this tool to start an asynchronous task for requesting a new virtual card creation."
        },
        "return_annotation": "Confirmation of virtual card request initiation.",
        "arguments": [
          {
            "name": "virtual_card_request_details",
            "alternative_names": [
              "card_request_body",
              "card_creation_parameters"
            ],
            "description": "Details for creating the virtual card, including card_program_id, display_name, entity_id, idempotency_key, is_temporary, spending_restrictions, and user_id.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/cards/deferred/virtual",
      "tags": [
        "Card"
      ],
      "summary": "Create a virtual card",
      "description": "Call this endpoint to create an async task to request for new virtual card.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "card_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given."
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Cosmetic display name of the card."
                },
                "entity_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location."
                },
                "idempotency_key": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "is_temporary": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Set to true to create a temporary card"
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided."
                },
                "user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the card owner."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "card_program_id": {
                  "type": "string",
                  "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.",
                  "format": "uuid"
                },
                "display_name": {
                  "type": "string",
                  "description": "Cosmetic display name of the card."
                },
                "entity_id": {
                  "type": "string",
                  "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location.",
                  "format": "uuid"
                },
                "idempotency_key": {
                  "type": "string",
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "is_temporary": {
                  "type": "boolean",
                  "description": "Set to true to create a temporary card"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "object",
                          "description": "Amount limit total per interval.",
                          "properties": {},
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "decimal"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "card_accounting_rules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tracking_category_id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "tracking_category_option_id": {
                                "type": "string",
                                "format": "uuid"
                              },
                              "tracking_category_option_remote_name": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "tracking_category_id",
                              "tracking_category_option_id",
                              "tracking_category_option_remote_name"
                            ]
                          }
                        },
                        "categories": {
                          "type": "array",
                          "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "categories_blacklist": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "categories_whitelist": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "currency": {
                          "type": "string",
                          "description": "Currency in which the amount is specified."
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.",
                          "format": "date-time"
                        },
                        "policy_id": {
                          "type": "string"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount limit per transaction.",
                          "properties": {},
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "decimal"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "vendor_blacklist": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "vendor_whitelist": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      },
                      "required": [
                        "amount",
                        "interval"
                      ]
                    }
                  ]
                },
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier of the card owner.",
                  "format": "uuid"
                }
              },
              "required": [
                "idempotency_key",
                "user_id"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"display_name\": \"T&E\",\n          \"entity_id\": \"7051bc66-a8cb-4e68-81c4-caf6459ac168\",\n          \"idempotency_key\": \"3a5b1f62-988f-4190-bf31-b7ae87c5df42\",\n          \"spending_restrictions\": {\n            \"amount\": 5000,\n            \"categories\": [],\n            \"currency\": \"USD\",\n            \"interval\": \"MONTHLY\",\n            \"transaction_amount_limit\": 100\n          },\n          \"user_id\": \"d8135cfe-0396-4b2d-b2cf-ad809fb04731\"\n        },\n        \"properties\": {\n          \"card_program_id\": {\n            \"description\": \"Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"display_name\": {\n            \"description\": \"Cosmetic display name of the card.\",\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Create card associated with business entity. If not provided, defaults to entity associated with user's location.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          },\n          \"is_temporary\": {\n            \"default\": false,\n            \"description\": \"Set to true to create a temporary card\",\n            \"type\": \"boolean\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"amount\": {\n                    \"description\": \"Amount limit total per interval.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"card_accounting_rules\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"tracking_category_id\": {\n                          \"format\": \"uuid\",\n                          \"type\": \"string\"\n                        },\n                        \"tracking_category_option_id\": {\n                          \"format\": \"uuid\",\n                          \"type\": \"string\"\n                        },\n                        \"tracking_category_option_remote_name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"tracking_category_id\",\n                        \"tracking_category_option_id\",\n                        \"tracking_category_option_remote_name\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories\": {\n                    \"description\": \"List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_blacklist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_whitelist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"currency\": {\n                    \"description\": \"Currency in which the amount is specified.\",\n                    \"type\": \"string\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"policy_id\": {\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"description\": \"Max amount limit per transaction.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"vendor_blacklist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"vendor_whitelist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"amount\",\n                  \"interval\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided.\"\n          },\n          \"user_id\": {\n            \"description\": \"Unique identifier of the card owner.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"user_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_card_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_card_info",
        "description": {
          "tagline": "Retrieves details for a specified card.",
          "detailed": "Use this tool to fetch information about a card using its unique ID. It's helpful when specific card details are needed."
        },
        "return_annotation": "Information about a specific card.",
        "arguments": [
          {
            "name": "card_id",
            "alternative_names": [
              "card_identifier",
              "card_number"
            ],
            "description": "The unique identifier for the card you want to fetch information about. It should be a string.",
            "endpoint_argument_name": "card_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/cards/{card_id}",
      "tags": [
        "Card"
      ],
      "summary": "Fetch a card",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "cards:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_card_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_card_info",
        "description": {
          "tagline": "Update card owner, display name, and spend restrictions.",
          "detailed": "Use this tool to update the owner, display name, or spending restrictions of a specified card. It provides confirmation of the changes made."
        },
        "return_annotation": "Confirmation of card update details.",
        "arguments": [
          {
            "name": "card_identifier",
            "alternative_names": [
              "card_id_string",
              "card_ref_id"
            ],
            "description": "Unique identifier for the card to be updated. Use this to specify which card's details need modification.",
            "endpoint_argument_name": "card_id"
          },
          {
            "name": "card_update_payload",
            "alternative_names": [
              "card_update_data",
              "card_update_body"
            ],
            "description": "JSON object containing card program ID, display name, entity ID, notification flag, new user ID, and spending restrictions.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/cards/{card_id}",
      "tags": [
        "Card"
      ],
      "summary": "Update a card",
      "description": "This endpoint allow you update the owner, display name, and spend restrictions of a card.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "card_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specify a card program to link with.\nThis will override the card's spending restrictions with those of the card program.\nPass `card_program_id = None` to detach the card's current card program.\n\nIf the `card_program_id` field is specified, then the card program's changes will override any other changes.\nFor example, if both `spending_restrictions` and `card_program_id` are passed, then the new spending restrictions\nwill match those of the card program (not the passed spending restrictions).\n"
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Cosmetic display name of the card."
                },
                "entity_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specify id to update associated business entity."
                },
                "has_notifications_enabled": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Flag to set to enable or disable notifications."
                },
                "new_user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specify id for new card owner."
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Modify spending restrictions. Only the fields to be modified need to be passed (so fields that will stay the same do not have to be passed)."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "card_program_id": {
                  "type": "string",
                  "description": "Specify a card program to link with.\nThis will override the card's spending restrictions with those of the card program.\nPass `card_program_id = None` to detach the card's current card program.\n\nIf the `card_program_id` field is specified, then the card program's changes will override any other changes.\nFor example, if both `spending_restrictions` and `card_program_id` are passed, then the new spending restrictions\nwill match those of the card program (not the passed spending restrictions).\n",
                  "format": "uuid"
                },
                "display_name": {
                  "type": "string",
                  "description": "Cosmetic display name of the card."
                },
                "entity_id": {
                  "type": "string",
                  "description": "Specify id to update associated business entity.",
                  "format": "uuid"
                },
                "has_notifications_enabled": {
                  "type": "boolean",
                  "description": "Flag to set to enable or disable notifications."
                },
                "new_user_id": {
                  "type": "string",
                  "description": "Specify id for new card owner.",
                  "format": "uuid"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Modify spending restrictions. Only the fields to be modified need to be passed (so fields that will stay the same do not have to be passed).",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "amount": {
                          "type": "object",
                          "description": "Amount limit total per interval.",
                          "properties": {},
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "decimal"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "categories": {
                          "type": "array",
                          "description": "List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "categories_blacklist": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "categories_whitelist": {
                          "type": "array",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "currency": {
                          "type": "string",
                          "description": "Currency in which the amount is specified."
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card.",
                          "format": "date-time"
                        },
                        "policy_id": {
                          "type": "string"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount limit per transaction.",
                          "properties": {},
                          "oneOf": [
                            {
                              "type": "string",
                              "format": "decimal"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        },
                        "vendor_blacklist": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "vendor_whitelist": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"card_program_id\": \"ebe71e80-84d3-4e4b-be4d-70d05fb20934\",\n          \"display_name\": \"WFH Spending Card\",\n          \"entity_id\": \"a7cb9187-4dc8-412a-b5ca-0974d7f07a0b\",\n          \"has_notifications_enabled\": true,\n          \"new_user_id\": \"506a7096-98c0-4ab5-86ef-20c884a78e74\",\n          \"spending_restrictions\": {\n            \"amount\": 500,\n            \"interval\": \"DAILY\"\n          }\n        },\n        \"properties\": {\n          \"card_program_id\": {\n            \"description\": \"Specify a card program to link with.\\nThis will override the card's spending restrictions with those of the card program.\\nPass `card_program_id = None` to detach the card's current card program.\\n\\nIf the `card_program_id` field is specified, then the card program's changes will override any other changes.\\nFor example, if both `spending_restrictions` and `card_program_id` are passed, then the new spending restrictions\\nwill match those of the card program (not the passed spending restrictions).\\n\",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"display_name\": {\n            \"description\": \"Cosmetic display name of the card.\",\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Specify id to update associated business entity.\",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"has_notifications_enabled\": {\n            \"description\": \"Flag to set to enable or disable notifications.\",\n            \"type\": \"boolean\"\n          },\n          \"new_user_id\": {\n            \"description\": \"Specify id for new card owner.\",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"amount\": {\n                    \"description\": \"Amount limit total per interval.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories\": {\n                    \"description\": \"List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_blacklist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_whitelist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"currency\": {\n                    \"description\": \"Currency in which the amount is specified.\",\n                    \"type\": \"string\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card.\",\n                    \"format\": \"date-time\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  },\n                  \"policy_id\": {\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"description\": \"Max amount limit per transaction.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"vendor_blacklist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"vendor_whitelist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"type\": \"object\",\n                \"x-resource-name\": \"card_spending_restrictions_update\"\n              }\n            ],\n            \"description\": \"Modify spending restrictions. Only the fields to be modified need to be passed (so fields that will stay the same do not have to be passed).\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "post_card_suspension_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "suspend_card_task",
        "description": {
          "tagline": "Creates an asynchronous suspension task for a card.",
          "detailed": "Use this tool to initiate an asynchronous task that suspends a card, preventing its use. The suspension can be reversed if needed."
        },
        "return_annotation": "Creates an asynchronous task to suspend a card.",
        "arguments": [
          {
            "name": "card_identifier",
            "alternative_names": [
              "card_reference",
              "card_number"
            ],
            "description": "A unique identifier for the card that needs to be suspended. This identifies the specific card to lock.",
            "endpoint_argument_name": "card_id"
          },
          {
            "name": "idempotency_key",
            "alternative_names": [
              "unique_request_key",
              "uuid_key"
            ],
            "description": "A unique key to recognize retries of the same request; use a random UUID.",
            "endpoint_argument_name": "idempotency_key"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/cards/{card_id}/deferred/suspension",
      "tags": [
        "Card"
      ],
      "summary": "Suspend a card",
      "description": "Call this endpoint to create an async task to suspend a card so that it is locked from use. The suspension is revertable.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_card_termination_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "terminate_card_async",
        "description": {
          "tagline": "Initiate an irreversible async task to terminate a card permanently.",
          "detailed": "This tool should be called when you need to permanently terminate a card and initiate an asynchronous task for this irreversible action."
        },
        "return_annotation": "Initiation confirmation of card termination task.",
        "arguments": [
          {
            "name": "card_identifier",
            "alternative_names": [
              "card_id_number",
              "card_reference_id"
            ],
            "description": "A unique identifier for the card to be permanently terminated. This is a required string value.",
            "endpoint_argument_name": "card_id"
          },
          {
            "name": "unique_idempotency_key",
            "alternative_names": [
              "idempotency_identifier",
              "request_uuid"
            ],
            "description": "A unique identifier for recognizing retries of the same request. Use a randomly generated UUID to avoid collisions.",
            "endpoint_argument_name": "idempotency_key"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/cards/{card_id}/deferred/termination",
      "tags": [
        "Card"
      ],
      "summary": "Terminate a card",
      "description": "Call this endpoint to create an async task to terminate a card permanently. Please note that this action is irreversible.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_card_unsuspension_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "unsuspend_card_task",
        "description": {
          "tagline": "Creates an async task to remove a card's suspension.",
          "detailed": "Use this tool to initiate an async process to unsuspend a card, enabling it for use again. Call this when you need to reactivate a suspended card."
        },
        "return_annotation": "Confirmation of async task creation for card unsuspension.",
        "arguments": [
          {
            "name": "card_identifier",
            "alternative_names": [
              "card_id_value",
              "card_reference"
            ],
            "description": "The unique identifier of the card to unsuspend. Provide the card's ID to reactivate it.",
            "endpoint_argument_name": "card_id"
          },
          {
            "name": "unique_request_id",
            "alternative_names": [
              "request_identifier",
              "uuid_key"
            ],
            "description": "A unique string used to identify and recognize retries of the same request. It should be a randomly generated UUID to avoid collisions.",
            "endpoint_argument_name": "idempotency_key"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/cards/{card_id}/deferred/unsuspension",
      "tags": [
        "Card"
      ],
      "summary": "Unlock a card",
      "description": "Call this endpoint to create an async task to remove a card's suspension so that it may be used again.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_cashback_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_cashback_payments",
        "description": {
          "tagline": "Retrieve a paginated list of cashback payments.",
          "detailed": "This tool retrieves a list of cashback payments along with pagination details. It should be called when you need to view or manage cashback transactions."
        },
        "return_annotation": "A list of cashback payments with pagination details.",
        "arguments": [
          {
            "name": "filter_by_sync_status",
            "alternative_names": [
              "sync_status_filter",
              "cashback_sync_status"
            ],
            "description": "Filter cashbacks by sync status: NOT_SYNC_READY, SYNCED, or SYNC_READY. Supersedes sync_ready if provided.",
            "endpoint_argument_name": "sync_status"
          },
          {
            "name": "filter_by_entity_id",
            "alternative_names": [
              "business_entity_id",
              "cashback_entity_id"
            ],
            "description": "Filter cashbacks by the specific business entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_by_statement_id",
            "alternative_names": [
              "statement_id_filter",
              "statement_identifier"
            ],
            "description": "Specify the statement ID to filter cashback payments included in that statement.",
            "endpoint_argument_name": "statement_id"
          },
          {
            "name": "filter_after_date",
            "alternative_names": [
              "cashback_start_date",
              "beginning_date_filter"
            ],
            "description": "Filter cashbacks that occurred after this date. Must be in ISO8601 format.",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "filter_before_date",
            "alternative_names": [
              "end_date_filter",
              "date_cutoff_filter"
            ],
            "description": "Filter cashback payments that occurred before this date. Use ISO8601 format (e.g., 2023-10-01).",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "last_entity_id_for_pagination",
            "alternative_names": [
              "previous_page_last_id",
              "pagination_start_id"
            ],
            "description": "The ID of the last entity on the previous page, used to fetch the next page of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "items_per_page",
              "entries_per_page"
            ],
            "description": "Specify the number of results per page. Must be between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "filter_by_sync_ready",
            "alternative_names": [
              "ready_to_sync_filter",
              "sync_ready_filter"
            ],
            "description": "Boolean value to filter cashbacks that are ready to be synced (no pending syncs and completed).",
            "endpoint_argument_name": "sync_ready"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/cashbacks",
      "tags": [
        "Cashback"
      ],
      "summary": "List cashback payments",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "cashbacks:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "sync_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by sync status. Supersedes sync_ready if provided."
            },
            "description": "Filter by sync status. Supersedes sync_ready if provided.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ]
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter cashbacks by business entity."
            },
            "description": "Filter cashbacks by business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "statement_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter cashbacks included in the specified statement."
            },
            "description": "Filter cashbacks included in the specified statement.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "sync_ready",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter cashbacks that are ready to be synced (no pending syncs and completed)."
            },
            "description": "Filter cashbacks that are ready to be synced (no pending syncs and completed).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter cashbacks that occurred after this date (ISO8601 format)."
            },
            "description": "Filter cashbacks that occurred after this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter cashbacks that occurred before this date (ISO8601 format)."
            },
            "description": "Filter cashbacks that occurred before this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_cashback_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_cashback_payment",
        "description": {
          "tagline": "Fetch details of a specific cashback payment.",
          "detailed": ""
        },
        "return_annotation": "Details of a specific cashback payment.",
        "arguments": [
          {
            "name": "cashback_payment_id",
            "alternative_names": [
              "identifier_for_cashback",
              "cashback_resource_id"
            ],
            "description": "The unique identifier for the cashback payment to be fetched.",
            "endpoint_argument_name": "cashback_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/cashbacks/{cashback_id}",
      "tags": [
        "Cashback"
      ],
      "summary": "Fetch a cashback payment",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "cashbacks:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "cashback_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_dev_api_configure_custom_tables",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_custom_table",
        "description": {
          "tagline": "Create and configure a custom table via API.",
          "detailed": "Use this tool to create and configure custom tables for data management. Call this when you need to set up a new custom table in your system."
        },
        "return_annotation": "Confirmation of custom table creation.",
        "arguments": [
          {
            "name": "custom_table_label",
            "alternative_names": [
              "table_display_label",
              "custom_table_display_name"
            ],
            "description": "The label for the custom table as it will appear in Ramp. This should be a descriptive name for easier identification.",
            "endpoint_argument_name": "table_label"
          },
          {
            "name": "custom_table_api_name",
            "alternative_names": [
              "api_table_name",
              "custom_table_name"
            ],
            "description": "Specify the API name for the custom table, used to identify it within the system.",
            "endpoint_argument_name": "table_name"
          },
          {
            "name": "table_type",
            "alternative_names": [
              "custom_table_type",
              "type_of_table"
            ],
            "description": "The type of the table to be created. Use 'custom_table' for custom tables.",
            "endpoint_argument_name": "type"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/configure/custom-tables",
      "tags": [
        "Custom Records"
      ],
      "summary": "Create Custom Table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "table_label",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The custom table's label as displayed in Ramp"
            },
            "description": "The custom table's label as displayed in Ramp",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The custom table's label as displayed in Ramp"
            },
            "schema_required": true
          },
          {
            "name": "table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The custom table's API name"
            },
            "description": "The custom table's API name",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The custom table's API name"
            },
            "schema_required": true
          },
          {
            "name": "type",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "custom_table"
              ],
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": "custom_table",
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "enum": [
                "custom_table"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"table_label\": \"Teams\",\n          \"table_name\": \"teams\",\n          \"type\": \"custom_table\"\n        },\n        \"properties\": {\n          \"table_label\": {\n            \"description\": \"The custom table's label as displayed in Ramp\",\n            \"type\": \"string\"\n          },\n          \"table_name\": {\n            \"description\": \"The custom table's API name\",\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"default\": \"custom_table\",\n            \"enum\": [\n              \"custom_table\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"table_label\",\n          \"table_name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_dev_api_configure_custom_table_columns",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_custom_table_column",
        "description": {
          "tagline": "Create a custom column in a specified table.",
          "detailed": "Use this tool to create and configure a custom column in a specific table identified by its name."
        },
        "return_annotation": "Confirmation of custom table column creation.",
        "arguments": [
          {
            "name": "table_name_for_custom_column",
            "alternative_names": [
              "custom_table_identifier",
              "target_table_name"
            ],
            "description": "The name of the table where the custom column will be created. Must be a valid string identifier.",
            "endpoint_argument_name": "custom_table_name"
          },
          {
            "name": "custom_table_column_data",
            "alternative_names": [
              "column_configuration",
              "table_column_details"
            ],
            "description": "JSON payload containing details for the custom column, including configurations and attributes.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/configure/custom-tables/{custom_table_name}/columns",
      "tags": [
        "Custom Records"
      ],
      "summary": "Create Custom Table column",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "custom_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {},
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "column_type_name": {
                      "type": "string",
                      "description": "The type of the primitive column.",
                      "enum": [
                        "boolean",
                        "text"
                      ]
                    },
                    "label": {
                      "type": "string",
                      "description": "The display name of the column"
                    },
                    "name": {
                      "type": "string",
                      "description": "The API name of the column, to be used when writing to this column"
                    }
                  },
                  "required": [
                    "column_type_name",
                    "label",
                    "name"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "column_type_name": {
                      "type": "string",
                      "description": "The type of the reference column.",
                      "enum": [
                        "custom_reference",
                        "native_reference"
                      ]
                    },
                    "label": {
                      "type": "string",
                      "description": "The display name of the column"
                    },
                    "name": {
                      "type": "string",
                      "description": "The API name of the column, to be used when writing to this column"
                    },
                    "reference_args": {
                      "type": "object",
                      "description": "Arguments for creating a reference column.",
                      "properties": {},
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "cardinality": {
                              "type": "string",
                              "description": "The cardinality of the reference.",
                              "enum": [
                                "many_to_many",
                                "many_to_one"
                              ]
                            },
                            "corresponding_column_label": {
                              "type": "string",
                              "description": "The label of the corresponding column. Will be generated if not provided."
                            },
                            "corresponding_column_name": {
                              "type": "string",
                              "description": "The API name of the corresponding column."
                            },
                            "foreign_table": {
                              "type": "object",
                              "description": "The table that this column references.",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "table_name": {
                                      "type": "string",
                                      "description": "The name of the custom table"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_table"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "table_name"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "table_name": {
                                      "type": "string",
                                      "description": "The name of the native Ramp table",
                                      "enum": [
                                        "accounting_field_options",
                                        "bills",
                                        "business_entities",
                                        "cards",
                                        "departments",
                                        "limits",
                                        "locations",
                                        "purchase_orders",
                                        "reimbursements",
                                        "transactions",
                                        "users"
                                      ]
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "native_table"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "table_name"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "cardinality",
                            "corresponding_column_name",
                            "foreign_table"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "column_type_name",
                    "label",
                    "name",
                    "reference_args"
                  ]
                }
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"discriminator\": {\n          \"mapping\": {\n            \"boolean\": \"#/components/schemas/DeveloperApiCreatePrimitiveColumnRequestBody\",\n            \"custom_reference\": \"#/components/schemas/DeveloperApiCreateReferenceColumnRequestBody\",\n            \"native_reference\": \"#/components/schemas/DeveloperApiCreateReferenceColumnRequestBody\",\n            \"text\": \"#/components/schemas/DeveloperApiCreatePrimitiveColumnRequestBody\"\n          },\n          \"propertyName\": \"column_type_name\"\n        },\n        \"oneOf\": [\n          {\n            \"example\": {\n              \"column_type_name\": \"text\",\n              \"label\": \"Project Name\",\n              \"name\": \"project_name\"\n            },\n            \"properties\": {\n              \"column_type_name\": {\n                \"description\": \"The type of the primitive column.\",\n                \"enum\": [\n                  \"boolean\",\n                  \"text\"\n                ],\n                \"type\": \"string\"\n              },\n              \"label\": {\n                \"description\": \"The display name of the column\",\n                \"type\": \"string\"\n              },\n              \"name\": {\n                \"description\": \"The API name of the column, to be used when writing to this column\",\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"column_type_name\",\n              \"label\",\n              \"name\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"example\": {\n              \"column_type_name\": \"custom_reference\",\n              \"label\": \"Cost Center\",\n              \"name\": \"cost_center\",\n              \"reference_args\": {\n                \"cardinality\": \"many_to_one\",\n                \"corresponding_column_label\": \"Members\",\n                \"corresponding_column_name\": \"members\",\n                \"foreign_table\": {\n                  \"table_name\": \"cost_center\",\n                  \"type\": \"custom_table\"\n                }\n              }\n            },\n            \"properties\": {\n              \"column_type_name\": {\n                \"description\": \"The type of the reference column.\",\n                \"enum\": [\n                  \"custom_reference\",\n                  \"native_reference\"\n                ],\n                \"type\": \"string\"\n              },\n              \"label\": {\n                \"description\": \"The display name of the column\",\n                \"type\": \"string\"\n              },\n              \"name\": {\n                \"description\": \"The API name of the column, to be used when writing to this column\",\n                \"type\": \"string\"\n              },\n              \"reference_args\": {\n                \"allOf\": [\n                  {\n                    \"example\": {\n                      \"cardinality\": \"many_to_one\",\n                      \"corresponding_column_label\": \"Members\",\n                      \"corresponding_column_name\": \"members\",\n                      \"foreign_table\": {\n                        \"table_name\": \"cost_center\",\n                        \"type\": \"custom_table\"\n                      }\n                    },\n                    \"properties\": {\n                      \"cardinality\": {\n                        \"description\": \"The cardinality of the reference.\",\n                        \"enum\": [\n                          \"many_to_many\",\n                          \"many_to_one\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"corresponding_column_label\": {\n                        \"default\": null,\n                        \"description\": \"The label of the corresponding column. Will be generated if not provided.\",\n                        \"nullable\": true,\n                        \"type\": \"string\"\n                      },\n                      \"corresponding_column_name\": {\n                        \"description\": \"The API name of the corresponding column.\",\n                        \"type\": \"string\"\n                      },\n                      \"foreign_table\": {\n                        \"description\": \"The table that this column references.\",\n                        \"oneOf\": [\n                          {\n                            \"example\": {\n                              \"table_name\": \"business_regions\",\n                              \"type\": \"custom_table\"\n                            },\n                            \"properties\": {\n                              \"table_name\": {\n                                \"description\": \"The name of the custom table\",\n                                \"type\": \"string\"\n                              },\n                              \"type\": {\n                                \"default\": \"custom_table\",\n                                \"enum\": [\n                                  \"custom_table\"\n                                ],\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"table_name\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"example\": {\n                              \"table_name\": \"users\",\n                              \"type\": \"native_table\"\n                            },\n                            \"properties\": {\n                              \"table_name\": {\n                                \"description\": \"The name of the native Ramp table\",\n                                \"enum\": [\n                                  \"accounting_field_options\",\n                                  \"bills\",\n                                  \"business_entities\",\n                                  \"cards\",\n                                  \"departments\",\n                                  \"limits\",\n                                  \"locations\",\n                                  \"purchase_orders\",\n                                  \"reimbursements\",\n                                  \"transactions\",\n                                  \"users\"\n                                ],\n                                \"type\": \"string\"\n                              },\n                              \"type\": {\n                                \"default\": \"native_table\",\n                                \"enum\": [\n                                  \"native_table\"\n                                ],\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"table_name\"\n                            ],\n                            \"type\": \"object\"\n                          }\n                        ]\n                      }\n                    },\n                    \"required\": [\n                      \"cardinality\",\n                      \"corresponding_column_name\",\n                      \"foreign_table\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ],\n                \"description\": \"Arguments for creating a reference column.\"\n              }\n            },\n            \"required\": [\n              \"column_type_name\",\n              \"label\",\n              \"name\",\n              \"reference_args\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "patch_dev_api_rename_custom_table_column",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "rename_custom_table_column",
        "description": {
          "tagline": "Change the API name of a custom table's column.",
          "detailed": "Use this tool to update the API name of a specific column in a custom table. It should be called when a column name needs to be renamed for API access."
        },
        "return_annotation": "Confirmation of column name change.",
        "arguments": [
          {
            "name": "current_column_name",
            "alternative_names": [
              "existing_column_name",
              "original_column_name"
            ],
            "description": "The current name of the column that you want to rename in a custom table.",
            "endpoint_argument_name": "column_name"
          },
          {
            "name": "custom_table_name",
            "alternative_names": [
              "table_name",
              "schema_table_name"
            ],
            "description": "The name of the custom table containing the column to be renamed. This is required to identify the specific table in which the column resides.",
            "endpoint_argument_name": "custom_table_name"
          },
          {
            "name": "new_column_name",
            "alternative_names": [
              "updated_column_name",
              "renamed_column_name"
            ],
            "description": "The new API name for the specified column in the custom table. Must be a non-empty string.",
            "endpoint_argument_name": "new_name"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/custom-records/configure/custom-tables/{custom_table_name}/columns/{column_name}",
      "tags": [
        "Custom Records"
      ],
      "summary": "Change the API name of a Custom Table's Column",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "column_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "custom_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "new_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "title": "New Name"
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"new_name\": {\n            \"title\": \"New Name\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"new_name\"\n        ],\n        \"title\": \"RenameColumn\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_dev_api_configure_native_tables",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "extend_native_table",
        "description": {
          "tagline": "Extend a native Ramp table.",
          "detailed": "Use this tool to extend native Ramp tables by configuring additional custom records."
        },
        "return_annotation": "Confirmation of native table extension.",
        "arguments": [
          {
            "name": "native_table_name",
            "alternative_names": [
              "native_table_identifier",
              "ramp_table_name"
            ],
            "description": "Select the native Ramp table to extend. Options include 'accounting_field_options', 'bills', 'business_entities', etc.",
            "endpoint_argument_name": "table_name"
          },
          {
            "name": "table_category",
            "alternative_names": [
              "native_table_type",
              "ramp_table_type"
            ],
            "description": "Specifies the category of the table, expected to be 'native_table'.",
            "endpoint_argument_name": "type"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/configure/native-tables",
      "tags": [
        "Custom Records"
      ],
      "summary": "Extend Native Ramp table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "accounting_field_options",
                "bills",
                "business_entities",
                "cards",
                "departments",
                "limits",
                "locations",
                "purchase_orders",
                "reimbursements",
                "transactions",
                "users"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "The name of the native Ramp table"
            },
            "description": "The name of the native Ramp table",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The name of the native Ramp table",
              "enum": [
                "accounting_field_options",
                "bills",
                "business_entities",
                "cards",
                "departments",
                "limits",
                "locations",
                "purchase_orders",
                "reimbursements",
                "transactions",
                "users"
              ]
            },
            "schema_required": true
          },
          {
            "name": "type",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "native_table"
              ],
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": "native_table",
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "enum": [
                "native_table"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"table_name\": \"users\",\n          \"type\": \"native_table\"\n        },\n        \"properties\": {\n          \"table_name\": {\n            \"description\": \"The name of the native Ramp table\",\n            \"enum\": [\n              \"accounting_field_options\",\n              \"bills\",\n              \"business_entities\",\n              \"cards\",\n              \"departments\",\n              \"limits\",\n              \"locations\",\n              \"purchase_orders\",\n              \"reimbursements\",\n              \"transactions\",\n              \"users\"\n            ],\n            \"type\": \"string\"\n          },\n          \"type\": {\n            \"default\": \"native_table\",\n            \"enum\": [\n              \"native_table\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"table_name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_dev_api_configure_native_table_columns",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_native_table_field",
        "description": {
          "tagline": "Create a field in a Native Ramp table.",
          "detailed": "Use this tool to add a new field (column) to a specified Native Ramp table. Ideal for customizing table structures to suit your data needs."
        },
        "return_annotation": "Confirmation of native table column creation.",
        "arguments": [
          {
            "name": "target_native_table_name",
            "alternative_names": [
              "selected_table_name",
              "destination_table"
            ],
            "description": "The name of the Native Ramp table where a new field will be created.",
            "endpoint_argument_name": "native_table_name"
          },
          {
            "name": "table_field_configuration",
            "alternative_names": [
              "field_details",
              "column_setup"
            ],
            "description": "A JSON object with details for configuring a new field in the Native Ramp table, such as field type and constraints.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/configure/native-tables/{native_table_name}/columns",
      "tags": [
        "Custom Records"
      ],
      "summary": "Create Native Ramp table field",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {},
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "column_type_name": {
                      "type": "string",
                      "description": "The type of the primitive column.",
                      "enum": [
                        "boolean",
                        "text"
                      ]
                    },
                    "label": {
                      "type": "string",
                      "description": "The display name of the column"
                    },
                    "name": {
                      "type": "string",
                      "description": "The API name of the column, to be used when writing to this column"
                    }
                  },
                  "required": [
                    "column_type_name",
                    "label",
                    "name"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "column_type_name": {
                      "type": "string",
                      "description": "The type of the reference column.",
                      "enum": [
                        "custom_reference",
                        "native_reference"
                      ]
                    },
                    "label": {
                      "type": "string",
                      "description": "The display name of the column"
                    },
                    "name": {
                      "type": "string",
                      "description": "The API name of the column, to be used when writing to this column"
                    },
                    "reference_args": {
                      "type": "object",
                      "description": "Arguments for creating a reference column.",
                      "properties": {},
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "cardinality": {
                              "type": "string",
                              "description": "The cardinality of the reference.",
                              "enum": [
                                "many_to_many",
                                "many_to_one"
                              ]
                            },
                            "corresponding_column_label": {
                              "type": "string",
                              "description": "The label of the corresponding column. Will be generated if not provided."
                            },
                            "corresponding_column_name": {
                              "type": "string",
                              "description": "The API name of the corresponding column."
                            },
                            "foreign_table": {
                              "type": "object",
                              "description": "The table that this column references.",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "table_name": {
                                      "type": "string",
                                      "description": "The name of the custom table"
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "custom_table"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "table_name"
                                  ]
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "table_name": {
                                      "type": "string",
                                      "description": "The name of the native Ramp table",
                                      "enum": [
                                        "accounting_field_options",
                                        "bills",
                                        "business_entities",
                                        "cards",
                                        "departments",
                                        "limits",
                                        "locations",
                                        "purchase_orders",
                                        "reimbursements",
                                        "transactions",
                                        "users"
                                      ]
                                    },
                                    "type": {
                                      "type": "string",
                                      "enum": [
                                        "native_table"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "table_name"
                                  ]
                                }
                              ]
                            }
                          },
                          "required": [
                            "cardinality",
                            "corresponding_column_name",
                            "foreign_table"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "column_type_name",
                    "label",
                    "name",
                    "reference_args"
                  ]
                }
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"discriminator\": {\n          \"mapping\": {\n            \"boolean\": \"#/components/schemas/DeveloperApiCreatePrimitiveColumnRequestBody\",\n            \"custom_reference\": \"#/components/schemas/DeveloperApiCreateReferenceColumnRequestBody\",\n            \"native_reference\": \"#/components/schemas/DeveloperApiCreateReferenceColumnRequestBody\",\n            \"text\": \"#/components/schemas/DeveloperApiCreatePrimitiveColumnRequestBody\"\n          },\n          \"propertyName\": \"column_type_name\"\n        },\n        \"oneOf\": [\n          {\n            \"example\": {\n              \"column_type_name\": \"text\",\n              \"label\": \"Project Name\",\n              \"name\": \"project_name\"\n            },\n            \"properties\": {\n              \"column_type_name\": {\n                \"description\": \"The type of the primitive column.\",\n                \"enum\": [\n                  \"boolean\",\n                  \"text\"\n                ],\n                \"type\": \"string\"\n              },\n              \"label\": {\n                \"description\": \"The display name of the column\",\n                \"type\": \"string\"\n              },\n              \"name\": {\n                \"description\": \"The API name of the column, to be used when writing to this column\",\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"column_type_name\",\n              \"label\",\n              \"name\"\n            ],\n            \"type\": \"object\"\n          },\n          {\n            \"example\": {\n              \"column_type_name\": \"custom_reference\",\n              \"label\": \"Cost Center\",\n              \"name\": \"cost_center\",\n              \"reference_args\": {\n                \"cardinality\": \"many_to_one\",\n                \"corresponding_column_label\": \"Members\",\n                \"corresponding_column_name\": \"members\",\n                \"foreign_table\": {\n                  \"table_name\": \"cost_center\",\n                  \"type\": \"custom_table\"\n                }\n              }\n            },\n            \"properties\": {\n              \"column_type_name\": {\n                \"description\": \"The type of the reference column.\",\n                \"enum\": [\n                  \"custom_reference\",\n                  \"native_reference\"\n                ],\n                \"type\": \"string\"\n              },\n              \"label\": {\n                \"description\": \"The display name of the column\",\n                \"type\": \"string\"\n              },\n              \"name\": {\n                \"description\": \"The API name of the column, to be used when writing to this column\",\n                \"type\": \"string\"\n              },\n              \"reference_args\": {\n                \"allOf\": [\n                  {\n                    \"example\": {\n                      \"cardinality\": \"many_to_one\",\n                      \"corresponding_column_label\": \"Members\",\n                      \"corresponding_column_name\": \"members\",\n                      \"foreign_table\": {\n                        \"table_name\": \"cost_center\",\n                        \"type\": \"custom_table\"\n                      }\n                    },\n                    \"properties\": {\n                      \"cardinality\": {\n                        \"description\": \"The cardinality of the reference.\",\n                        \"enum\": [\n                          \"many_to_many\",\n                          \"many_to_one\"\n                        ],\n                        \"type\": \"string\"\n                      },\n                      \"corresponding_column_label\": {\n                        \"default\": null,\n                        \"description\": \"The label of the corresponding column. Will be generated if not provided.\",\n                        \"nullable\": true,\n                        \"type\": \"string\"\n                      },\n                      \"corresponding_column_name\": {\n                        \"description\": \"The API name of the corresponding column.\",\n                        \"type\": \"string\"\n                      },\n                      \"foreign_table\": {\n                        \"description\": \"The table that this column references.\",\n                        \"oneOf\": [\n                          {\n                            \"example\": {\n                              \"table_name\": \"business_regions\",\n                              \"type\": \"custom_table\"\n                            },\n                            \"properties\": {\n                              \"table_name\": {\n                                \"description\": \"The name of the custom table\",\n                                \"type\": \"string\"\n                              },\n                              \"type\": {\n                                \"default\": \"custom_table\",\n                                \"enum\": [\n                                  \"custom_table\"\n                                ],\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"table_name\"\n                            ],\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"example\": {\n                              \"table_name\": \"users\",\n                              \"type\": \"native_table\"\n                            },\n                            \"properties\": {\n                              \"table_name\": {\n                                \"description\": \"The name of the native Ramp table\",\n                                \"enum\": [\n                                  \"accounting_field_options\",\n                                  \"bills\",\n                                  \"business_entities\",\n                                  \"cards\",\n                                  \"departments\",\n                                  \"limits\",\n                                  \"locations\",\n                                  \"purchase_orders\",\n                                  \"reimbursements\",\n                                  \"transactions\",\n                                  \"users\"\n                                ],\n                                \"type\": \"string\"\n                              },\n                              \"type\": {\n                                \"default\": \"native_table\",\n                                \"enum\": [\n                                  \"native_table\"\n                                ],\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"table_name\"\n                            ],\n                            \"type\": \"object\"\n                          }\n                        ]\n                      }\n                    },\n                    \"required\": [\n                      \"cardinality\",\n                      \"corresponding_column_name\",\n                      \"foreign_table\"\n                    ],\n                    \"type\": \"object\"\n                  }\n                ],\n                \"description\": \"Arguments for creating a reference column.\"\n              }\n            },\n            \"required\": [\n              \"column_type_name\",\n              \"label\",\n              \"name\",\n              \"reference_args\"\n            ],\n            \"type\": \"object\"\n          }\n        ]\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "patch_dev_api_rename_native_table_column",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "change_native_table_column_name",
        "description": {
          "tagline": "Change the name of a Native Table's Custom Record Column.",
          "detailed": "Use this tool to update the API name of a specific column within a Native Table's Custom Records. This is useful for developers managing data structures."
        },
        "return_annotation": "Status of the column name change operation.",
        "arguments": [
          {
            "name": "current_column_name",
            "alternative_names": [
              "original_column_name",
              "existing_column_name"
            ],
            "description": "The current API name of the column to be renamed in the native table.",
            "endpoint_argument_name": "column_name"
          },
          {
            "name": "native_table_name",
            "alternative_names": [
              "table_name",
              "source_table_name"
            ],
            "description": "The name of the native table containing the column to be renamed.",
            "endpoint_argument_name": "native_table_name"
          },
          {
            "name": "new_column_name",
            "alternative_names": [
              "updated_column_name",
              "renamed_column_name"
            ],
            "description": "The new API name for the specified column in the Native Table. Provide a unique, descriptive name.",
            "endpoint_argument_name": "new_name"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/custom-records/configure/native-tables/{native_table_name}/columns/{column_name}",
      "tags": [
        "Custom Records"
      ],
      "summary": "Change the API name of a Native Table's Custom Record Column",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "column_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "new_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "title": "New Name"
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"new_name\": {\n            \"title\": \"New Name\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"new_name\"\n        ],\n        \"title\": \"RenameColumn\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_dev_api_custom_table",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_tables",
        "description": {
          "tagline": "Fetch a list of custom tables from the developer API.",
          "detailed": "Use this tool to retrieve all the custom tables available in the developer's environment. It should be called when you need to access or display these custom tables."
        },
        "return_annotation": "List of custom tables available to the developer.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/custom-records/custom-tables",
      "tags": [
        "Custom Records"
      ],
      "summary": "List Custom Tables",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_dev_api_custom_table_column",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_table_columns",
        "description": {
          "tagline": "Retrieve columns from a custom table.",
          "detailed": "Use this tool to list all the columns of a specified custom table. Call this tool when you need the structure or schema of the table, including column names and other details."
        },
        "return_annotation": "List of custom table columns and their details.",
        "arguments": [
          {
            "name": "custom_table_name",
            "alternative_names": [
              "table_name",
              "custom_table_identifier"
            ],
            "description": "The name of the custom table whose columns you want to list.",
            "endpoint_argument_name": "custom_table_name"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/custom-records/custom-tables/{custom_table_name}/columns",
      "tags": [
        "Custom Records"
      ],
      "summary": "List Custom Table columns",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "custom_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_dev_api_custom_row",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_table_rows",
        "description": {
          "tagline": "Retrieve rows from a specified custom table.",
          "detailed": "Use this tool to obtain a list of rows from a specific custom table. It's helpful for accessing table data entries stored in the Ramp service."
        },
        "return_annotation": "A list of rows from the specified custom table.",
        "arguments": [
          {
            "name": "custom_table_name",
            "alternative_names": [
              "table_name",
              "custom_table_identifier"
            ],
            "description": "The name of the custom table from which to retrieve rows. This should be a string representing the exact table name as defined in the Ramp service.",
            "endpoint_argument_name": "custom_table_name"
          },
          {
            "name": "external_keys_list",
            "alternative_names": [
              "external_keys_array",
              "external_key_collection"
            ],
            "description": "A list of external keys to specify which custom table rows to retrieve. Each key should be a string.",
            "endpoint_argument_name": "external_key"
          },
          {
            "name": "rows_per_page",
            "alternative_names": [
              "number_of_rows",
              "entries_per_page"
            ],
            "description": "Specifies the number of rows to return per page in the result set.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "start_row_index",
            "alternative_names": [
              "starting_record_index",
              "initial_row_position"
            ],
            "description": "The starting index to begin listing rows from the custom table. This determines where the retrieval starts in the dataset.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "include_all_referenced_rows",
            "alternative_names": [
              "fetch_referenced_data",
              "retrieve_related_data"
            ],
            "description": "Set to true to include all rows referenced by the main table rows, fetching related data.",
            "endpoint_argument_name": "include_all_referenced_rows"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/custom-records/custom-tables/{custom_table_name}/rows",
      "tags": [
        "Custom Records"
      ],
      "summary": "List Custom Table rows",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "external_key",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "array",
              "title": "External Key",
              "description": "External key of the custom row",
              "items": {
                "type": "string"
              }
            },
            "schema_required": false
          },
          {
            "name": "include_all_referenced_rows",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean",
              "title": "Include All Referenced Rows",
              "description": "Include all referenced rows in each cell rather than a subset of them."
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": 50,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer",
              "title": "Page Size",
              "description": "Number of rows to include in the response. Max: 100"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "title": "Start",
              "description": "The value of the `next` field from the previous response, if any"
            },
            "schema_required": false
          }
        ],
        "path": [
          {
            "name": "custom_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "put_dev_api_custom_row",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "set_custom_table_rows",
        "description": {
          "tagline": "Set values for rows of a custom table.",
          "detailed": "Use this tool to update or set values for the rows in a specified custom table. It is useful when you need to insert or modify data entries within a developer's custom table."
        },
        "return_annotation": "Confirmation of row values set in a custom table.",
        "arguments": [
          {
            "name": "custom_table_name",
            "alternative_names": [
              "table_name",
              "custom_table_identifier"
            ],
            "description": "The name of the custom table where values will be set. Provide the exact table name as a string.",
            "endpoint_argument_name": "custom_table_name"
          },
          {
            "name": "custom_table_rows_data",
            "alternative_names": [
              "table_rows_input",
              "rows_data_payload"
            ],
            "description": "JSON array of rows with 'external_key' and 'cells'. Each cell should have 'name' and 'contents' to set values.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PUT",
      "path": "/developer/v1/custom-records/custom-tables/{custom_table_name}/rows",
      "tags": [
        "Custom Records"
      ],
      "summary": "Set values for rows of a Custom Table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "custom_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "cells": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "contents": {
                          "val_type": "json",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        },
                        "name": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        }
                      },
                      "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list."
                    },
                    "external_key": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "The external key of the row."
                    }
                  },
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "PutCustomRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
                  "items": {
                    "type": "object",
                    "title": "CustomRowColumnContentsByColumnName",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "title": "Cells",
                        "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
                        "items": {
                          "type": "object",
                          "title": "ColumnNameAndContents",
                          "properties": {
                            "contents": {
                              "type": "object",
                              "title": "Contents",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "NativeRowIdentifier",
                                  "properties": {
                                    "column_name": {
                                      "type": "string",
                                      "title": "Column Name"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Value"
                                    }
                                  },
                                  "required": [
                                    "column_name",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "name": {
                              "type": "string",
                              "title": "Name"
                            }
                          },
                          "required": [
                            "contents",
                            "name"
                          ]
                        }
                      },
                      "external_key": {
                        "type": "string",
                        "title": "External Key",
                        "description": "The external key of the row."
                      }
                    },
                    "required": [
                      "cells",
                      "external_key"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"United States\",\n                  \"name\": \"country\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"regional_director\"\n                }\n              ],\n              \"external_key\": \"Southwest\"\n            },\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"United States\",\n                  \"name\": \"country\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"regional_directors\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"id\",\n                    \"value\": \"<existing_ramp_user_uuid>\"\n                  },\n                  \"name\": \"regional_directors\"\n                }\n              ],\n              \"external_key\": \"Northeast\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.\",\n            \"items\": {\n              \"properties\": {\n                \"cells\": {\n                  \"description\": \"The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"contents\": {\n                        \"nullable\": true,\n                        \"oneOf\": [\n                          {\n                            \"properties\": {\n                              \"column_name\": {\n                                \"title\": \"Column Name\",\n                                \"type\": \"string\"\n                              },\n                              \"value\": {\n                                \"title\": \"Value\",\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"column_name\",\n                              \"value\"\n                            ],\n                            \"title\": \"NativeRowIdentifier\",\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"type\": \"boolean\"\n                          },\n                          {\n                            \"type\": \"string\"\n                          }\n                        ],\n                        \"title\": \"Contents\"\n                      },\n                      \"name\": {\n                        \"title\": \"Name\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"contents\",\n                      \"name\"\n                    ],\n                    \"title\": \"ColumnNameAndContents\",\n                    \"type\": \"object\"\n                  },\n                  \"title\": \"Cells\",\n                  \"type\": \"array\"\n                },\n                \"external_key\": {\n                  \"description\": \"The external key of the row.\",\n                  \"title\": \"External Key\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"cells\",\n                \"external_key\"\n              ],\n              \"title\": \"CustomRowColumnContentsByColumnName\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"PutCustomRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "delete_dev_api_custom_row",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_custom_table_row",
        "description": {
          "tagline": "Delete a row from a specified custom table.",
          "detailed": "This tool deletes a specified row from a custom table. Useful for removing entries that are no longer needed."
        },
        "return_annotation": "Confirmation of row deletion from a custom table.",
        "arguments": [
          {
            "name": "custom_table_name",
            "alternative_names": [
              "table_name",
              "custom_name"
            ],
            "description": "The name of the custom table from which a row will be deleted. Expect a string.",
            "endpoint_argument_name": "custom_table_name"
          },
          {
            "name": "rows_to_delete",
            "alternative_names": [
              "rows_removal_list",
              "delete_rows_list"
            ],
            "description": "A JSON array containing the external keys of the rows to delete from the custom table.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/custom-records/custom-tables/{custom_table_name}/rows",
      "tags": [
        "Custom Records"
      ],
      "summary": "Delete rows from a Custom Table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "custom_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "external_key": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": null
                    }
                  },
                  "description": "List of the external keys of rows to delete."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "DeleteCustomRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of the external keys of rows to delete.",
                  "items": {
                    "type": "object",
                    "title": "CustomRowExternalKey",
                    "properties": {
                      "external_key": {
                        "type": "string",
                        "title": "External Key"
                      }
                    },
                    "required": [
                      "external_key"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"external_key\": \"Northeast\"\n            },\n            {\n              \"external_key\": \"Southwest\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of the external keys of rows to delete.\",\n            \"items\": {\n              \"properties\": {\n                \"external_key\": {\n                  \"title\": \"External Key\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"external_key\"\n              ],\n              \"title\": \"CustomRowExternalKey\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"DeleteCustomRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "post_dev_api_append_custom_row_cells",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "append_cells_to_custom_table",
        "description": {
          "tagline": "Append cells to a Custom Table.",
          "detailed": "Use this tool to add new cells to a pre-existing custom table. Ideal for inserting new data entries row-wise to manage dynamic records effectively."
        },
        "return_annotation": "Confirmation of cell append operation.",
        "arguments": [
          {
            "name": "custom_table_name",
            "alternative_names": [
              "target_table_name",
              "destination_table_name"
            ],
            "description": "The name of the custom table to which cells will be appended. This must match an existing table name in your dataset.",
            "endpoint_argument_name": "table_name"
          },
          {
            "name": "custom_table_row_data",
            "alternative_names": [
              "custom_table_cells_data",
              "row_cells_data"
            ],
            "description": "JSON object detailing rows to append, including cell contents and external key.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/custom-tables/{table_name}/rows/-/append",
      "tags": [
        "Custom Records"
      ],
      "summary": "Append cells to a Custom Table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "cells": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "contents": {
                          "val_type": "json",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        },
                        "name": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        }
                      },
                      "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list."
                    },
                    "external_key": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "The external key of the row."
                    }
                  },
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "PutCustomRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
                  "items": {
                    "type": "object",
                    "title": "CustomRowColumnContentsByColumnName",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "title": "Cells",
                        "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
                        "items": {
                          "type": "object",
                          "title": "ColumnNameAndContents",
                          "properties": {
                            "contents": {
                              "type": "object",
                              "title": "Contents",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "NativeRowIdentifier",
                                  "properties": {
                                    "column_name": {
                                      "type": "string",
                                      "title": "Column Name"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Value"
                                    }
                                  },
                                  "required": [
                                    "column_name",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "name": {
                              "type": "string",
                              "title": "Name"
                            }
                          },
                          "required": [
                            "contents",
                            "name"
                          ]
                        }
                      },
                      "external_key": {
                        "type": "string",
                        "title": "External Key",
                        "description": "The external key of the row."
                      }
                    },
                    "required": [
                      "cells",
                      "external_key"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"United States\",\n                  \"name\": \"country\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"regional_director\"\n                }\n              ],\n              \"external_key\": \"Southwest\"\n            },\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"United States\",\n                  \"name\": \"country\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"regional_directors\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"id\",\n                    \"value\": \"<existing_ramp_user_uuid>\"\n                  },\n                  \"name\": \"regional_directors\"\n                }\n              ],\n              \"external_key\": \"Northeast\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.\",\n            \"items\": {\n              \"properties\": {\n                \"cells\": {\n                  \"description\": \"The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"contents\": {\n                        \"nullable\": true,\n                        \"oneOf\": [\n                          {\n                            \"properties\": {\n                              \"column_name\": {\n                                \"title\": \"Column Name\",\n                                \"type\": \"string\"\n                              },\n                              \"value\": {\n                                \"title\": \"Value\",\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"column_name\",\n                              \"value\"\n                            ],\n                            \"title\": \"NativeRowIdentifier\",\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"type\": \"boolean\"\n                          },\n                          {\n                            \"type\": \"string\"\n                          }\n                        ],\n                        \"title\": \"Contents\"\n                      },\n                      \"name\": {\n                        \"title\": \"Name\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"contents\",\n                      \"name\"\n                    ],\n                    \"title\": \"ColumnNameAndContents\",\n                    \"type\": \"object\"\n                  },\n                  \"title\": \"Cells\",\n                  \"type\": \"array\"\n                },\n                \"external_key\": {\n                  \"description\": \"The external key of the row.\",\n                  \"title\": \"External Key\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"cells\",\n                \"external_key\"\n              ],\n              \"title\": \"CustomRowColumnContentsByColumnName\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"PutCustomRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "post_dev_api_remove_custom_row_cells",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "remove_custom_table_cells",
        "description": {
          "tagline": "Removes specified cells from a custom table.",
          "detailed": "This tool is used to remove cells from a specified custom table. Call this when you need to delete specific entries from a custom table."
        },
        "return_annotation": "Confirmation of cell removal from the table.",
        "arguments": [
          {
            "name": "custom_table_name",
            "alternative_names": [
              "table_identifier",
              "name_of_table"
            ],
            "description": "The name of the custom table from which you want to remove cells.",
            "endpoint_argument_name": "table_name"
          },
          {
            "name": "custom_table_cells_data",
            "alternative_names": [
              "table_cells_data",
              "cells_removal_data"
            ],
            "description": "JSON array detailing cells to be removed. Includes 'external_key' and 'cells' with 'name' and 'contents'.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/custom-tables/{table_name}/rows/-/remove",
      "tags": [
        "Custom Records"
      ],
      "summary": "Remove cells from a Custom Table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "cells": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "contents": {
                          "val_type": "json",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        },
                        "name": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        }
                      },
                      "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list."
                    },
                    "external_key": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "The external key of the row."
                    }
                  },
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "PutCustomRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
                  "items": {
                    "type": "object",
                    "title": "CustomRowColumnContentsByColumnName",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "title": "Cells",
                        "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
                        "items": {
                          "type": "object",
                          "title": "ColumnNameAndContents",
                          "properties": {
                            "contents": {
                              "type": "object",
                              "title": "Contents",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "NativeRowIdentifier",
                                  "properties": {
                                    "column_name": {
                                      "type": "string",
                                      "title": "Column Name"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Value"
                                    }
                                  },
                                  "required": [
                                    "column_name",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "name": {
                              "type": "string",
                              "title": "Name"
                            }
                          },
                          "required": [
                            "contents",
                            "name"
                          ]
                        }
                      },
                      "external_key": {
                        "type": "string",
                        "title": "External Key",
                        "description": "The external key of the row."
                      }
                    },
                    "required": [
                      "cells",
                      "external_key"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"United States\",\n                  \"name\": \"country\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"regional_director\"\n                }\n              ],\n              \"external_key\": \"Southwest\"\n            },\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"United States\",\n                  \"name\": \"country\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"regional_directors\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"id\",\n                    \"value\": \"<existing_ramp_user_uuid>\"\n                  },\n                  \"name\": \"regional_directors\"\n                }\n              ],\n              \"external_key\": \"Northeast\"\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.\",\n            \"items\": {\n              \"properties\": {\n                \"cells\": {\n                  \"description\": \"The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"contents\": {\n                        \"nullable\": true,\n                        \"oneOf\": [\n                          {\n                            \"properties\": {\n                              \"column_name\": {\n                                \"title\": \"Column Name\",\n                                \"type\": \"string\"\n                              },\n                              \"value\": {\n                                \"title\": \"Value\",\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"column_name\",\n                              \"value\"\n                            ],\n                            \"title\": \"NativeRowIdentifier\",\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"type\": \"boolean\"\n                          },\n                          {\n                            \"type\": \"string\"\n                          }\n                        ],\n                        \"title\": \"Contents\"\n                      },\n                      \"name\": {\n                        \"title\": \"Name\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"contents\",\n                      \"name\"\n                    ],\n                    \"title\": \"ColumnNameAndContents\",\n                    \"type\": \"object\"\n                  },\n                  \"title\": \"Cells\",\n                  \"type\": \"array\"\n                },\n                \"external_key\": {\n                  \"description\": \"The external key of the row.\",\n                  \"title\": \"External Key\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"cells\",\n                \"external_key\"\n              ],\n              \"title\": \"CustomRowColumnContentsByColumnName\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"PutCustomRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_dev_api_native_table",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_native_tables",
        "description": {
          "tagline": "Retrieve a list of native Ramp tables.",
          "detailed": "Use this tool to get a list of available native tables from Ramp's developer API. This can be helpful for developers looking to understand what tables are accessible via Ramp's native features."
        },
        "return_annotation": "A list of native Ramp tables available.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/custom-records/native-tables",
      "tags": [
        "Custom Records"
      ],
      "summary": "List Native Ramp tables",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_dev_api_native_table_column",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_columns_for_native_table",
        "description": {
          "tagline": "Retrieve custom columns for a specified native table.",
          "detailed": "This tool is used to list custom columns for a specified native Ramp table. It should be called when details about the custom columns of a specific native table are required for further processing or analysis."
        },
        "return_annotation": "Details of custom columns for a specific native table.",
        "arguments": [
          {
            "name": "native_table_name",
            "alternative_names": [
              "table_name",
              "ramp_table_name"
            ],
            "description": "The name of the native Ramp table for which to list custom columns. This must be a valid table name used in the Ramp system.",
            "endpoint_argument_name": "native_table_name"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/custom-records/native-tables/{native_table_name}/columns",
      "tags": [
        "Custom Records"
      ],
      "summary": "List Custom Columns for a Native Ramp table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_dev_api_native_row",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_custom_column_values",
        "description": {
          "tagline": "List custom column values for a Native Ramp table's rows.",
          "detailed": "Use this tool to retrieve the custom column values for specific rows in a Native Ramp table. Ideal for accessing detailed row data from custom records."
        },
        "return_annotation": "Custom column values for rows in a Native Ramp table.",
        "arguments": [
          {
            "name": "native_table_name",
            "alternative_names": [
              "native_table_identifier",
              "native_table_id"
            ],
            "description": "The name of the native table to retrieve custom column values from. Specify the exact name as used in the Ramp database.",
            "endpoint_argument_name": "native_table_name"
          },
          {
            "name": "max_results_per_page",
            "alternative_names": [
              "results_page_limit",
              "rows_per_page"
            ],
            "description": "Define the maximum number of row results to be returned per page. This helps in paginating the row data efficiently.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "ramp_id_list",
            "alternative_names": [
              "table_identifiers",
              "native_table_ids"
            ],
            "description": "Array of Ramp table identifiers. Provide these to specify which tables to retrieve data from. Each ID should be a string.",
            "endpoint_argument_name": "ramp_id"
          },
          {
            "name": "starting_row_id",
            "alternative_names": [
              "start_index",
              "begin_row_id"
            ],
            "description": "Specifies the ID of the first row to retrieve from the Native Ramp table.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "include_all_referenced_rows",
            "alternative_names": [
              "fetch_all_linked_rows",
              "retrieve_related_rows"
            ],
            "description": "Include all referenced rows in the response. Set to true to include, false to exclude.",
            "endpoint_argument_name": "include_all_referenced_rows"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/custom-records/native-tables/{native_table_name}/rows",
      "tags": [
        "Custom Records"
      ],
      "summary": "List Custom Column values for rows of a Native Ramp table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "include_all_referenced_rows",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean",
              "title": "Include All Referenced Rows",
              "description": "Include all referenced rows in each cell rather than a subset of them."
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": 50,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer",
              "title": "Page Size",
              "description": "Number of rows to include in the response. Max: 100"
            },
            "schema_required": false
          },
          {
            "name": "ramp_id",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "array",
              "title": "Ramp Id",
              "description": "id of the Ramp object",
              "items": {
                "type": "string"
              }
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "title": "Start",
              "description": "The value of the `next` field from the previous response, if any"
            },
            "schema_required": false
          }
        ],
        "path": [
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "put_dev_api_native_row",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_ramp_table_rows",
        "description": {
          "tagline": "Update or set values in a Native Ramp table row.",
          "detailed": "Use this tool to update or set values for specific rows within a Native Ramp table. This is useful for modifying data entries in your custom records."
        },
        "return_annotation": "Confirmation of row values being set in the table.",
        "arguments": [
          {
            "name": "table_name",
            "alternative_names": [
              "native_table",
              "custom_table_name"
            ],
            "description": "The name of the Native Ramp table to be updated. This is a string value representing the table's identifier.",
            "endpoint_argument_name": "native_table_name"
          },
          {
            "name": "ramp_table_row_data",
            "alternative_names": [
              "table_row_entries",
              "native_table_row_contents"
            ],
            "description": "JSON object containing the data for rows to insert or update. Each row includes cells with column names and values to set. A null value indicates no changes.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PUT",
      "path": "/developer/v1/custom-records/native-tables/{native_table_name}/rows",
      "tags": [
        "Custom Records"
      ],
      "summary": "Set values for rows of a Native Ramp table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "cells": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "contents": {
                          "val_type": "json",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        },
                        "name": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        }
                      },
                      "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list."
                    },
                    "row": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "An identifier for the Ramp object"
                    }
                  },
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "PutNativeRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
                  "items": {
                    "type": "object",
                    "title": "NativeRowColumnContentsByColumnName",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "title": "Cells",
                        "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
                        "items": {
                          "type": "object",
                          "title": "ColumnNameAndContents",
                          "properties": {
                            "contents": {
                              "type": "object",
                              "title": "Contents",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "NativeRowIdentifier",
                                  "properties": {
                                    "column_name": {
                                      "type": "string",
                                      "title": "Column Name"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Value"
                                    }
                                  },
                                  "required": [
                                    "column_name",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "name": {
                              "type": "string",
                              "title": "Name"
                            }
                          },
                          "required": [
                            "contents",
                            "name"
                          ]
                        }
                      },
                      "row": {
                        "type": "object",
                        "description": "An identifier for the Ramp object",
                        "properties": {},
                        "allOf": [
                          {
                            "type": "object",
                            "title": "NativeRowIdentifier",
                            "properties": {
                              "column_name": {
                                "type": "string",
                                "title": "Column Name"
                              },
                              "value": {
                                "type": "string",
                                "title": "Value"
                              }
                            },
                            "required": [
                              "column_name",
                              "value"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "cells",
                      "row"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"California\",\n                  \"name\": \"home_state\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<another_existing_ramp_user_email>\"\n                  },\n                  \"name\": \"budget_managers\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"budget_managers\"\n                }\n              ],\n              \"row\": {\n                \"column_name\": \"email\",\n                \"value\": \"<existing_ramp_user_email>\"\n              }\n            },\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"New York\",\n                  \"name\": \"home_state\"\n                },\n                {\n                  \"contents\": null,\n                  \"name\": \"budget_managers\"\n                }\n              ],\n              \"row\": {\n                \"column_name\": \"id\",\n                \"value\": \"<existing_ramp_user_uuid>\"\n              }\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.\",\n            \"items\": {\n              \"properties\": {\n                \"cells\": {\n                  \"description\": \"The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"contents\": {\n                        \"nullable\": true,\n                        \"oneOf\": [\n                          {\n                            \"properties\": {\n                              \"column_name\": {\n                                \"title\": \"Column Name\",\n                                \"type\": \"string\"\n                              },\n                              \"value\": {\n                                \"title\": \"Value\",\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"column_name\",\n                              \"value\"\n                            ],\n                            \"title\": \"NativeRowIdentifier\",\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"type\": \"boolean\"\n                          },\n                          {\n                            \"type\": \"string\"\n                          }\n                        ],\n                        \"title\": \"Contents\"\n                      },\n                      \"name\": {\n                        \"title\": \"Name\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"contents\",\n                      \"name\"\n                    ],\n                    \"title\": \"ColumnNameAndContents\",\n                    \"type\": \"object\"\n                  },\n                  \"title\": \"Cells\",\n                  \"type\": \"array\"\n                },\n                \"row\": {\n                  \"allOf\": [\n                    {\n                      \"properties\": {\n                        \"column_name\": {\n                          \"title\": \"Column Name\",\n                          \"type\": \"string\"\n                        },\n                        \"value\": {\n                          \"title\": \"Value\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"column_name\",\n                        \"value\"\n                      ],\n                      \"title\": \"NativeRowIdentifier\",\n                      \"type\": \"object\"\n                    }\n                  ],\n                  \"description\": \"An identifier for the Ramp object\"\n                }\n              },\n              \"required\": [\n                \"cells\",\n                \"row\"\n              ],\n              \"title\": \"NativeRowColumnContentsByColumnName\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"PutNativeRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "post_dev_api_append_native_row_cells",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "append_cells_to_native_table",
        "description": {
          "tagline": "Append cells to a Native Ramp table.",
          "detailed": "Use this tool to add new cells to an existing Native Ramp table. Ideal for expanding data sets or updating tables with additional information."
        },
        "return_annotation": "Confirmation of cells appended to the table.",
        "arguments": [
          {
            "name": "native_table_name",
            "alternative_names": [
              "table_name",
              "ramp_table_name"
            ],
            "description": "The name of the Native Ramp table where cells will be appended. It must be a string identifying the specific table.",
            "endpoint_argument_name": "native_table_name"
          },
          {
            "name": "cells_data",
            "alternative_names": [
              "cells_structure",
              "rows_data"
            ],
            "description": "JSON structure containing rows. Each row includes 'cells' with column names and contents.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/native-tables/{native_table_name}/rows/-/append",
      "tags": [
        "Custom Records"
      ],
      "summary": "Append cells to a Native Ramp table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "cells": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "contents": {
                          "val_type": "json",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        },
                        "name": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        }
                      },
                      "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list."
                    },
                    "row": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "An identifier for the Ramp object"
                    }
                  },
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "PutNativeRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
                  "items": {
                    "type": "object",
                    "title": "NativeRowColumnContentsByColumnName",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "title": "Cells",
                        "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
                        "items": {
                          "type": "object",
                          "title": "ColumnNameAndContents",
                          "properties": {
                            "contents": {
                              "type": "object",
                              "title": "Contents",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "NativeRowIdentifier",
                                  "properties": {
                                    "column_name": {
                                      "type": "string",
                                      "title": "Column Name"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Value"
                                    }
                                  },
                                  "required": [
                                    "column_name",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "name": {
                              "type": "string",
                              "title": "Name"
                            }
                          },
                          "required": [
                            "contents",
                            "name"
                          ]
                        }
                      },
                      "row": {
                        "type": "object",
                        "description": "An identifier for the Ramp object",
                        "properties": {},
                        "allOf": [
                          {
                            "type": "object",
                            "title": "NativeRowIdentifier",
                            "properties": {
                              "column_name": {
                                "type": "string",
                                "title": "Column Name"
                              },
                              "value": {
                                "type": "string",
                                "title": "Value"
                              }
                            },
                            "required": [
                              "column_name",
                              "value"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "cells",
                      "row"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"California\",\n                  \"name\": \"home_state\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<another_existing_ramp_user_email>\"\n                  },\n                  \"name\": \"budget_managers\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"budget_managers\"\n                }\n              ],\n              \"row\": {\n                \"column_name\": \"email\",\n                \"value\": \"<existing_ramp_user_email>\"\n              }\n            },\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"New York\",\n                  \"name\": \"home_state\"\n                },\n                {\n                  \"contents\": null,\n                  \"name\": \"budget_managers\"\n                }\n              ],\n              \"row\": {\n                \"column_name\": \"id\",\n                \"value\": \"<existing_ramp_user_uuid>\"\n              }\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.\",\n            \"items\": {\n              \"properties\": {\n                \"cells\": {\n                  \"description\": \"The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"contents\": {\n                        \"nullable\": true,\n                        \"oneOf\": [\n                          {\n                            \"properties\": {\n                              \"column_name\": {\n                                \"title\": \"Column Name\",\n                                \"type\": \"string\"\n                              },\n                              \"value\": {\n                                \"title\": \"Value\",\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"column_name\",\n                              \"value\"\n                            ],\n                            \"title\": \"NativeRowIdentifier\",\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"type\": \"boolean\"\n                          },\n                          {\n                            \"type\": \"string\"\n                          }\n                        ],\n                        \"title\": \"Contents\"\n                      },\n                      \"name\": {\n                        \"title\": \"Name\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"contents\",\n                      \"name\"\n                    ],\n                    \"title\": \"ColumnNameAndContents\",\n                    \"type\": \"object\"\n                  },\n                  \"title\": \"Cells\",\n                  \"type\": \"array\"\n                },\n                \"row\": {\n                  \"allOf\": [\n                    {\n                      \"properties\": {\n                        \"column_name\": {\n                          \"title\": \"Column Name\",\n                          \"type\": \"string\"\n                        },\n                        \"value\": {\n                          \"title\": \"Value\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"column_name\",\n                        \"value\"\n                      ],\n                      \"title\": \"NativeRowIdentifier\",\n                      \"type\": \"object\"\n                    }\n                  ],\n                  \"description\": \"An identifier for the Ramp object\"\n                }\n              },\n              \"required\": [\n                \"cells\",\n                \"row\"\n              ],\n              \"title\": \"NativeRowColumnContentsByColumnName\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"PutNativeRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "post_dev_api_remove_native_row_cells",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "remove_cells_from_table",
        "description": {
          "tagline": "Remove cells from a specified Native Ramp table.",
          "detailed": "Use this tool to remove specific cells from a Native Ramp table. It should be called when there is a need to delete data within the rows of the specified table."
        },
        "return_annotation": "Confirmation of cell removal from the table.",
        "arguments": [
          {
            "name": "table_name",
            "alternative_names": [
              "native_table_name",
              "target_table_name"
            ],
            "description": "The name of the Native Ramp table from which cells will be removed. This should be a string matching the table's identifier.",
            "endpoint_argument_name": "native_table_name"
          },
          {
            "name": "cells_to_remove_request",
            "alternative_names": [
              "cells_removal_request",
              "removal_request_body"
            ],
            "description": "JSON object containing data about the cells to remove, structured with rows and cell details.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/custom-records/native-tables/{native_table_name}/rows/-/remove",
      "tags": [
        "Custom Records"
      ],
      "summary": "Remove cells from a Native Ramp table",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "custom_records:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "native_table_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "data": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "cells": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "contents": {
                          "val_type": "json",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        },
                        "name": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": null
                        }
                      },
                      "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list."
                    },
                    "row": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "An identifier for the Ramp object"
                    }
                  },
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "title": "PutNativeRow",
              "properties": {
                "data": {
                  "type": "array",
                  "title": "Data",
                  "description": "List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.",
                  "items": {
                    "type": "object",
                    "title": "NativeRowColumnContentsByColumnName",
                    "properties": {
                      "cells": {
                        "type": "array",
                        "title": "Cells",
                        "description": "The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.",
                        "items": {
                          "type": "object",
                          "title": "ColumnNameAndContents",
                          "properties": {
                            "contents": {
                              "type": "object",
                              "title": "Contents",
                              "properties": {},
                              "oneOf": [
                                {
                                  "type": "object",
                                  "title": "NativeRowIdentifier",
                                  "properties": {
                                    "column_name": {
                                      "type": "string",
                                      "title": "Column Name"
                                    },
                                    "value": {
                                      "type": "string",
                                      "title": "Value"
                                    }
                                  },
                                  "required": [
                                    "column_name",
                                    "value"
                                  ]
                                },
                                {
                                  "type": "boolean"
                                },
                                {
                                  "type": "string"
                                }
                              ]
                            },
                            "name": {
                              "type": "string",
                              "title": "Name"
                            }
                          },
                          "required": [
                            "contents",
                            "name"
                          ]
                        }
                      },
                      "row": {
                        "type": "object",
                        "description": "An identifier for the Ramp object",
                        "properties": {},
                        "allOf": [
                          {
                            "type": "object",
                            "title": "NativeRowIdentifier",
                            "properties": {
                              "column_name": {
                                "type": "string",
                                "title": "Column Name"
                              },
                              "value": {
                                "type": "string",
                                "title": "Value"
                              }
                            },
                            "required": [
                              "column_name",
                              "value"
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "cells",
                      "row"
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"data\": [\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"California\",\n                  \"name\": \"home_state\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<another_existing_ramp_user_email>\"\n                  },\n                  \"name\": \"budget_managers\"\n                },\n                {\n                  \"contents\": {\n                    \"column_name\": \"email\",\n                    \"value\": \"<existing_ramp_user_email>\"\n                  },\n                  \"name\": \"budget_managers\"\n                }\n              ],\n              \"row\": {\n                \"column_name\": \"email\",\n                \"value\": \"<existing_ramp_user_email>\"\n              }\n            },\n            {\n              \"cells\": [\n                {\n                  \"contents\": \"New York\",\n                  \"name\": \"home_state\"\n                },\n                {\n                  \"contents\": null,\n                  \"name\": \"budget_managers\"\n                }\n              ],\n              \"row\": {\n                \"column_name\": \"id\",\n                \"value\": \"<existing_ramp_user_uuid>\"\n              }\n            }\n          ]\n        },\n        \"properties\": {\n          \"data\": {\n            \"description\": \"List of rows to insert or update. All entries must have the same set of column names, with `null` provided to indicate that a value should not be set.\",\n            \"items\": {\n              \"properties\": {\n                \"cells\": {\n                  \"description\": \"The contents of the cells in the row. The column name should be the name of the column, and the contents should be the value to insert into the cell. When setting a cell to reference many rows, each reference must be a separate entry in the list.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"contents\": {\n                        \"nullable\": true,\n                        \"oneOf\": [\n                          {\n                            \"properties\": {\n                              \"column_name\": {\n                                \"title\": \"Column Name\",\n                                \"type\": \"string\"\n                              },\n                              \"value\": {\n                                \"title\": \"Value\",\n                                \"type\": \"string\"\n                              }\n                            },\n                            \"required\": [\n                              \"column_name\",\n                              \"value\"\n                            ],\n                            \"title\": \"NativeRowIdentifier\",\n                            \"type\": \"object\"\n                          },\n                          {\n                            \"type\": \"boolean\"\n                          },\n                          {\n                            \"type\": \"string\"\n                          }\n                        ],\n                        \"title\": \"Contents\"\n                      },\n                      \"name\": {\n                        \"title\": \"Name\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"contents\",\n                      \"name\"\n                    ],\n                    \"title\": \"ColumnNameAndContents\",\n                    \"type\": \"object\"\n                  },\n                  \"title\": \"Cells\",\n                  \"type\": \"array\"\n                },\n                \"row\": {\n                  \"allOf\": [\n                    {\n                      \"properties\": {\n                        \"column_name\": {\n                          \"title\": \"Column Name\",\n                          \"type\": \"string\"\n                        },\n                        \"value\": {\n                          \"title\": \"Value\",\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"column_name\",\n                        \"value\"\n                      ],\n                      \"title\": \"NativeRowIdentifier\",\n                      \"type\": \"object\"\n                    }\n                  ],\n                  \"description\": \"An identifier for the Ramp object\"\n                }\n              },\n              \"required\": [\n                \"cells\",\n                \"row\"\n              ],\n              \"title\": \"NativeRowColumnContentsByColumnName\",\n              \"type\": \"object\"\n            },\n            \"title\": \"Data\",\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"data\"\n        ],\n        \"title\": \"PutNativeRow\",\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_department_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_departments",
        "description": {
          "tagline": "Retrieve a paginated list of departments.",
          "detailed": "Use this tool to obtain a list of departments, which is useful for applications needing to browse or manage department data with pagination."
        },
        "return_annotation": "List of departments with pagination details.",
        "arguments": [
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "start_id",
              "previous_page_last_id"
            ],
            "description": "The ID of the last entity from the previous page to fetch the next set of departments.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "items_per_page",
              "departments_per_page"
            ],
            "description": "The number of departments to retrieve per page. Must be between 2 and 100; default is 20 if not specified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/departments",
      "tags": [
        "Department"
      ],
      "summary": "List departments",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "departments:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_department_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_department",
        "description": {
          "tagline": "Create a new department with pagination support.",
          "detailed": "Use this tool to create a new department entry in the system. It supports pagination, allowing management of department listings efficiently."
        },
        "return_annotation": "Information about the created department.",
        "arguments": [
          {
            "name": "department_name",
            "alternative_names": [
              "department_title",
              "department_label"
            ],
            "description": "The name of the department to be created. Must be a string.",
            "endpoint_argument_name": "name"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/departments",
      "tags": [
        "Department"
      ],
      "summary": "Create a department",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "departments:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Name of the department."
            },
            "description": "Name of the department.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Name of the department."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"additionalProperties\": false,\n        \"example\": {\n          \"name\": \"Engineering\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"description\": \"Name of the department.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_department_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_department_details",
        "description": {
          "tagline": "Fetch details of a specific department by ID.",
          "detailed": "Use this tool to get detailed information about a department by providing its ID."
        },
        "return_annotation": "Department details based on the provided ID.",
        "arguments": [
          {
            "name": "department_identifier",
            "alternative_names": [
              "dept_id",
              "department_code"
            ],
            "description": "Unique identifier for the department to fetch details for.",
            "endpoint_argument_name": "department_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/departments/{department_id}",
      "tags": [
        "Department"
      ],
      "summary": "Fetch a department",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "departments:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_department_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_department",
        "description": {
          "tagline": "Update department information by ID.",
          "detailed": "Use this tool to update the details of a specified department identified by its ID. Useful for administrative changes or corrections."
        },
        "return_annotation": "Confirmation of department update.",
        "arguments": [
          {
            "name": "department_identifier",
            "alternative_names": [
              "department_code",
              "dept_id"
            ],
            "description": "The unique identifier for the department to be updated. This is required to specify which department's information will be changed.",
            "endpoint_argument_name": "department_id"
          },
          {
            "name": "department_name",
            "alternative_names": [
              "dept_name",
              "department_title"
            ],
            "description": "Name of the department to update. Expect a string value that specifies the new name.",
            "endpoint_argument_name": "name"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/departments/{department_id}",
      "tags": [
        "Department"
      ],
      "summary": "Update a department",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "departments:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Name of the department."
            },
            "description": "Name of the department.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Name of the department."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"name\": \"HR\"\n        },\n        \"properties\": {\n          \"name\": {\n            \"description\": \"Name of the department.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_entity_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_business_entities",
        "description": {
          "tagline": "Retrieve a list of business entities with pagination.",
          "detailed": "Use this tool to get a list of business entities, including pagination details, from the specified service."
        },
        "return_annotation": "A list of business entities with pagination details.",
        "arguments": [
          {
            "name": "filter_by_currency",
            "alternative_names": [
              "currency_filter",
              "entity_currency"
            ],
            "description": "Specify the currency to filter entities by. Accepts ISO 4217 currency codes such as 'USD', 'EUR', etc.",
            "endpoint_argument_name": "currency"
          },
          {
            "name": "filter_by_entity_name",
            "alternative_names": [
              "entity_name_filter",
              "name_based_filter"
            ],
            "description": "Filter the list of business entities by their name.",
            "endpoint_argument_name": "entity_name"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "start_id",
              "last_entity_id"
            ],
            "description": "The ID of the last entity on the previous page to fetch the next page.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "entities_per_page",
              "page_limit"
            ],
            "description": "The number of results to return per page, ranging from 2 to 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "include_primary_entities",
            "alternative_names": [
              "primary_entity_filter",
              "filter_primary_entities"
            ],
            "description": "Set to true to include only primary entities; false to include non-primary entities.",
            "endpoint_argument_name": "is_primary"
          },
          {
            "name": "include_deleted_accounts",
            "alternative_names": [
              "include_removed_accounts",
              "show_deleted_accounts"
            ],
            "description": "Include deleted accounts for entities. Defaults to False.",
            "endpoint_argument_name": "include_deleted_accounts"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/entities",
      "tags": [
        "Business Entities"
      ],
      "summary": "List business entities",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "entities:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "currency",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "AED",
                "AFN",
                "ALL",
                "AMD",
                "ANG",
                "AOA",
                "ARS",
                "AUD",
                "AWG",
                "AZN",
                "BAM",
                "BBD",
                "BDT",
                "BGN",
                "BHD",
                "BIF",
                "BMD",
                "BND",
                "BOB",
                "BOV",
                "BRL",
                "BSD",
                "BTN",
                "BWP",
                "BYN",
                "BZD",
                "CAD",
                "CDF",
                "CHE",
                "CHF",
                "CHW",
                "CLF",
                "CLP",
                "CNY",
                "COP",
                "COU",
                "CRC",
                "CUC",
                "CUP",
                "CVE",
                "CZK",
                "DJF",
                "DKK",
                "DOP",
                "DZD",
                "EGP",
                "ERN",
                "ETB",
                "EUR",
                "EURC",
                "FJD",
                "FKP",
                "GBP",
                "GEL",
                "GHS",
                "GIP",
                "GMD",
                "GNF",
                "GTQ",
                "GYD",
                "HKD",
                "HNL",
                "HRK",
                "HTG",
                "HUF",
                "IDR",
                "ILS",
                "INR",
                "IQD",
                "IRR",
                "ISK",
                "JMD",
                "JOD",
                "JPY",
                "KES",
                "KGS",
                "KHR",
                "KMF",
                "KPW",
                "KRW",
                "KWD",
                "KYD",
                "KZT",
                "LAK",
                "LBP",
                "LKR",
                "LRD",
                "LSL",
                "LYD",
                "MAD",
                "MDL",
                "MGA",
                "MKD",
                "MMK",
                "MNT",
                "MOP",
                "MRU",
                "MUR",
                "MVR",
                "MWK",
                "MXN",
                "MXV",
                "MYR",
                "MZN",
                "NAD",
                "NGN",
                "NIO",
                "NOK",
                "NPR",
                "NZD",
                "OMR",
                "PAB",
                "PEN",
                "PGK",
                "PHP",
                "PKR",
                "PLN",
                "PYG",
                "QAR",
                "RON",
                "RSD",
                "RUB",
                "RWF",
                "SAR",
                "SBD",
                "SCR",
                "SDG",
                "SEK",
                "SGD",
                "SHP",
                "SLE",
                "SLL",
                "SOS",
                "SRD",
                "SSP",
                "STN",
                "SVC",
                "SYP",
                "SZL",
                "THB",
                "TJS",
                "TMT",
                "TND",
                "TOP",
                "TRY",
                "TTD",
                "TWD",
                "TZS",
                "UAH",
                "UGX",
                "USD",
                "USDC",
                "USN",
                "UYI",
                "UYU",
                "UYW",
                "UZS",
                "VED",
                "VES",
                "VND",
                "VUV",
                "WST",
                "XAD",
                "XAF",
                "XAG",
                "XAU",
                "XBA",
                "XBB",
                "XBC",
                "XBD",
                "XCD",
                "XCG",
                "XDR",
                "XOF",
                "XPD",
                "XPF",
                "XPT",
                "XSU",
                "XTS",
                "XUA",
                "XXX",
                "YER",
                "ZAR",
                "ZMW",
                "ZWG",
                "ZWL"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by currency of the entity."
            },
            "description": "Filter by currency of the entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "AED",
                "AFN",
                "ALL",
                "AMD",
                "ANG",
                "AOA",
                "ARS",
                "AUD",
                "AWG",
                "AZN",
                "BAM",
                "BBD",
                "BDT",
                "BGN",
                "BHD",
                "BIF",
                "BMD",
                "BND",
                "BOB",
                "BOV",
                "BRL",
                "BSD",
                "BTN",
                "BWP",
                "BYN",
                "BZD",
                "CAD",
                "CDF",
                "CHE",
                "CHF",
                "CHW",
                "CLF",
                "CLP",
                "CNY",
                "COP",
                "COU",
                "CRC",
                "CUC",
                "CUP",
                "CVE",
                "CZK",
                "DJF",
                "DKK",
                "DOP",
                "DZD",
                "EGP",
                "ERN",
                "ETB",
                "EUR",
                "EURC",
                "FJD",
                "FKP",
                "GBP",
                "GEL",
                "GHS",
                "GIP",
                "GMD",
                "GNF",
                "GTQ",
                "GYD",
                "HKD",
                "HNL",
                "HRK",
                "HTG",
                "HUF",
                "IDR",
                "ILS",
                "INR",
                "IQD",
                "IRR",
                "ISK",
                "JMD",
                "JOD",
                "JPY",
                "KES",
                "KGS",
                "KHR",
                "KMF",
                "KPW",
                "KRW",
                "KWD",
                "KYD",
                "KZT",
                "LAK",
                "LBP",
                "LKR",
                "LRD",
                "LSL",
                "LYD",
                "MAD",
                "MDL",
                "MGA",
                "MKD",
                "MMK",
                "MNT",
                "MOP",
                "MRU",
                "MUR",
                "MVR",
                "MWK",
                "MXN",
                "MXV",
                "MYR",
                "MZN",
                "NAD",
                "NGN",
                "NIO",
                "NOK",
                "NPR",
                "NZD",
                "OMR",
                "PAB",
                "PEN",
                "PGK",
                "PHP",
                "PKR",
                "PLN",
                "PYG",
                "QAR",
                "RON",
                "RSD",
                "RUB",
                "RWF",
                "SAR",
                "SBD",
                "SCR",
                "SDG",
                "SEK",
                "SGD",
                "SHP",
                "SLE",
                "SLL",
                "SOS",
                "SRD",
                "SSP",
                "STN",
                "SVC",
                "SYP",
                "SZL",
                "THB",
                "TJS",
                "TMT",
                "TND",
                "TOP",
                "TRY",
                "TTD",
                "TWD",
                "TZS",
                "UAH",
                "UGX",
                "USD",
                "USDC",
                "USN",
                "UYI",
                "UYU",
                "UYW",
                "UZS",
                "VED",
                "VES",
                "VND",
                "VUV",
                "WST",
                "XAD",
                "XAF",
                "XAG",
                "XAU",
                "XBA",
                "XBB",
                "XBC",
                "XBD",
                "XCD",
                "XCG",
                "XDR",
                "XOF",
                "XPD",
                "XPF",
                "XPT",
                "XSU",
                "XTS",
                "XUA",
                "XXX",
                "YER",
                "ZAR",
                "ZMW",
                "ZWG",
                "ZWL"
              ]
            },
            "schema_required": false
          },
          {
            "name": "entity_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter entities by name."
            },
            "description": "Filter entities by name.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "is_primary",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter to include only primary or non-primary entities."
            },
            "description": "Filter to include only primary or non-primary entities.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "include_deleted_accounts",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Include deleted accounts for entities. Defaults to False."
            },
            "description": "Include deleted accounts for entities. Defaults to False.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_entity_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_business_entity",
        "description": {
          "tagline": "Retrieve business entity information using an entity ID.",
          "detailed": "Use this tool to get details about a business entity by providing its unique entity ID."
        },
        "return_annotation": "Business entity information.",
        "arguments": [
          {
            "name": "entity_id",
            "alternative_names": [
              "business_entity_id",
              "id_of_entity"
            ],
            "description": "The unique identifier for the business entity to retrieve information.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "include_deleted_accounts",
            "alternative_names": [
              "with_deleted_accounts",
              "show_deleted_accounts"
            ],
            "description": "Specify if deleted accounts should be included for entity retrieval. Defaults to False.",
            "endpoint_argument_name": "include_deleted_accounts"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/entities/{entity_id}",
      "tags": [
        "Business Entities"
      ],
      "summary": "Get a business entity",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "entities:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "include_deleted_accounts",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Include deleted accounts for entities. Defaults to False."
            },
            "description": "Include deleted accounts for entities. Defaults to False.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_item_receipts_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_item_receipts",
        "description": {
          "tagline": "Retrieve a list of item receipts from the Ramp service.",
          "detailed": "This tool is used to fetch and display a list of item receipts from the Ramp platform. It should be called when an overview of item receipts is needed."
        },
        "return_annotation": "A list of item receipts.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/item-receipts",
      "tags": [
        "Item Receipts"
      ],
      "summary": "List item receipts",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "item_receipts:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_item_receipts_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_item_receipt",
        "description": {
          "tagline": "Create a new item receipt for inventory tracking.",
          "detailed": "This tool is used to create a new item receipt, typically for inventory tracking purposes. Call this tool when you need to log a received item in your system."
        },
        "return_annotation": "Confirmation of item receipt creation.",
        "arguments": [
          {
            "name": "item_receipt_details",
            "alternative_names": [
              "receipt_details",
              "receipt_information"
            ],
            "description": "A JSON object containing details of the item receipt, including 'item_receipt_line_items', 'item_receipt_number', 'memo', 'purchase_order_id', and 'received_at'.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/item-receipts",
      "tags": [
        "Item Receipts"
      ],
      "summary": "Create an item receipt",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "item_receipts:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "item_receipt_line_items": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "purchase_order_line_item_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Unique identifier of the purchase order line item being received."
                    },
                    "unit_quantity": {
                      "val_type": "integer",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "The number of units of an item recieved; required for purchase order line items with inventory item accounting field selections."
                    }
                  },
                  "description": "Item receipt line items."
                },
                "item_receipt_number": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Item receipt number."
                },
                "memo": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Memo for the item receipt."
                },
                "purchase_order_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the purchase order this item receipt is attached to."
                },
                "received_at": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The date the vendor will deliver the goods or services."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "item_receipt_line_items": {
                  "type": "array",
                  "description": "Item receipt line items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "purchase_order_line_item_id": {
                        "type": "string",
                        "description": "Unique identifier of the purchase order line item being received.",
                        "format": "uuid"
                      },
                      "unit_quantity": {
                        "type": "integer",
                        "description": "The number of units of an item recieved; required for purchase order line items with inventory item accounting field selections."
                      }
                    },
                    "required": [
                      "purchase_order_line_item_id"
                    ]
                  }
                },
                "item_receipt_number": {
                  "type": "string",
                  "description": "Item receipt number."
                },
                "memo": {
                  "type": "string",
                  "description": "Memo for the item receipt."
                },
                "purchase_order_id": {
                  "type": "string",
                  "description": "Unique identifier of the purchase order this item receipt is attached to.",
                  "format": "uuid"
                },
                "received_at": {
                  "type": "string",
                  "description": "The date the vendor will deliver the goods or services.",
                  "format": "date"
                }
              },
              "required": [
                "item_receipt_line_items",
                "item_receipt_number",
                "purchase_order_id",
                "received_at"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"item_receipt_line_items\": [\n            {\n              \"purchase_order_line_item_id\": \"39786dab-ce04-4033-84f1-913016a90b9d\"\n            },\n            {\n              \"purchase_order_line_item_id\": \"7736417a-6a9f-4989-96ad-720b320d0afa\",\n              \"unit_quantity\": 2\n            }\n          ],\n          \"item_receipt_number\": \"IR-1234\",\n          \"memo\": \"my item receipt\",\n          \"purchase_order_id\": \"0a6c6475-94c6-4556-b45e-10f5360f3c60\",\n          \"receieved_at\": \"2025-03-20\"\n        },\n        \"properties\": {\n          \"item_receipt_line_items\": {\n            \"description\": \"Item receipt line items.\",\n            \"items\": {\n              \"properties\": {\n                \"purchase_order_line_item_id\": {\n                  \"description\": \"Unique identifier of the purchase order line item being received.\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                },\n                \"unit_quantity\": {\n                  \"default\": null,\n                  \"description\": \"The number of units of an item recieved; required for purchase order line items with inventory item accounting field selections.\",\n                  \"nullable\": true,\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"purchase_order_line_item_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"item_receipt_number\": {\n            \"description\": \"Item receipt number.\",\n            \"type\": \"string\"\n          },\n          \"memo\": {\n            \"default\": null,\n            \"description\": \"Memo for the item receipt.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"purchase_order_id\": {\n            \"description\": \"Unique identifier of the purchase order this item receipt is attached to.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"received_at\": {\n            \"description\": \"The date the vendor will deliver the goods or services.\",\n            \"format\": \"date\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"item_receipt_line_items\",\n          \"item_receipt_number\",\n          \"purchase_order_id\",\n          \"received_at\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_item_receipt_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_item_receipt",
        "description": {
          "tagline": "Fetches the details of a specific item receipt.",
          "detailed": "Use this tool to retrieve the details of a specific item receipt by providing its ID."
        },
        "return_annotation": "Returns details of a specific item receipt.",
        "arguments": [
          {
            "name": "item_receipt_identifier",
            "alternative_names": [
              "item_receipt_id_code",
              "receipt_identity"
            ],
            "description": "The unique ID of the item receipt to be fetched. Provide this ID to retrieve specific receipt details.",
            "endpoint_argument_name": "item_receipt_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/item-receipts/{item_receipt_id}",
      "tags": [
        "Item Receipts"
      ],
      "summary": "Fetch an item receipt",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "item_receipts:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "item_receipt_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "delete_item_receipt_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_item_receipt",
        "description": {
          "tagline": "Delete a specific item receipt by ID.",
          "detailed": "Use this tool to delete an item receipt using its unique identifier. It should be called when an item receipt needs to be permanently removed from the system."
        },
        "return_annotation": "Confirmation of item receipt deletion.",
        "arguments": [
          {
            "name": "item_receipt_identifier",
            "alternative_names": [
              "item_receipt_id",
              "receipt_id"
            ],
            "description": "A unique string identifier for the item receipt to be deleted.",
            "endpoint_argument_name": "item_receipt_id"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/item-receipts/{item_receipt_id}",
      "tags": [
        "Item Receipts"
      ],
      "summary": "Delete an item receipt",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "item_receipts:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "item_receipt_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_sales_lead_creation",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_sales_lead",
        "description": {
          "tagline": "Create a new sales lead.",
          "detailed": "This tool creates a new sales lead in the system. It should be called when there's a need to register or track potential customer interest."
        },
        "return_annotation": "Confirmation of sales lead creation.",
        "arguments": [
          {
            "name": "sales_lead_data",
            "alternative_names": [
              "lead_information",
              "customer_details"
            ],
            "description": "JSON object containing the sales lead information, including business info, contact details, source, and more. Required fields: business_info, email, first_name, last_name, phone, source. Optional fields: external_id, redirect_uri, state.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/leads",
      "tags": [
        "SalesLead"
      ],
      "summary": "Create a sales lead",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "leads:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "business_info": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "email": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "external_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "first_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "last_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "phone": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "redirect_uri": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "source": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "AngelList",
                    "Quanta"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": ""
                },
                "state": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "business_info": {
                  "type": "object",
                  "description": "",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "business_description": {
                          "type": "string",
                          "description": "A short description of the business."
                        },
                        "business_name_dba": {
                          "type": "string",
                          "description": "Doing business as (DBA)"
                        },
                        "business_name_legal": {
                          "type": "string",
                          "description": "Legal name of the business."
                        },
                        "business_name_website": {
                          "type": "string",
                          "description": "Business's website."
                        },
                        "date_of_incorporation": {
                          "type": "string",
                          "description": "Business's incorporation date.",
                          "format": "date"
                        },
                        "ein_number": {
                          "type": "string",
                          "description": "Employer Identification Number (EIN)."
                        },
                        "entity_type": {
                          "type": "string",
                          "description": "Type of incorporation.",
                          "enum": [
                            "COOPERATIVE",
                            "CORPORATION",
                            "LLC",
                            "NON_PROFIT_CORPORATION",
                            "OTHER",
                            "PARTNERSHIP",
                            "SOLE_PROPRIETORSHIP"
                          ]
                        },
                        "estimated_monthly_spend": {
                          "type": "string",
                          "description": "Estimated monthly spend."
                        },
                        "industry": {
                          "type": "string",
                          "description": "Business's industry"
                        },
                        "industry_group": {
                          "type": "string",
                          "description": "Business's industry group"
                        },
                        "office_address": {
                          "type": "object",
                          "description": "Office's address.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "office_apt_suite": {
                                  "type": "string"
                                },
                                "office_city": {
                                  "type": "string"
                                },
                                "office_country": {
                                  "type": "string"
                                },
                                "office_postal_code": {
                                  "type": "string"
                                },
                                "office_state": {
                                  "type": "string"
                                },
                                "office_street_address": {
                                  "type": "string"
                                }
                              }
                            }
                          ]
                        },
                        "office_phone_number": {
                          "type": "string",
                          "description": "Office phone number. Must include country code."
                        },
                        "sector": {
                          "type": "string",
                          "description": "Business's sector"
                        },
                        "state_of_incorporation": {
                          "type": "string",
                          "description": "The state in which the business is incorporated."
                        },
                        "sub_industry": {
                          "type": "string",
                          "description": "Business's subindustry"
                        }
                      },
                      "required": [
                        "business_name_dba",
                        "business_name_legal"
                      ]
                    }
                  ]
                },
                "email": {
                  "type": "string",
                  "description": ""
                },
                "external_id": {
                  "type": "string",
                  "description": ""
                },
                "first_name": {
                  "type": "string",
                  "description": ""
                },
                "last_name": {
                  "type": "string",
                  "description": ""
                },
                "phone": {
                  "type": "string",
                  "description": ""
                },
                "redirect_uri": {
                  "type": "string",
                  "description": ""
                },
                "source": {
                  "type": "string",
                  "description": "",
                  "enum": [
                    "AngelList",
                    "Quanta"
                  ]
                },
                "state": {
                  "type": "string"
                }
              },
              "required": [
                "email",
                "external_id",
                "first_name",
                "last_name",
                "redirect_uri",
                "source",
                "state"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"business_info\": {\n            \"business_description\": \"We are in the empire business\",\n            \"business_name_dba\": \"White & Pinkman Inc.\",\n            \"business_name_legal\": \"White & Pinkman Inc.\",\n            \"business_name_website\": \"www.whiteandpinkman.com\",\n            \"date_of_incorporation\": \"2004-01-01\",\n            \"ein_number\": \"12-3456789\",\n            \"entity_type\": \"CORPORATION\",\n            \"estimated_monthly_spend\": \"10,000\",\n            \"industry\": \"Food Products\",\n            \"industry_group\": \"Food, Beverage & Tobacco\",\n            \"office_address\": {\n              \"office_city\": \"Albuquerque\",\n              \"office_country\": \"US\",\n              \"office_postal_code\": \"100022\",\n              \"office_state\": \"New Mexico\",\n              \"office_street_address\": \"100 Main Street\"\n            },\n            \"sector\": \"Consumer Staples\",\n            \"state_of_incorporation\": \"New Mexico\"\n          },\n          \"email\": \"lead@whiteandpinkman.com\",\n          \"external_id\": \"f26bfdb5-beei-4875-a9b5-a29f8af6f381\",\n          \"first_name\": \"Walter\",\n          \"last_name\": \"White\",\n          \"redirect_uri\": \"https://app.whiteandpinkman.com/ramp/callback\",\n          \"source\": \"White & Pinkman\",\n          \"state\": \"f26bfdb5-7ecf-4875-a9b5-a29f8af6f381\"\n        },\n        \"properties\": {\n          \"business_info\": {\n            \"allOf\": [\n              {\n                \"example\": {\n                  \"business_description\": \"We are in the empire business\",\n                  \"business_name_dba\": \"White & Pinkman Inc.\",\n                  \"business_name_legal\": \"White & Pinkman Inc.\",\n                  \"business_name_website\": \"www.whiteandpinkman.com\",\n                  \"date_of_incorporation\": \"2004-01-01\",\n                  \"ein_number\": \"12-3456789\",\n                  \"entity_type\": \"CORPORATION\",\n                  \"estimated_monthly_spend\": \"10,000\",\n                  \"industry\": \"Food Products\",\n                  \"industry_group\": \"Food, Beverage & Tobacco\",\n                  \"office_address\": {\n                    \"office_city\": \"Albuquerque\",\n                    \"office_country\": \"US\",\n                    \"office_postal_code\": \"100022\",\n                    \"office_state\": \"New Mexico\",\n                    \"office_street_address\": \"100 Main Street\"\n                  },\n                  \"sector\": \"Consumer Staples\",\n                  \"state_of_incorporation\": \"New Mexico\"\n                },\n                \"properties\": {\n                  \"business_description\": {\n                    \"description\": \"A short description of the business.\",\n                    \"type\": \"string\"\n                  },\n                  \"business_name_dba\": {\n                    \"description\": \"Doing business as (DBA)\",\n                    \"maxLength\": 255,\n                    \"type\": \"string\"\n                  },\n                  \"business_name_legal\": {\n                    \"description\": \"Legal name of the business.\",\n                    \"maxLength\": 255,\n                    \"type\": \"string\"\n                  },\n                  \"business_name_website\": {\n                    \"description\": \"Business's website.\",\n                    \"type\": \"string\"\n                  },\n                  \"date_of_incorporation\": {\n                    \"description\": \"Business's incorporation date.\",\n                    \"format\": \"date\",\n                    \"type\": \"string\"\n                  },\n                  \"ein_number\": {\n                    \"description\": \"Employer Identification Number (EIN).\",\n                    \"type\": \"string\"\n                  },\n                  \"entity_type\": {\n                    \"description\": \"Type of incorporation.\",\n                    \"enum\": [\n                      \"COOPERATIVE\",\n                      \"CORPORATION\",\n                      \"LLC\",\n                      \"NON_PROFIT_CORPORATION\",\n                      \"OTHER\",\n                      \"PARTNERSHIP\",\n                      \"SOLE_PROPRIETORSHIP\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"estimated_monthly_spend\": {\n                    \"description\": \"Estimated monthly spend.\",\n                    \"type\": \"string\"\n                  },\n                  \"industry\": {\n                    \"description\": \"Business's industry\",\n                    \"type\": \"string\"\n                  },\n                  \"industry_group\": {\n                    \"description\": \"Business's industry group\",\n                    \"type\": \"string\"\n                  },\n                  \"office_address\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"office_apt_suite\": {\n                            \"type\": \"string\"\n                          },\n                          \"office_city\": {\n                            \"type\": \"string\"\n                          },\n                          \"office_country\": {\n                            \"type\": \"string\"\n                          },\n                          \"office_postal_code\": {\n                            \"type\": \"string\"\n                          },\n                          \"office_state\": {\n                            \"type\": \"string\"\n                          },\n                          \"office_street_address\": {\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Office's address.\"\n                  },\n                  \"office_phone_number\": {\n                    \"description\": \"Office phone number. Must include country code.\",\n                    \"type\": \"string\"\n                  },\n                  \"sector\": {\n                    \"description\": \"Business's sector\",\n                    \"type\": \"string\"\n                  },\n                  \"state_of_incorporation\": {\n                    \"description\": \"The state in which the business is incorporated.\",\n                    \"type\": \"string\"\n                  },\n                  \"sub_industry\": {\n                    \"description\": \"Business's subindustry\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"business_name_dba\",\n                  \"business_name_legal\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"\"\n          },\n          \"email\": {\n            \"description\": \"\",\n            \"type\": \"string\"\n          },\n          \"external_id\": {\n            \"description\": \"\",\n            \"type\": \"string\"\n          },\n          \"first_name\": {\n            \"description\": \"\",\n            \"maxLength\": 40,\n            \"type\": \"string\"\n          },\n          \"last_name\": {\n            \"description\": \"\",\n            \"maxLength\": 40,\n            \"type\": \"string\"\n          },\n          \"phone\": {\n            \"description\": \"\",\n            \"type\": \"string\"\n          },\n          \"redirect_uri\": {\n            \"description\": \"\",\n            \"type\": \"string\"\n          },\n          \"source\": {\n            \"description\": \"\",\n            \"enum\": [\n              \"AngelList\",\n              \"Quanta\"\n            ],\n            \"type\": \"string\"\n          },\n          \"state\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"email\",\n          \"external_id\",\n          \"first_name\",\n          \"last_name\",\n          \"redirect_uri\",\n          \"source\",\n          \"state\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_sales_lead_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_sales_lead",
        "description": {
          "tagline": "Fetch detailed information about a sales lead using its ID.",
          "detailed": ""
        },
        "return_annotation": "Sales lead details based on the provided ID.",
        "arguments": [
          {
            "name": "sales_lead_id",
            "alternative_names": [
              "lead_id",
              "sales_id"
            ],
            "description": "The unique identifier for the sales lead to fetch details for. Must be a string.",
            "endpoint_argument_name": "sales_lead_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/leads/{sales_lead_id}",
      "tags": [
        "SalesLead"
      ],
      "summary": "Fetch a sales lead",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "leads:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "sales_lead_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_spend_limit_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_spend_limits",
        "description": {
          "tagline": "Retrieve a list of spend limits with pagination.",
          "detailed": "Use this tool to obtain a paginated list of spend limits, which is useful for managing and reviewing financial limits."
        },
        "return_annotation": "A paginated list of spend limits.",
        "arguments": [
          {
            "name": "filter_by_display_name",
            "alternative_names": [
              "display_name_filter",
              "limit_display_name"
            ],
            "description": "Filter limits by display name. Provide a string to refine the list of spend limits.",
            "endpoint_argument_name": "display_name"
          },
          {
            "name": "filter_by_entity_id",
            "alternative_names": [
              "entity_id_filter",
              "business_entity_filter"
            ],
            "description": "Filter spend limits by the associated business entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_spend_program_id",
            "alternative_names": [
              "spend_program_identifier",
              "program_id_filter"
            ],
            "description": "Filter for spend limits related to the specified spend program. Use the program ID to retrieve relevant limits.",
            "endpoint_argument_name": "spend_program_id"
          },
          {
            "name": "filter_by_user_id",
            "alternative_names": [
              "user_id_filter",
              "owner_user_id"
            ],
            "description": "Filter spend limits that are owned by the specified user ID.",
            "endpoint_argument_name": "user_id"
          },
          {
            "name": "filter_created_after_date",
            "alternative_names": [
              "created_after_date",
              "filter_by_creation_date"
            ],
            "description": "Filter spend limits created after a certain date. Use ISO8601 format, e.g. 2024-01-15T00:00:00Z.",
            "endpoint_argument_name": "created_after"
          },
          {
            "name": "filter_created_before_date",
            "alternative_names": [
              "created_before_date",
              "before_date_filter"
            ],
            "description": "Filter for spend limits created before the specified date in ISO8601 format, e.g., 2024-01-15T00:00:00Z.",
            "endpoint_argument_name": "created_before"
          },
          {
            "name": "filter_by_user_access_roles",
            "alternative_names": [
              "user_access_roles_filter",
              "roles_based_filter"
            ],
            "description": "List of roles to filter on: 'OWNER', 'COOWNER', 'MEMBER'. Accepts repeated parameters or comma-separated values.",
            "endpoint_argument_name": "user_access_roles"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "page_start_id",
              "last_entity_id"
            ],
            "description": "The ID of the last entity from the previous page to retrieve the next set of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_result_count",
              "items_per_page"
            ],
            "description": "Specify the number of results per page, between 2 and 100. Defaults to 20 if not set.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "filter_terminated_spend_limits",
            "alternative_names": [
              "terminated_limits_only",
              "show_terminated_limits"
            ],
            "description": "Set to true to filter and show only terminated spend limits.",
            "endpoint_argument_name": "is_terminated"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/limits",
      "tags": [
        "Limit"
      ],
      "summary": "List limits",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "display_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by display name."
            },
            "description": "Filter by display name.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for limits by associated business entity."
            },
            "description": "Filter for limits by associated business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "spend_program_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for limits that are associated with the specified spend program"
            },
            "description": "Filter for limits that are associated with the specified spend program",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for limits that are owned by the user."
            },
            "description": "Filter for limits that are owned by the user.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "created_after",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for spend limits that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2024-01-15T00:00:00Z"
            },
            "description": "Filter for spend limits that were created after the specified date. Input need to be presented in ISO8601 format, e.g. 2024-01-15T00:00:00Z",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "created_before",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for spend limits that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2024-01-15T00:00:00Z"
            },
            "description": "Filter for spend limits that were created before the specified date. Input need to be presented in ISO8601 format, e.g. 2024-01-15T00:00:00Z",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "is_terminated",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter only for terminated spend limits."
            },
            "description": "Filter only for terminated spend limits.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "user_access_roles",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "List of user access types to filter on. If provided, only limits with matching access types will be returned. Access types are 'OWNER', 'COOWNER', and 'MEMBER'. Can be provided as repeated parameters or comma-separated values."
            },
            "description": "List of user access types to filter on. If provided, only limits with matching access types will be returned. Access types are 'OWNER', 'COOWNER', and 'MEMBER'. Can be provided as repeated parameters or comma-separated values.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "COOWNER",
                  "MEMBER",
                  "OWNER"
                ]
              }
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_spend_limit_creation",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_spend_limit",
        "description": {
          "tagline": "Create a new spend limit with specified parameters.",
          "detailed": "This tool creates a spend limit with optional spend program ID, display name, spending restrictions, and permitted spend types. Use this tool when you need to set financial limits for a spending program or without linking to a specific program."
        },
        "return_annotation": "Confirmation of spend limit creation status.",
        "arguments": [
          {
            "name": "spend_limit_details",
            "alternative_names": [
              "limit_configuration",
              "spend_limit_payload"
            ],
            "description": "JSON object detailing the spend limit. Include accounting rules, display name, idempotency key, shareable status, permitted spend types, spend program ID, spending restrictions, and user ID as applicable.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/limits/deferred",
      "tags": [
        "Limit"
      ],
      "summary": "Create a limit",
      "description": "Limit may either be created with spend program id (can provide display name and spending restrictions, cannot permitted spend types) or without (must provide display name, spending restrictions, and permitted spend types).",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_rules": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category"
                    },
                    "field_option_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category option"
                    }
                  },
                  "description": "Set accounting rules for Spend Limit"
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Cosmetic display name of the limit."
                },
                "idempotency_key": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "is_shareable": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Dictates whether the spend limit is shareable among multiple users."
                },
                "permitted_spend_types": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specifies the permitted spend types."
                },
                "spend_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The id of the associated spend program."
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program."
                },
                "user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the limit owner."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_rules": {
                  "type": "array",
                  "description": "Set accounting rules for Spend Limit",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_id": {
                        "type": "string",
                        "description": "UUID of the tracking category",
                        "format": "uuid"
                      },
                      "field_option_id": {
                        "type": "string",
                        "description": "UUID of the tracking category option",
                        "format": "uuid"
                      }
                    },
                    "required": [
                      "field_id",
                      "field_option_id"
                    ]
                  }
                },
                "display_name": {
                  "type": "string",
                  "description": "Cosmetic display name of the limit."
                },
                "idempotency_key": {
                  "type": "string",
                  "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
                },
                "is_shareable": {
                  "type": "boolean",
                  "description": "Dictates whether the spend limit is shareable among multiple users."
                },
                "permitted_spend_types": {
                  "type": "object",
                  "description": "Specifies the permitted spend types.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "primary_card_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether the user's physical card can be linked to this limit."
                        },
                        "reimbursements_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether reimbursements can be submitted against this limit."
                        }
                      },
                      "required": [
                        "primary_card_enabled",
                        "reimbursements_enabled"
                      ]
                    }
                  ]
                },
                "spend_program_id": {
                  "type": "string",
                  "description": "The id of the associated spend program.",
                  "format": "uuid"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allowed_categories": {
                          "type": "array",
                          "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "allowed_vendors": {
                          "type": "array",
                          "description": "List of merchants allowed for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "blocked_categories": {
                          "type": "array",
                          "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "blocked_vendors": {
                          "type": "array",
                          "description": "List of merchants  blocked for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "limit": {
                          "type": "object",
                          "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
                          "format": "date-time"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "interval",
                        "limit"
                      ]
                    }
                  ]
                },
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier of the limit owner.",
                  "format": "uuid"
                }
              },
              "required": [
                "idempotency_key",
                "user_id"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_rules\": [\n            {\n              \"field_id\": \"3f30896b-cd22-47af-b48a-c6c3068bc780\",\n              \"field_option_id\": \"d062e221-9c95-47b5-8dc6-d6c881693caf\"\n            }\n          ],\n          \"display_name\": \"T&E\",\n          \"idempotency_key\": \"3a5b1f62-988f-4190-bf31-b7ae87c5df42\",\n          \"is_shareable\": false,\n          \"permitted_spend_types\": {\n            \"primary_card_enabled\": false,\n            \"reimbursements_enabled\": false\n          },\n          \"spending_restrictions\": {\n            \"allowed_categories\": [\n              18,\n              20\n            ],\n            \"auto_lock_date\": null,\n            \"interval\": \"MONTHLY\",\n            \"limit\": {\n              \"amount\": 500000,\n              \"currency_code\": \"USD\"\n            },\n            \"transaction_amount_limit\": {\n              \"amount\": 10000,\n              \"currency_code\": \"USD\"\n            }\n          },\n          \"user_id\": \"d8135cfe-0396-4b2d-b2cf-ad809fb04731\"\n        },\n        \"properties\": {\n          \"accounting_rules\": {\n            \"description\": \"Set accounting rules for Spend Limit\",\n            \"items\": {\n              \"properties\": {\n                \"field_id\": {\n                  \"description\": \"UUID of the tracking category\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                },\n                \"field_option_id\": {\n                  \"description\": \"UUID of the tracking category option\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_id\",\n                \"field_option_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"display_name\": {\n            \"description\": \"Cosmetic display name of the limit.\",\n            \"type\": \"string\"\n          },\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          },\n          \"is_shareable\": {\n            \"description\": \"Dictates whether the spend limit is shareable among multiple users.\",\n            \"type\": \"boolean\"\n          },\n          \"permitted_spend_types\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"primary_card_enabled\": {\n                    \"description\": \"Dictates whether the user's physical card can be linked to this limit.\",\n                    \"type\": \"boolean\"\n                  },\n                  \"reimbursements_enabled\": {\n                    \"description\": \"Dictates whether reimbursements can be submitted against this limit.\",\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"primary_card_enabled\",\n                  \"reimbursements_enabled\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the permitted spend types.\"\n          },\n          \"spend_program_id\": {\n            \"description\": \"The id of the associated spend program.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"allowed_categories\": {\n                    \"description\": \" List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"allowed_vendors\": {\n                    \"description\": \"List of merchants allowed for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_categories\": {\n                    \"description\": \"List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_vendors\": {\n                    \"description\": \"List of merchants  blocked for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  }\n                },\n                \"required\": [\n                  \"interval\",\n                  \"limit\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program.\"\n          },\n          \"user_id\": {\n            \"description\": \"Unique identifier of the limit owner.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"user_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_spend_limit_deferred_task_status",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_deferred_task_status",
        "description": {
          "tagline": "Retrieve the status of a deferred task by task ID.",
          "detailed": "Use this tool to get the current status of a deferred task using the task ID. Useful for monitoring task progress or completion."
        },
        "return_annotation": "The status of the deferred task.",
        "arguments": [
          {
            "name": "task_identifier",
            "alternative_names": [
              "task_id_value",
              "deferred_task_id"
            ],
            "description": "The unique identifier for the deferred task you want to check the status of.",
            "endpoint_argument_name": "task_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/limits/deferred/status/{task_id}",
      "tags": [
        "Limit"
      ],
      "summary": "Fetch deferred task status",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "task_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_spend_limit_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_spend_limit",
        "description": {
          "tagline": "Fetches details of a specified spend limit.",
          "detailed": "This tool retrieves detailed information about a specific spend limit using the spend limit ID. It should be called when you need to know the specifics of a particular spending limit."
        },
        "return_annotation": "Details about a specific spend limit.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "spending_limit_id",
              "limit_id"
            ],
            "description": "The unique identifier for the spend limit you want to retrieve details about.",
            "endpoint_argument_name": "spend_limit_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/limits/{spend_limit_id}",
      "tags": [
        "Limit"
      ],
      "summary": "Fetch a limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "put_spend_limit_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_spending_limit",
        "description": {
          "tagline": "Update a spending limit for a specified resource.",
          "detailed": "Use this tool to modify the spending limit for a given resource identified by its spend limit ID. It updates the limit and provides confirmation of the change."
        },
        "return_annotation": "Confirmation of limit update operation.",
        "arguments": [
          {
            "name": "spending_limit_id",
            "alternative_names": [
              "limit_identifier",
              "resource_spend_id"
            ],
            "description": "A unique string identifier for the spending limit to be updated.",
            "endpoint_argument_name": "spend_limit_id"
          },
          {
            "name": "update_spending_limit_details",
            "alternative_names": [
              "modify_limit_details",
              "adjust_spending_parameters"
            ],
            "description": "A JSON object containing details to update the spending limit, including display name, accounting rules, shareability, user ID, permitted spend types, spend program ID, and spending restrictions.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PUT",
      "path": "/developer/v1/limits/{spend_limit_id}",
      "tags": [
        "Limit"
      ],
      "summary": "Update a limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_rules": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category"
                    },
                    "field_option_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category option"
                    }
                  },
                  "description": "Set accounting rules for all card transactions and reimbursements (if applicable) for the given spend limit"
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Change the display name of the limit"
                },
                "is_shareable": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Dictates whether the spend limit is shareable among multiple users."
                },
                "new_user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Change the user of the limit"
                },
                "permitted_spend_types": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Modify permitted spend types. All fields of permitted_spend_types must be given."
                },
                "spend_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specify a spend program to link with.\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\n            Pass spend_program_id = None to detach the limit's current spend program.\n            If the spend_program_id field is specified, no other fields may be passed.\n            "
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions)."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_rules": {
                  "type": "array",
                  "description": "Set accounting rules for all card transactions and reimbursements (if applicable) for the given spend limit",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_id": {
                        "type": "string",
                        "description": "UUID of the tracking category",
                        "format": "uuid"
                      },
                      "field_option_id": {
                        "type": "string",
                        "description": "UUID of the tracking category option",
                        "format": "uuid"
                      }
                    },
                    "required": [
                      "field_id",
                      "field_option_id"
                    ]
                  }
                },
                "display_name": {
                  "type": "string",
                  "description": "Change the display name of the limit"
                },
                "is_shareable": {
                  "type": "boolean",
                  "description": "Dictates whether the spend limit is shareable among multiple users."
                },
                "new_user_id": {
                  "type": "string",
                  "description": "Change the user of the limit",
                  "format": "uuid"
                },
                "permitted_spend_types": {
                  "type": "object",
                  "description": "Modify permitted spend types. All fields of permitted_spend_types must be given.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "primary_card_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether the user's physical card can be linked to this limit."
                        },
                        "reimbursements_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether reimbursements can be submitted against this limit."
                        }
                      },
                      "required": [
                        "primary_card_enabled",
                        "reimbursements_enabled"
                      ]
                    }
                  ]
                },
                "spend_program_id": {
                  "type": "string",
                  "description": "Specify a spend program to link with.\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\n            Pass spend_program_id = None to detach the limit's current spend program.\n            If the spend_program_id field is specified, no other fields may be passed.\n            ",
                  "format": "uuid"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions).",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allowed_categories": {
                          "type": "array",
                          "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "allowed_vendors": {
                          "type": "array",
                          "description": "List of merchants allowed for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "blocked_categories": {
                          "type": "array",
                          "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "blocked_vendors": {
                          "type": "array",
                          "description": "List of merchants  blocked for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "is_one_time_edit": {
                          "type": "boolean",
                          "description": "Dictates whether the spend restriction update is only applicable for the current period. Set to true for a temporary limit increase. Default is false."
                        },
                        "limit": {
                          "type": "object",
                          "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
                          "format": "date-time"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "interval",
                        "limit"
                      ]
                    }
                  ]
                }
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_rules\": [\n            {\n              \"field_id\": \"3f30896b-cd22-47af-b48a-c6c3068bc780\",\n              \"field_option_id\": \"d062e221-9c95-47b5-8dc6-d6c881693caf\"\n            }\n          ],\n          \"display_name\": \"New Display Name\",\n          \"is_shareable\": true,\n          \"new_user_id\": \"b9627abf-6b7e-47bc-a475-7493a8fa9cb4\",\n          \"permitted_spend_types\": {\n            \"primary_card_enabled\": false,\n            \"reimbursements_enabled\": true\n          },\n          \"spending_restrictions\": {\n            \"amount\": 500,\n            \"interval\": \"DAILY\"\n          }\n        },\n        \"properties\": {\n          \"accounting_rules\": {\n            \"description\": \"Set accounting rules for all card transactions and reimbursements (if applicable) for the given spend limit\",\n            \"items\": {\n              \"properties\": {\n                \"field_id\": {\n                  \"description\": \"UUID of the tracking category\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                },\n                \"field_option_id\": {\n                  \"description\": \"UUID of the tracking category option\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_id\",\n                \"field_option_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"display_name\": {\n            \"description\": \"Change the display name of the limit\",\n            \"type\": \"string\"\n          },\n          \"is_shareable\": {\n            \"description\": \"Dictates whether the spend limit is shareable among multiple users.\",\n            \"type\": \"boolean\"\n          },\n          \"new_user_id\": {\n            \"description\": \"Change the user of the limit\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"permitted_spend_types\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"primary_card_enabled\": {\n                    \"description\": \"Dictates whether the user's physical card can be linked to this limit.\",\n                    \"type\": \"boolean\"\n                  },\n                  \"reimbursements_enabled\": {\n                    \"description\": \"Dictates whether reimbursements can be submitted against this limit.\",\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"primary_card_enabled\",\n                  \"reimbursements_enabled\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Modify permitted spend types. All fields of permitted_spend_types must be given.\"\n          },\n          \"spend_program_id\": {\n            \"description\": \"Specify a spend program to link with.\\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\\n            Pass spend_program_id = None to detach the limit's current spend program.\\n            If the spend_program_id field is specified, no other fields may be passed.\\n            \",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"allowed_categories\": {\n                    \"description\": \" List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"allowed_vendors\": {\n                    \"description\": \"List of merchants allowed for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_categories\": {\n                    \"description\": \"List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_vendors\": {\n                    \"description\": \"List of merchants  blocked for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"is_one_time_edit\": {\n                    \"description\": \"Dictates whether the spend restriction update is only applicable for the current period. Set to true for a temporary limit increase. Default is false.\",\n                    \"type\": \"boolean\"\n                  },\n                  \"limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  }\n                },\n                \"required\": [\n                  \"interval\",\n                  \"limit\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions).\"\n          }\n        },\n        \"type\": \"object\",\n        \"x-resource-name\": \"spend_limits\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "patch_spend_limit_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_spend_limit",
        "description": {
          "tagline": "Updates the specified spend limit.",
          "detailed": "Use this tool to update the spend limit by providing the specific spend limit ID. This is useful for adjusting limits on resources as needed."
        },
        "return_annotation": "Confirms the update of the spend limit.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "limit_id",
              "resource_spend_id"
            ],
            "description": "The ID of the spend limit to be updated. Provide the unique identifier associated with the spend limit you wish to modify.",
            "endpoint_argument_name": "spend_limit_id"
          },
          {
            "name": "spend_limit_details",
            "alternative_names": [
              "limit_update_data",
              "limit_modification_payload"
            ],
            "description": "JSON object containing details to update the spend limit, such as accounting rules, display name, user ID, shareability, spend program ID, permitted spend types, and spending restrictions.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/limits/{spend_limit_id}",
      "tags": [
        "Limit"
      ],
      "summary": "Update a limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_rules": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category"
                    },
                    "field_option_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category option"
                    }
                  },
                  "description": "Set accounting rules for all card transactions and reimbursements (if applicable) for the given spend limit"
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Change the display name of the limit"
                },
                "is_shareable": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Dictates whether the spend limit is shareable among multiple users."
                },
                "new_user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Change the user of the limit"
                },
                "permitted_spend_types": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Modify permitted spend types. All fields of permitted_spend_types must be given."
                },
                "spend_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specify a spend program to link with.\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\n            Pass spend_program_id = None to detach the limit's current spend program.\n            If the spend_program_id field is specified, no other fields may be passed.\n            "
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions)."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_rules": {
                  "type": "array",
                  "description": "Set accounting rules for all card transactions and reimbursements (if applicable) for the given spend limit",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_id": {
                        "type": "string",
                        "description": "UUID of the tracking category",
                        "format": "uuid"
                      },
                      "field_option_id": {
                        "type": "string",
                        "description": "UUID of the tracking category option",
                        "format": "uuid"
                      }
                    },
                    "required": [
                      "field_id",
                      "field_option_id"
                    ]
                  }
                },
                "display_name": {
                  "type": "string",
                  "description": "Change the display name of the limit"
                },
                "is_shareable": {
                  "type": "boolean",
                  "description": "Dictates whether the spend limit is shareable among multiple users."
                },
                "new_user_id": {
                  "type": "string",
                  "description": "Change the user of the limit",
                  "format": "uuid"
                },
                "permitted_spend_types": {
                  "type": "object",
                  "description": "Modify permitted spend types. All fields of permitted_spend_types must be given.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "primary_card_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether the user's physical card can be linked to this limit."
                        },
                        "reimbursements_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether reimbursements can be submitted against this limit."
                        }
                      },
                      "required": [
                        "primary_card_enabled",
                        "reimbursements_enabled"
                      ]
                    }
                  ]
                },
                "spend_program_id": {
                  "type": "string",
                  "description": "Specify a spend program to link with.\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\n            Pass spend_program_id = None to detach the limit's current spend program.\n            If the spend_program_id field is specified, no other fields may be passed.\n            ",
                  "format": "uuid"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions).",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allowed_categories": {
                          "type": "array",
                          "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "allowed_vendors": {
                          "type": "array",
                          "description": "List of merchants allowed for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "blocked_categories": {
                          "type": "array",
                          "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "blocked_vendors": {
                          "type": "array",
                          "description": "List of merchants  blocked for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "is_one_time_edit": {
                          "type": "boolean",
                          "description": "Dictates whether the spend restriction update is only applicable for the current period. Set to true for a temporary limit increase. Default is false."
                        },
                        "limit": {
                          "type": "object",
                          "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
                          "format": "date-time"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "interval",
                        "limit"
                      ]
                    }
                  ]
                }
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_rules\": [\n            {\n              \"field_id\": \"3f30896b-cd22-47af-b48a-c6c3068bc780\",\n              \"field_option_id\": \"d062e221-9c95-47b5-8dc6-d6c881693caf\"\n            }\n          ],\n          \"display_name\": \"New Display Name\",\n          \"is_shareable\": true,\n          \"new_user_id\": \"b9627abf-6b7e-47bc-a475-7493a8fa9cb4\",\n          \"permitted_spend_types\": {\n            \"primary_card_enabled\": false,\n            \"reimbursements_enabled\": true\n          },\n          \"spending_restrictions\": {\n            \"amount\": 500,\n            \"interval\": \"DAILY\"\n          }\n        },\n        \"properties\": {\n          \"accounting_rules\": {\n            \"description\": \"Set accounting rules for all card transactions and reimbursements (if applicable) for the given spend limit\",\n            \"items\": {\n              \"properties\": {\n                \"field_id\": {\n                  \"description\": \"UUID of the tracking category\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                },\n                \"field_option_id\": {\n                  \"description\": \"UUID of the tracking category option\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_id\",\n                \"field_option_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"display_name\": {\n            \"description\": \"Change the display name of the limit\",\n            \"type\": \"string\"\n          },\n          \"is_shareable\": {\n            \"description\": \"Dictates whether the spend limit is shareable among multiple users.\",\n            \"type\": \"boolean\"\n          },\n          \"new_user_id\": {\n            \"description\": \"Change the user of the limit\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"permitted_spend_types\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"primary_card_enabled\": {\n                    \"description\": \"Dictates whether the user's physical card can be linked to this limit.\",\n                    \"type\": \"boolean\"\n                  },\n                  \"reimbursements_enabled\": {\n                    \"description\": \"Dictates whether reimbursements can be submitted against this limit.\",\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"primary_card_enabled\",\n                  \"reimbursements_enabled\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Modify permitted spend types. All fields of permitted_spend_types must be given.\"\n          },\n          \"spend_program_id\": {\n            \"description\": \"Specify a spend program to link with.\\n            This will override the limit's spending restrictions and permitted spend types with those of the spend program.\\n            Pass spend_program_id = None to detach the limit's current spend program.\\n            If the spend_program_id field is specified, no other fields may be passed.\\n            \",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"allowed_categories\": {\n                    \"description\": \" List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"allowed_vendors\": {\n                    \"description\": \"List of merchants allowed for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_categories\": {\n                    \"description\": \"List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_vendors\": {\n                    \"description\": \"List of merchants  blocked for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"is_one_time_edit\": {\n                    \"description\": \"Dictates whether the spend restriction update is only applicable for the current period. Set to true for a temporary limit increase. Default is false.\",\n                    \"type\": \"boolean\"\n                  },\n                  \"limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  }\n                },\n                \"required\": [\n                  \"interval\",\n                  \"limit\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Modify spending restrictions. If this field is passed, the entire set of new spending restrictions must be passed (i.e. the given spending restrictions will override all existing spending restrictions).\"\n          }\n        },\n        \"type\": \"object\",\n        \"x-resource-name\": \"spend_limits\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "put_spend_allocation_add_users",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "add_users_to_spend_limit",
        "description": {
          "tagline": "Add new users to a shared spending limit.",
          "detailed": "Use this tool to add new users to an existing shared spending limit. Useful for managing group financial allocations."
        },
        "return_annotation": "Confirmation of users added to shared spend limit.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "shared_limit_id",
              "expense_limit_identifier"
            ],
            "description": "The unique identifier for the shared spending limit to which users will be added.",
            "endpoint_argument_name": "spend_limit_id"
          },
          {
            "name": "user_ids_to_add",
            "alternative_names": [
              "users_to_include",
              "users_for_limit"
            ],
            "description": "An array of user IDs to be added to the shared spend limit. Each ID should be a string. Use this to specify which users will be included in the spending allocation.",
            "endpoint_argument_name": "user_ids"
          }
        ]
      },
      "method": "PUT",
      "path": "/developer/v1/limits/{spend_limit_id}/add-users",
      "tags": [
        "Limit"
      ],
      "summary": "Add new users into a shared limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "user_ids",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Unique identifier of user(s) in shared limit.",
                "format": "uuid"
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"user_ids\": {\n            \"items\": {\n              \"description\": \"Unique identifier of user(s) in shared limit.\",\n              \"format\": \"uuid\",\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_spend_limit_termination_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "terminate_spend_limit",
        "description": {
          "tagline": "Initiates an async task to permanently terminate a spend limit.",
          "detailed": "This tool is used to create an asynchronous task that permanently terminates a specified spend limit. It should be called when there is a need to end a spend limit completely and ensure no further spending can occur under that limit."
        },
        "return_annotation": "Confirmation of spend limit termination initiation.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "limit_id",
              "spending_limit_id"
            ],
            "description": "The unique identifier for the spend limit to be terminated permanently.",
            "endpoint_argument_name": "spend_limit_id"
          },
          {
            "name": "idempotency_key",
            "alternative_names": [
              "unique_request_key",
              "retry_identifier"
            ],
            "description": "A unique string, typically a UUID, to recognize and retry the request without duplication.",
            "endpoint_argument_name": "idempotency_key"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/limits/{spend_limit_id}/deferred/termination",
      "tags": [
        "Limit"
      ],
      "summary": "Terminate a limit",
      "description": "This endpoint creates an async task to terminate a limit permanently.",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_spend_allocation_delete_users",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "remove_users_from_shared_limit",
        "description": {
          "tagline": "Remove users from a shared spending limit.",
          "detailed": "Use this tool to delete users associated with a specific shared spending limit, identified by the spend limit ID."
        },
        "return_annotation": "Confirmation of user removal from shared limit.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "shared_limit_id",
              "limit_identifier"
            ],
            "description": "The identifier for the shared spending limit from which users will be removed. This should be a unique string representing the specific spend limit.",
            "endpoint_argument_name": "spend_limit_id"
          },
          {
            "name": "user_ids_to_remove",
            "alternative_names": [
              "users_to_remove",
              "user_identifiers_for_removal"
            ],
            "description": "An array of user IDs to remove from the shared spending limit.",
            "endpoint_argument_name": "user_ids"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/limits/{spend_limit_id}/delete-users",
      "tags": [
        "Limit"
      ],
      "summary": "Remove users from a shared limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "user_ids",
            "value_schema": {
              "val_type": "array",
              "inner_val_type": "string",
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Unique identifier of user(s) in shared limit.",
                "format": "uuid"
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"user_ids\": {\n            \"items\": {\n              \"description\": \"Unique identifier of user(s) in shared limit.\",\n              \"format\": \"uuid\",\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_spend_limit_suspension_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "suspend_spend_limit",
        "description": {
          "tagline": "Suspend a spend limit on Ramp.",
          "detailed": "Use this tool to suspend a specific spend limit identified by its ID on the Ramp platform."
        },
        "return_annotation": "Confirmation of spend limit suspension.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "limit_id",
              "spend_limit_id"
            ],
            "description": "The ID of the spend limit to suspend on Ramp. This should be a string representing the unique identifier.",
            "endpoint_argument_name": "spend_limit_id"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/limits/{spend_limit_id}/suspension",
      "tags": [
        "Limit"
      ],
      "summary": "Suspend a limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_spend_limit_unsuspension_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "unsuspend_spend_limit",
        "description": {
          "tagline": "Unsuspend a specified spend limit.",
          "detailed": "This tool is used to unsuspend a previously suspended spend limit. Call this tool to restore a spend limit to active status."
        },
        "return_annotation": "Confirmation of spend limit unsuspension.",
        "arguments": [
          {
            "name": "spend_limit_identifier",
            "alternative_names": [
              "limit_id",
              "spending_limit_id"
            ],
            "description": "The unique string identifier of the spend limit to be unsuspended.",
            "endpoint_argument_name": "spend_limit_id"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/limits/{spend_limit_id}/unsuspension",
      "tags": [
        "Limit"
      ],
      "summary": "Unsuspend a limit",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_location_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_available_locations",
        "description": {
          "tagline": "Retrieve a list of available locations.",
          "detailed": "Use this tool to get the current list of locations available through the service."
        },
        "return_annotation": "Returns a list of available locations.",
        "arguments": [
          {
            "name": "filter_by_business_entity",
            "alternative_names": [
              "business_entity_filter",
              "entity_filter"
            ],
            "description": "Filter locations by their associated business entity ID. This expects a string representing the entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "start_page_id",
              "last_entity_id"
            ],
            "description": "The ID of the last entity from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "items_per_page",
              "locations_per_page"
            ],
            "description": "The number of locations to be returned per page. Must be between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/locations",
      "tags": [
        "Location"
      ],
      "summary": "List locations",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "locations:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by associated business entity."
            },
            "description": "Filter by associated business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_location_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_location",
        "description": {
          "tagline": "Create a new location entry.",
          "detailed": "Use this tool to add a new location to the system. It should be called when you need to create a location resource using the provided data."
        },
        "return_annotation": "Confirmation of location creation.",
        "arguments": [
          {
            "name": "location_name",
            "alternative_names": [
              "location_title",
              "place_name"
            ],
            "description": "Name of the location to be created.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "business_entity_identifier",
            "alternative_names": [
              "business_entity_id",
              "entity_identifier"
            ],
            "description": "The identifier of the business entity to which this location belongs.",
            "endpoint_argument_name": "entity_id"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/locations",
      "tags": [
        "Location"
      ],
      "summary": "Create a location",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "locations:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Identifier of the business entity this location belongs to."
            },
            "description": "Identifier of the business entity this location belongs to.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Identifier of the business entity this location belongs to.",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Name of the location."
            },
            "description": "Name of the location.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Name of the location."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"entity_id\": \"140af3ce-b00a-4c0e-adaa-ac83b65e2e18\",\n          \"name\": \"Miami, FL\"\n        },\n        \"properties\": {\n          \"entity_id\": {\n            \"description\": \"Identifier of the business entity this location belongs to.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Name of the location.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_location_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_location_details",
        "description": {
          "tagline": "Retrieve detailed information about a specific location.",
          "detailed": "Use this tool to obtain detailed information for a given location using its location ID. Ideal for scenarios where location details are required, such as maps or travel applications."
        },
        "return_annotation": "Details of a specific location.",
        "arguments": [
          {
            "name": "location_identifier",
            "alternative_names": [
              "location_key",
              "place_id"
            ],
            "description": "The unique identifier for the location to fetch details about. It is required to specify which location to retrieve.",
            "endpoint_argument_name": "location_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/locations/{location_id}",
      "tags": [
        "Location"
      ],
      "summary": "Fetch a location",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "locations:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_location_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_location",
        "description": {
          "tagline": "Update the details of a location.",
          "detailed": "This tool updates specific details for a given location using its ID. It should be called to modify location information."
        },
        "return_annotation": "Confirmation of the location update.",
        "arguments": [
          {
            "name": "location_id",
            "alternative_names": [
              "location_identifier",
              "loc_id"
            ],
            "description": "The unique identifier of the location to be updated. It is required to specify which location's details are being modified.",
            "endpoint_argument_name": "location_id"
          },
          {
            "name": "updated_location_name",
            "alternative_names": [
              "new_location_name",
              "location_name_update"
            ],
            "description": "The new name for the location being updated.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "updated_business_entity_id",
            "alternative_names": [
              "new_entity_id",
              "business_entity_identifier"
            ],
            "description": "The new identifier for the business entity associated with this location.",
            "endpoint_argument_name": "entity_id"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/locations/{location_id}",
      "tags": [
        "Location"
      ],
      "summary": "Update a location",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "locations:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Updated identifier of the business entity this location belongs to."
            },
            "description": "Updated identifier of the business entity this location belongs to.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Updated identifier of the business entity this location belongs to.",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Updated name of the location."
            },
            "description": "Updated name of the location.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Updated name of the location."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"entity_id\": \"bb25a7e8-cc2f-4ba7-9bf4-7730ffe152bb\",\n          \"name\": \"New York City, NY\"\n        },\n        \"properties\": {\n          \"entity_id\": {\n            \"description\": \"Updated identifier of the business entity this location belongs to.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Updated name of the location.\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_memo_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_memos_with_pagination",
        "description": {
          "tagline": "Retrieve a list of memos with pagination support.",
          "detailed": "This tool calls the Ramp API to retrieve a list of memos, supporting pagination to handle large sets of data efficiently."
        },
        "return_annotation": "Returns a list of memos with pagination information.",
        "arguments": [
          {
            "name": "filter_by_card_id",
            "alternative_names": [
              "card_identifier_filter",
              "card_filter_id"
            ],
            "description": "Filter memos by the specified card ID to retrieve relevant entries.",
            "endpoint_argument_name": "card_id"
          },
          {
            "name": "filter_by_department_id",
            "alternative_names": [
              "department_filter_id",
              "department_memos_id"
            ],
            "description": "Filter memos by the specified department ID.",
            "endpoint_argument_name": "department_id"
          },
          {
            "name": "location_identifier",
            "alternative_names": [
              "location_filter",
              "location_id_filter"
            ],
            "description": "Filter memos by specifying a location identifier.",
            "endpoint_argument_name": "location_id"
          },
          {
            "name": "filter_by_manager_id",
            "alternative_names": [
              "manager_filter_id",
              "manager_identifier"
            ],
            "description": "Filter memos by providing the manager's ID.",
            "endpoint_argument_name": "manager_id"
          },
          {
            "name": "filter_by_merchant_id",
            "alternative_names": [
              "merchant_filter",
              "memos_merchant_id"
            ],
            "description": "Filter memos by merchant ID to retrieve only those associated with a specific merchant.",
            "endpoint_argument_name": "merchant_id"
          },
          {
            "name": "filter_memos_by_user_id",
            "alternative_names": [
              "user_id_filter",
              "memos_user_filter"
            ],
            "description": "Filter memos by specifying the user ID.",
            "endpoint_argument_name": "user_id"
          },
          {
            "name": "filter_memos_after_date",
            "alternative_names": [
              "memos_from_date",
              "transactions_starting_from_date"
            ],
            "description": "Filter memos for transactions occurring after this date. Use ISO 8601 format (YYYY-MM-DD).",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "filter_by_end_date",
            "alternative_names": [
              "end_transaction_date_filter",
              "max_transaction_date"
            ],
            "description": "Filter memos for transactions occurring before this date in ISO 8601 format.",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "pagination_last_entity_id",
            "alternative_names": [
              "pagination_start_id",
              "continue_after_id"
            ],
            "description": "The ID of the last entity of the previous page to fetch the next set of results for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "num_results_per_page",
              "items_per_page"
            ],
            "description": "Specify the number of results to return per page, between 2 and 100. Defaults to 20 if not set.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/memos",
      "tags": [
        "Memo"
      ],
      "summary": "List memos",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "memos:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos by card."
            },
            "description": "Filter memos by card.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos by department."
            },
            "description": "Filter memos by department.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos by location."
            },
            "description": "Filter memos by location.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "manager_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos by manager."
            },
            "description": "Filter memos by manager.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "merchant_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos by merchant."
            },
            "description": "Filter memos by merchant.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos by user."
            },
            "description": "Filter memos by user.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos for transactions after this date."
            },
            "description": "Filter memos for transactions after this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter memos for transactions before this date."
            },
            "description": "Filter memos for transactions before this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_memo_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_transaction_memo",
        "description": {
          "tagline": "Fetch the memo of a specific transaction using its ID.",
          "detailed": ""
        },
        "return_annotation": "The memo of a specific transaction.",
        "arguments": [
          {
            "name": "transaction_id",
            "alternative_names": [
              "txn_id",
              "transaction_identifier"
            ],
            "description": "The unique identifier for the transaction to fetch its memo. Expected as a string.",
            "endpoint_argument_name": "transaction_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/memos/{transaction_id}",
      "tags": [
        "Memo"
      ],
      "summary": "Fetch a transaction memo",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "memos:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "transaction_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_memo_create_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_transaction_memo",
        "description": {
          "tagline": "Upload a new memo for a specific transaction.",
          "detailed": "Use this tool to upload a memo to a specified transaction. It is triggered when there is a need to add a note or explanation to a transaction."
        },
        "return_annotation": "Acknowledgment of successful memo upload for a transaction.",
        "arguments": [
          {
            "name": "transaction_identifier",
            "alternative_names": [
              "id_of_transaction",
              "transaction_id_key"
            ],
            "description": "The unique identifier for the transaction to which the memo will be uploaded. It should be a string representing the transaction's ID.",
            "endpoint_argument_name": "transaction_id"
          },
          {
            "name": "memo_text",
            "alternative_names": [
              "transaction_memo_text",
              "memo_content"
            ],
            "description": "Text content of the memo to create for a transaction.",
            "endpoint_argument_name": "memo"
          },
          {
            "name": "apply_memo_to_future_transactions",
            "alternative_names": [
              "auto_apply_memo",
              "recurring_memo_option"
            ],
            "description": "Indicate if the memo should automatically apply to similar future transactions. Use true for recurring, false otherwise.",
            "endpoint_argument_name": "is_memo_recurring"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/memos/{transaction_id}",
      "tags": [
        "Memo"
      ],
      "summary": "Upload a new memo for a transaction",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "memos:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "transaction_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "is_memo_recurring",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether this memo should automatically apply to similar future transactions."
            },
            "description": "Whether this memo should automatically apply to similar future transactions.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Whether this memo should automatically apply to similar future transactions."
            },
            "schema_required": false
          },
          {
            "name": "memo",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Text content of the memo to create."
            },
            "description": "Text content of the memo to create.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Text content of the memo to create."
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"is_memo_recurring\": {\n            \"default\": false,\n            \"deprecated\": true,\n            \"description\": \"Whether this memo should automatically apply to similar future transactions.\",\n            \"type\": \"boolean\"\n          },\n          \"memo\": {\n            \"description\": \"Text content of the memo to create.\",\n            \"maxLength\": 255,\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"memo\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_merchant_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_merchants",
        "description": {
          "tagline": "Retrieve a list of merchants with pagination support.",
          "detailed": "Use this tool to access a list of merchants, with the ability to paginate through results. Ideal for exploring available merchants or integrating merchant data into applications."
        },
        "return_annotation": "Provides a paginated list of merchants.",
        "arguments": [
          {
            "name": "filter_from_date",
            "alternative_names": [
              "from_date_filter",
              "start_date_filter"
            ],
            "description": "Filter merchants by transactions on or after this date (`user_transaction_time`). Format: YYYY-MM-DD.",
            "endpoint_argument_name": "transaction_from_date"
          },
          {
            "name": "filter_by_transaction_to_date",
            "alternative_names": [
              "end_transaction_date",
              "transaction_end_date"
            ],
            "description": "Filter merchants by transactions occurring on or before this date (format: YYYY-MM-DD).",
            "endpoint_argument_name": "transaction_to_date"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_entity_id",
              "previous_page_last_id"
            ],
            "description": "The ID of the last entity from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_results",
              "number_of_results_per_page"
            ],
            "description": "The number of merchants to return per page, between 2 and 100. Default is 20 if unspecified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/merchants",
      "tags": [
        "Merchant"
      ],
      "summary": "List merchants",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "merchants:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "transaction_from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter merchants by transactions occurring (`user_transaction_time`) on or after this date"
            },
            "description": "Filter merchants by transactions occurring (`user_transaction_time`) on or after this date",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "transaction_to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter merchants by transactions occurring (`user_transaction_time`) on or before this date"
            },
            "description": "Filter merchants by transactions occurring (`user_transaction_time`) on or before this date",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_purchase_orders_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_purchase_orders",
        "description": {
          "tagline": "Retrieve a list of purchase orders.",
          "detailed": "Call this tool to obtain a list of current purchase orders. It can be used to view all purchase order details, including their statuses and related information."
        },
        "return_annotation": "Details of purchase orders.",
        "arguments": [
          {
            "name": "purchase_order_creation_source",
            "alternative_names": [
              "creation_source_for_purchase_order",
              "purchase_order_source"
            ],
            "description": "Specifies the origin of the purchase order. Options include ACCOUNTING_PROVIDER, DEVELOPER_API, or RAMP.",
            "endpoint_argument_name": "creation_source"
          },
          {
            "name": "filter_from_created_date",
            "alternative_names": [
              "from_date_filter",
              "created_after_date"
            ],
            "description": "Filter purchase orders created after a specified date. Expected format is ISO 8601 (YYYY-MM-DD).",
            "endpoint_argument_name": "from_created_at"
          },
          {
            "name": "filter_before_creation_date",
            "alternative_names": [
              "filter_until_creation_date",
              "creation_date_end_filter"
            ],
            "description": "Filter for purchase orders requested before this date. Format: YYYY-MM-DD.",
            "endpoint_argument_name": "to_created_at"
          },
          {
            "name": "receipt_status",
            "alternative_names": [
              "purchase_order_receipt_status",
              "order_receipt_state"
            ],
            "description": "Specify the receipt status of the purchase order. Options are: FULLY_RECEIVED, NOT_RECEIVED, OVER_RECEIVED, PARTIALLY_RECEIVED.",
            "endpoint_argument_name": "receipt_status"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_entity_id",
              "next_page_start_id"
            ],
            "description": "The ID of the last entity from the previous page to retrieve the next page of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "number_of_results",
              "page_result_count"
            ],
            "description": "Sets the number of purchase orders returned per page. Must be between 2 and 100, default is 20.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "business_entity_id",
            "alternative_names": [
              "entity_identifier",
              "company_id"
            ],
            "description": "Unique identifier for the associated business entity.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "spend_request_identifier",
            "alternative_names": [
              "spend_req_id",
              "request_id"
            ],
            "description": "Unique identifier for the spend request linked to the purchase order.",
            "endpoint_argument_name": "spend_request_id"
          },
          {
            "name": "three_way_match_enabled",
            "alternative_names": [
              "enable_three_way_match",
              "three_way_match_on"
            ],
            "description": "Set to true to enable three-way match for the purchase order.",
            "endpoint_argument_name": "three_way_match_enabled"
          },
          {
            "name": "include_archived_orders",
            "alternative_names": [
              "include_archived",
              "show_archived_orders"
            ],
            "description": "Set to true to include archived purchase orders. Defaults to false.",
            "endpoint_argument_name": "include_archived"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/purchase-orders",
      "tags": [
        "Purchase Order"
      ],
      "summary": "List purchase orders",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "purchase_orders:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "creation_source",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "ACCOUNTING_PROVIDER",
                "DEVELOPER_API",
                "RAMP"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Creation source of the purchase order."
            },
            "description": "Creation source of the purchase order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "ACCOUNTING_PROVIDER",
                "DEVELOPER_API",
                "RAMP"
              ]
            },
            "schema_required": false
          },
          {
            "name": "from_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for purchase orders that were requested after the given date."
            },
            "description": "Filter for purchase orders that were requested after the given date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for purchase orders that were requested before the given date."
            },
            "description": "Filter for purchase orders that were requested before the given date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "receipt_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "FULLY_RECEIVED",
                "NOT_RECEIVED",
                "OVER_RECEIVED",
                "PARTIALLY_RECEIVED"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Receipt status of the purchase order."
            },
            "description": "Receipt status of the purchase order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "FULLY_RECEIVED",
                "NOT_RECEIVED",
                "OVER_RECEIVED",
                "PARTIALLY_RECEIVED"
              ]
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier for the associated business entity."
            },
            "description": "Unique identifier for the associated business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "spend_request_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier for the spend request associated with the purchase order."
            },
            "description": "Unique identifier for the spend request associated with the purchase order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "three_way_match_enabled",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether three-way match is enabled for the purchase order."
            },
            "description": "Whether three-way match is enabled for the purchase order.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "include_archived",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether to include archived purchase orders. By default, include_archived is false."
            },
            "description": "Whether to include archived purchase orders. By default, include_archived is false.",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_purchase_orders_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_purchase_order",
        "description": {
          "tagline": "Create a purchase order.",
          "detailed": "This tool is used to create a new purchase order by sending the necessary details to the specified endpoint."
        },
        "return_annotation": "Confirmation of purchase order creation.",
        "arguments": [
          {
            "name": "purchase_order_details",
            "alternative_names": [
              "order_details",
              "purchase_order_data"
            ],
            "description": "JSON object containing details of the purchase order, including vendor ID, currency, line items, and required dates.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/purchase-orders",
      "tags": [
        "Purchase Order"
      ],
      "summary": "Create a purchase order",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "purchase_orders:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_field_selections": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_external_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                    },
                    "field_option_external_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                    }
                  },
                  "description": "List of accounting field options selected to code the purchase order. Generally, only a single vendor accounting field is supported."
                },
                "currency": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "AED",
                    "AFN",
                    "ALL",
                    "AMD",
                    "ANG",
                    "AOA",
                    "ARS",
                    "AUD",
                    "AWG",
                    "AZN",
                    "BAM",
                    "BBD",
                    "BDT",
                    "BGN",
                    "BHD",
                    "BIF",
                    "BMD",
                    "BND",
                    "BOB",
                    "BOV",
                    "BRL",
                    "BSD",
                    "BTN",
                    "BWP",
                    "BYN",
                    "BZD",
                    "CAD",
                    "CDF",
                    "CHE",
                    "CHF",
                    "CHW",
                    "CLF",
                    "CLP",
                    "CNY",
                    "COP",
                    "COU",
                    "CRC",
                    "CUC",
                    "CUP",
                    "CVE",
                    "CZK",
                    "DJF",
                    "DKK",
                    "DOP",
                    "DZD",
                    "EGP",
                    "ERN",
                    "ETB",
                    "EUR",
                    "EURC",
                    "FJD",
                    "FKP",
                    "GBP",
                    "GEL",
                    "GHS",
                    "GIP",
                    "GMD",
                    "GNF",
                    "GTQ",
                    "GYD",
                    "HKD",
                    "HNL",
                    "HRK",
                    "HTG",
                    "HUF",
                    "IDR",
                    "ILS",
                    "INR",
                    "IQD",
                    "IRR",
                    "ISK",
                    "JMD",
                    "JOD",
                    "JPY",
                    "KES",
                    "KGS",
                    "KHR",
                    "KMF",
                    "KPW",
                    "KRW",
                    "KWD",
                    "KYD",
                    "KZT",
                    "LAK",
                    "LBP",
                    "LKR",
                    "LRD",
                    "LSL",
                    "LYD",
                    "MAD",
                    "MDL",
                    "MGA",
                    "MKD",
                    "MMK",
                    "MNT",
                    "MOP",
                    "MRU",
                    "MUR",
                    "MVR",
                    "MWK",
                    "MXN",
                    "MXV",
                    "MYR",
                    "MZN",
                    "NAD",
                    "NGN",
                    "NIO",
                    "NOK",
                    "NPR",
                    "NZD",
                    "OMR",
                    "PAB",
                    "PEN",
                    "PGK",
                    "PHP",
                    "PKR",
                    "PLN",
                    "PYG",
                    "QAR",
                    "RON",
                    "RSD",
                    "RUB",
                    "RWF",
                    "SAR",
                    "SBD",
                    "SCR",
                    "SDG",
                    "SEK",
                    "SGD",
                    "SHP",
                    "SLE",
                    "SLL",
                    "SOS",
                    "SRD",
                    "SSP",
                    "STN",
                    "SVC",
                    "SYP",
                    "SZL",
                    "THB",
                    "TJS",
                    "TMT",
                    "TND",
                    "TOP",
                    "TRY",
                    "TTD",
                    "TWD",
                    "TZS",
                    "UAH",
                    "UGX",
                    "USD",
                    "USDC",
                    "USN",
                    "UYI",
                    "UYU",
                    "UYW",
                    "UZS",
                    "VED",
                    "VES",
                    "VND",
                    "VUV",
                    "WST",
                    "XAD",
                    "XAF",
                    "XAG",
                    "XAU",
                    "XBA",
                    "XBB",
                    "XBC",
                    "XBD",
                    "XCD",
                    "XCG",
                    "XDR",
                    "XOF",
                    "XPD",
                    "XPF",
                    "XPT",
                    "XSU",
                    "XTS",
                    "XUA",
                    "XXX",
                    "YER",
                    "ZAR",
                    "ZMW",
                    "ZWG",
                    "ZWL"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": "Currency of the purchase order."
                },
                "entity_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of associated business entity."
                },
                "line_items": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "accounting_field_selections": {
                      "val_type": "array",
                      "inner_val_type": "json",
                      "enum": null,
                      "properties": null,
                      "inner_properties": {
                        "field_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                        },
                        "field_option_external_id": {
                          "val_type": "string",
                          "inner_val_type": null,
                          "enum": null,
                          "properties": null,
                          "inner_properties": null,
                          "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                        }
                      },
                      "description": "List of accounting field options selected to code the line item."
                    },
                    "description": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Description of the line item."
                    },
                    "unit_price": {
                      "val_type": "json",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Unit price of the line item."
                    },
                    "unit_quantity": {
                      "val_type": "integer",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "Quantity of the line item."
                    }
                  },
                  "description": "List of purchase order line items."
                },
                "memo": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Memo for the purchase order."
                },
                "net_payment_terms": {
                  "val_type": "integer",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The required time an invoice needs to be paid after receipt in days."
                },
                "promise_date": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The date the vendor will deliver the goods or services."
                },
                "purchase_order_number": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique purchase order number with format <prefix>-<number>. Prefixes must only contain numbers, uppercase letters, and dashes. Invalid characters will be filtered out automatically. If not provided, one will be auto-generated using a prefix specified in procurement settings, if it exists."
                },
                "spend_end_date": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The date when spending for this purchase order ends."
                },
                "spend_start_date": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The date when spending for this purchase order begins."
                },
                "three_way_match_enabled": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Whether three-way match is enabled for the purchase order. I.e. whether an item receipt will be attached to indicate goods were received."
                },
                "vendor_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier for the vendor."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_field_selections": {
                  "type": "array",
                  "description": "List of accounting field options selected to code the purchase order. Generally, only a single vendor accounting field is supported.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_external_id": {
                        "type": "string",
                        "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                      },
                      "field_option_external_id": {
                        "type": "string",
                        "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                      }
                    },
                    "required": [
                      "field_external_id",
                      "field_option_external_id"
                    ]
                  }
                },
                "currency": {
                  "type": "string",
                  "description": "Currency of the purchase order.",
                  "enum": [
                    "AED",
                    "AFN",
                    "ALL",
                    "AMD",
                    "ANG",
                    "AOA",
                    "ARS",
                    "AUD",
                    "AWG",
                    "AZN",
                    "BAM",
                    "BBD",
                    "BDT",
                    "BGN",
                    "BHD",
                    "BIF",
                    "BMD",
                    "BND",
                    "BOB",
                    "BOV",
                    "BRL",
                    "BSD",
                    "BTN",
                    "BWP",
                    "BYN",
                    "BZD",
                    "CAD",
                    "CDF",
                    "CHE",
                    "CHF",
                    "CHW",
                    "CLF",
                    "CLP",
                    "CNY",
                    "COP",
                    "COU",
                    "CRC",
                    "CUC",
                    "CUP",
                    "CVE",
                    "CZK",
                    "DJF",
                    "DKK",
                    "DOP",
                    "DZD",
                    "EGP",
                    "ERN",
                    "ETB",
                    "EUR",
                    "EURC",
                    "FJD",
                    "FKP",
                    "GBP",
                    "GEL",
                    "GHS",
                    "GIP",
                    "GMD",
                    "GNF",
                    "GTQ",
                    "GYD",
                    "HKD",
                    "HNL",
                    "HRK",
                    "HTG",
                    "HUF",
                    "IDR",
                    "ILS",
                    "INR",
                    "IQD",
                    "IRR",
                    "ISK",
                    "JMD",
                    "JOD",
                    "JPY",
                    "KES",
                    "KGS",
                    "KHR",
                    "KMF",
                    "KPW",
                    "KRW",
                    "KWD",
                    "KYD",
                    "KZT",
                    "LAK",
                    "LBP",
                    "LKR",
                    "LRD",
                    "LSL",
                    "LYD",
                    "MAD",
                    "MDL",
                    "MGA",
                    "MKD",
                    "MMK",
                    "MNT",
                    "MOP",
                    "MRU",
                    "MUR",
                    "MVR",
                    "MWK",
                    "MXN",
                    "MXV",
                    "MYR",
                    "MZN",
                    "NAD",
                    "NGN",
                    "NIO",
                    "NOK",
                    "NPR",
                    "NZD",
                    "OMR",
                    "PAB",
                    "PEN",
                    "PGK",
                    "PHP",
                    "PKR",
                    "PLN",
                    "PYG",
                    "QAR",
                    "RON",
                    "RSD",
                    "RUB",
                    "RWF",
                    "SAR",
                    "SBD",
                    "SCR",
                    "SDG",
                    "SEK",
                    "SGD",
                    "SHP",
                    "SLE",
                    "SLL",
                    "SOS",
                    "SRD",
                    "SSP",
                    "STN",
                    "SVC",
                    "SYP",
                    "SZL",
                    "THB",
                    "TJS",
                    "TMT",
                    "TND",
                    "TOP",
                    "TRY",
                    "TTD",
                    "TWD",
                    "TZS",
                    "UAH",
                    "UGX",
                    "USD",
                    "USDC",
                    "USN",
                    "UYI",
                    "UYU",
                    "UYW",
                    "UZS",
                    "VED",
                    "VES",
                    "VND",
                    "VUV",
                    "WST",
                    "XAD",
                    "XAF",
                    "XAG",
                    "XAU",
                    "XBA",
                    "XBB",
                    "XBC",
                    "XBD",
                    "XCD",
                    "XCG",
                    "XDR",
                    "XOF",
                    "XPD",
                    "XPF",
                    "XPT",
                    "XSU",
                    "XTS",
                    "XUA",
                    "XXX",
                    "YER",
                    "ZAR",
                    "ZMW",
                    "ZWG",
                    "ZWL"
                  ]
                },
                "entity_id": {
                  "type": "string",
                  "description": "Unique identifier of associated business entity.",
                  "format": "uuid"
                },
                "line_items": {
                  "type": "array",
                  "description": "List of purchase order line items.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "accounting_field_selections": {
                        "type": "array",
                        "description": "List of accounting field options selected to code the line item.",
                        "items": {
                          "type": "object",
                          "properties": {
                            "field_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field. This is the external ID, likely from ERP system."
                            },
                            "field_option_external_id": {
                              "type": "string",
                              "description": "Remote ID of accounting field option. This is the external ID, likely from ERP system."
                            }
                          },
                          "required": [
                            "field_external_id",
                            "field_option_external_id"
                          ]
                        }
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the line item."
                      },
                      "unit_price": {
                        "type": "object",
                        "description": "Unit price of the line item.",
                        "properties": {},
                        "oneOf": [
                          {
                            "type": "string",
                            "format": "decimal"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      },
                      "unit_quantity": {
                        "type": "integer",
                        "description": "Quantity of the line item."
                      }
                    },
                    "required": [
                      "unit_price",
                      "unit_quantity"
                    ]
                  }
                },
                "memo": {
                  "type": "string",
                  "description": "Memo for the purchase order."
                },
                "net_payment_terms": {
                  "type": "integer",
                  "description": "The required time an invoice needs to be paid after receipt in days."
                },
                "promise_date": {
                  "type": "string",
                  "description": "The date the vendor will deliver the goods or services.",
                  "format": "date"
                },
                "purchase_order_number": {
                  "type": "string",
                  "description": "Unique purchase order number with format <prefix>-<number>. Prefixes must only contain numbers, uppercase letters, and dashes. Invalid characters will be filtered out automatically. If not provided, one will be auto-generated using a prefix specified in procurement settings, if it exists."
                },
                "spend_end_date": {
                  "type": "string",
                  "description": "The date when spending for this purchase order ends.",
                  "format": "date"
                },
                "spend_start_date": {
                  "type": "string",
                  "description": "The date when spending for this purchase order begins.",
                  "format": "date"
                },
                "three_way_match_enabled": {
                  "type": "boolean",
                  "description": "Whether three-way match is enabled for the purchase order. I.e. whether an item receipt will be attached to indicate goods were received."
                },
                "vendor_id": {
                  "type": "string",
                  "description": "Unique identifier for the vendor.",
                  "format": "uuid"
                }
              },
              "required": [
                "currency",
                "entity_id",
                "line_items",
                "three_way_match_enabled"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_field_selections\": [],\n          \"currency\": \"USD\",\n          \"entity_id\": \"7b96a1f2-4b86-45f8-943a-f1ca6b5194d4\",\n          \"line_items\": [\n            {\n              \"accounting_field_selections\": [],\n              \"description\": \"my line item\",\n              \"unit_price\": 100,\n              \"unit_quantity\": 1\n            }\n          ],\n          \"memo\": \"Purchase order for general software services\",\n          \"net_payment_terms\": 30,\n          \"promise_date\": \"2024-05-10\",\n          \"purchase_order_number\": \"PO-1234\",\n          \"spend_end_date\": \"2024-05-10\",\n          \"spend_start_date\": \"2024-05-01\",\n          \"three_way_match_enabled\": false,\n          \"vendor_id\": \"b901afe8-46d7-4f30-b7b5-3c8af127e5a0\"\n        },\n        \"properties\": {\n          \"accounting_field_selections\": {\n            \"description\": \"List of accounting field options selected to code the purchase order. Generally, only a single vendor accounting field is supported.\",\n            \"items\": {\n              \"properties\": {\n                \"field_external_id\": {\n                  \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                  \"type\": \"string\"\n                },\n                \"field_option_external_id\": {\n                  \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_external_id\",\n                \"field_option_external_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"currency\": {\n            \"description\": \"Currency of the purchase order.\",\n            \"enum\": [\n              \"AED\",\n              \"AFN\",\n              \"ALL\",\n              \"AMD\",\n              \"ANG\",\n              \"AOA\",\n              \"ARS\",\n              \"AUD\",\n              \"AWG\",\n              \"AZN\",\n              \"BAM\",\n              \"BBD\",\n              \"BDT\",\n              \"BGN\",\n              \"BHD\",\n              \"BIF\",\n              \"BMD\",\n              \"BND\",\n              \"BOB\",\n              \"BOV\",\n              \"BRL\",\n              \"BSD\",\n              \"BTN\",\n              \"BWP\",\n              \"BYN\",\n              \"BZD\",\n              \"CAD\",\n              \"CDF\",\n              \"CHE\",\n              \"CHF\",\n              \"CHW\",\n              \"CLF\",\n              \"CLP\",\n              \"CNY\",\n              \"COP\",\n              \"COU\",\n              \"CRC\",\n              \"CUC\",\n              \"CUP\",\n              \"CVE\",\n              \"CZK\",\n              \"DJF\",\n              \"DKK\",\n              \"DOP\",\n              \"DZD\",\n              \"EGP\",\n              \"ERN\",\n              \"ETB\",\n              \"EUR\",\n              \"EURC\",\n              \"FJD\",\n              \"FKP\",\n              \"GBP\",\n              \"GEL\",\n              \"GHS\",\n              \"GIP\",\n              \"GMD\",\n              \"GNF\",\n              \"GTQ\",\n              \"GYD\",\n              \"HKD\",\n              \"HNL\",\n              \"HRK\",\n              \"HTG\",\n              \"HUF\",\n              \"IDR\",\n              \"ILS\",\n              \"INR\",\n              \"IQD\",\n              \"IRR\",\n              \"ISK\",\n              \"JMD\",\n              \"JOD\",\n              \"JPY\",\n              \"KES\",\n              \"KGS\",\n              \"KHR\",\n              \"KMF\",\n              \"KPW\",\n              \"KRW\",\n              \"KWD\",\n              \"KYD\",\n              \"KZT\",\n              \"LAK\",\n              \"LBP\",\n              \"LKR\",\n              \"LRD\",\n              \"LSL\",\n              \"LYD\",\n              \"MAD\",\n              \"MDL\",\n              \"MGA\",\n              \"MKD\",\n              \"MMK\",\n              \"MNT\",\n              \"MOP\",\n              \"MRU\",\n              \"MUR\",\n              \"MVR\",\n              \"MWK\",\n              \"MXN\",\n              \"MXV\",\n              \"MYR\",\n              \"MZN\",\n              \"NAD\",\n              \"NGN\",\n              \"NIO\",\n              \"NOK\",\n              \"NPR\",\n              \"NZD\",\n              \"OMR\",\n              \"PAB\",\n              \"PEN\",\n              \"PGK\",\n              \"PHP\",\n              \"PKR\",\n              \"PLN\",\n              \"PYG\",\n              \"QAR\",\n              \"RON\",\n              \"RSD\",\n              \"RUB\",\n              \"RWF\",\n              \"SAR\",\n              \"SBD\",\n              \"SCR\",\n              \"SDG\",\n              \"SEK\",\n              \"SGD\",\n              \"SHP\",\n              \"SLE\",\n              \"SLL\",\n              \"SOS\",\n              \"SRD\",\n              \"SSP\",\n              \"STN\",\n              \"SVC\",\n              \"SYP\",\n              \"SZL\",\n              \"THB\",\n              \"TJS\",\n              \"TMT\",\n              \"TND\",\n              \"TOP\",\n              \"TRY\",\n              \"TTD\",\n              \"TWD\",\n              \"TZS\",\n              \"UAH\",\n              \"UGX\",\n              \"USD\",\n              \"USDC\",\n              \"USN\",\n              \"UYI\",\n              \"UYU\",\n              \"UYW\",\n              \"UZS\",\n              \"VED\",\n              \"VES\",\n              \"VND\",\n              \"VUV\",\n              \"WST\",\n              \"XAD\",\n              \"XAF\",\n              \"XAG\",\n              \"XAU\",\n              \"XBA\",\n              \"XBB\",\n              \"XBC\",\n              \"XBD\",\n              \"XCD\",\n              \"XCG\",\n              \"XDR\",\n              \"XOF\",\n              \"XPD\",\n              \"XPF\",\n              \"XPT\",\n              \"XSU\",\n              \"XTS\",\n              \"XUA\",\n              \"XXX\",\n              \"YER\",\n              \"ZAR\",\n              \"ZMW\",\n              \"ZWG\",\n              \"ZWL\"\n            ],\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Unique identifier of associated business entity.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"line_items\": {\n            \"description\": \"List of purchase order line items.\",\n            \"items\": {\n              \"properties\": {\n                \"accounting_field_selections\": {\n                  \"description\": \"List of accounting field options selected to code the line item.\",\n                  \"items\": {\n                    \"properties\": {\n                      \"field_external_id\": {\n                        \"description\": \"Remote ID of accounting field. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      },\n                      \"field_option_external_id\": {\n                        \"description\": \"Remote ID of accounting field option. This is the external ID, likely from ERP system.\",\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"required\": [\n                      \"field_external_id\",\n                      \"field_option_external_id\"\n                    ],\n                    \"type\": \"object\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"description\": {\n                  \"default\": null,\n                  \"description\": \"Description of the line item.\",\n                  \"nullable\": true,\n                  \"type\": \"string\"\n                },\n                \"unit_price\": {\n                  \"description\": \"Unit price of the line item.\",\n                  \"oneOf\": [\n                    {\n                      \"format\": \"decimal\",\n                      \"type\": \"string\"\n                    },\n                    {\n                      \"type\": \"number\"\n                    }\n                  ]\n                },\n                \"unit_quantity\": {\n                  \"description\": \"Quantity of the line item.\",\n                  \"type\": \"integer\"\n                }\n              },\n              \"required\": [\n                \"unit_price\",\n                \"unit_quantity\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"memo\": {\n            \"default\": null,\n            \"description\": \"Memo for the purchase order.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"net_payment_terms\": {\n            \"default\": null,\n            \"description\": \"The required time an invoice needs to be paid after receipt in days.\",\n            \"nullable\": true,\n            \"type\": \"integer\"\n          },\n          \"promise_date\": {\n            \"default\": null,\n            \"description\": \"The date the vendor will deliver the goods or services.\",\n            \"format\": \"date\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"purchase_order_number\": {\n            \"default\": null,\n            \"description\": \"Unique purchase order number with format <prefix>-<number>. Prefixes must only contain numbers, uppercase letters, and dashes. Invalid characters will be filtered out automatically. If not provided, one will be auto-generated using a prefix specified in procurement settings, if it exists.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"spend_end_date\": {\n            \"default\": null,\n            \"description\": \"The date when spending for this purchase order ends.\",\n            \"format\": \"date\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"spend_start_date\": {\n            \"default\": null,\n            \"description\": \"The date when spending for this purchase order begins.\",\n            \"format\": \"date\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"three_way_match_enabled\": {\n            \"description\": \"Whether three-way match is enabled for the purchase order. I.e. whether an item receipt will be attached to indicate goods were received.\",\n            \"type\": \"boolean\"\n          },\n          \"vendor_id\": {\n            \"default\": null,\n            \"description\": \"Unique identifier for the vendor.\",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"currency\",\n          \"entity_id\",\n          \"line_items\",\n          \"three_way_match_enabled\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_purchase_order_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_purchase_order",
        "description": {
          "tagline": "Fetches details of a specific purchase order using its ID.",
          "detailed": "Use this tool to retrieve detailed information about a specific purchase order by providing its ID. It should be called when you need to access or display purchase order details."
        },
        "return_annotation": "Returns details of a specific purchase order.",
        "arguments": [
          {
            "name": "purchase_order_id",
            "alternative_names": [
              "order_id",
              "po_id"
            ],
            "description": "The unique identifier for the purchase order to be fetched. It should be a valid string that matches the ID format used in the system.",
            "endpoint_argument_name": "purchase_order_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/purchase-orders/{purchase_order_id}",
      "tags": [
        "Purchase Order"
      ],
      "summary": "Fetch a purchase order",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "purchase_orders:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "purchase_order_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_purchase_order_archive_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "archive_purchase_order",
        "description": {
          "tagline": "Archive a purchase order to manage records.",
          "detailed": "This tool is used to archive a purchase order by specifying its ID. It helps in managing and organizing purchase records efficiently."
        },
        "return_annotation": "Confirmation of the purchase order being archived.",
        "arguments": [
          {
            "name": "purchase_order_id",
            "alternative_names": [
              "order_id",
              "po_id"
            ],
            "description": "The unique identifier for the purchase order to be archived.",
            "endpoint_argument_name": "purchase_order_id"
          },
          {
            "name": "archived_reason",
            "alternative_names": [
              "reason_for_archiving",
              "archive_reasoning"
            ],
            "description": "Provide the reason for archiving the purchase order. This helps in keeping track of why the order is being archived for future reference and organization.",
            "endpoint_argument_name": "archived_reason"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/purchase-orders/{purchase_order_id}/archive",
      "tags": [
        "Purchase Order"
      ],
      "summary": "Archive a purchase order",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "purchase_orders:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "purchase_order_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "archived_reason",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Reason for archiving the purchase order."
            },
            "description": "Reason for archiving the purchase order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Reason for archiving the purchase order."
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"archived_reason\": \"This purchase order is no longer needed.\"\n        },\n        \"properties\": {\n          \"archived_reason\": {\n            \"description\": \"Reason for archiving the purchase order.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_receipt_integration_opted_out_emails_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_opted_out_emails",
        "description": {
          "tagline": "List emails opted out of receipt integrations.",
          "detailed": "Use this tool to obtain a list of emails that have opted out of receipt integrations. It should be called when it's necessary to identify emails not participating in these integrations."
        },
        "return_annotation": "A list of emails that opted out of receipt integrations.",
        "arguments": [
          {
            "name": "search_email",
            "alternative_names": [
              "filter_email",
              "lookup_email"
            ],
            "description": "Specify an email to filter the opted-out list for a specific address.",
            "endpoint_argument_name": "email"
          },
          {
            "name": "user_id",
            "alternative_names": [
              "account_id",
              "profile_id"
            ],
            "description": "The identifier for the user whose opt-out status you want to check. This should be a string matching the user's account ID.",
            "endpoint_argument_name": "id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/receipt-integrations/opt-out",
      "tags": [
        "Receipt Integrations"
      ],
      "summary": "List emails opted out of receipt integrations",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "receipt_integrations:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "email",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "format": "email"
            },
            "schema_required": false
          },
          {
            "name": "id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"email\": {\n            \"format\": \"email\",\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "post_receipt_integration_opted_out_emails_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "add_to_receipt_opt_out_list",
        "description": {
          "tagline": "Add an email to the receipt integrations opt-out list.",
          "detailed": "Use this tool to add a new email to the receipt integrations opt-out list, preventing receipt integrations for that email."
        },
        "return_annotation": "Confirmation of email opt-out from receipt integrations.",
        "arguments": [
          {
            "name": "business_id",
            "alternative_names": [
              "company_id",
              "organization_id"
            ],
            "description": "The ID number of the business to associate the opt-out email with. It should be an integer.",
            "endpoint_argument_name": "business_id"
          },
          {
            "name": "opt_out_email",
            "alternative_names": [
              "exclude_email_from_receipt",
              "email_for_opt_out"
            ],
            "description": "The email address to add to the receipt integrations opt-out list.",
            "endpoint_argument_name": "email"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/receipt-integrations/opt-out",
      "tags": [
        "Receipt Integrations"
      ],
      "summary": "Add a new email to receipt integrations opt-out list",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "receipt_integrations:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "business_id",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "integer"
            },
            "schema_required": true
          },
          {
            "name": "email",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string"
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"business_id\": {\n            \"type\": \"integer\"\n          },\n          \"email\": {\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"business_id\",\n          \"email\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "delete_receipt_integration_opted_out_emails_delete_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "opt_in_receipt_integration_email",
        "description": {
          "tagline": "Opt-in an email to receipt integrations.",
          "detailed": "This tool is used to opt-in an email that was previously opted out of receipt integrations. It should be called when you need to reverse an email's opt-out status for receipt integrations."
        },
        "return_annotation": "Indicates successful opt-in of the email to receipt integrations.",
        "arguments": [
          {
            "name": "email_uuid_to_opt_in",
            "alternative_names": [
              "email_opt_in_uuid",
              "uuid_for_email_opt_in"
            ],
            "description": "The UUID of the email to be opted into receipt integrations. It identifies the specific email previously opted out.",
            "endpoint_argument_name": "mailbox_opted_out_email_uuid"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/receipt-integrations/opt-out/{mailbox_opted_out_email_uuid}",
      "tags": [
        "Receipt Integrations"
      ],
      "summary": "Remove an email from receipt integration opt-out list",
      "description": "Successful request will opt-in email to receipt integrations.",
      "requires_security": true,
      "oauth_scopes": [
        "receipt_integrations:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "mailbox_opted_out_email_uuid",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_receipt_list",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_receipts",
        "description": {
          "tagline": "Retrieve a list of all receipts.",
          "detailed": "Call this tool to obtain a list of all receipts. Useful for fetching detailed receipt information."
        },
        "return_annotation": "A list of receipts details.",
        "arguments": [
          {
            "name": "filter_created_after_date",
            "alternative_names": [
              "created_after_date",
              "start_date_filter"
            ],
            "description": "Filter receipts created after this date in ISO8601 format.",
            "endpoint_argument_name": "created_after"
          },
          {
            "name": "filter_created_before_date",
            "alternative_names": [
              "created_before_date_filter",
              "before_creation_date"
            ],
            "description": "Filter receipts created before this date in ISO8601 format.",
            "endpoint_argument_name": "created_before"
          },
          {
            "name": "specific_transaction_id",
            "alternative_names": [
              "transaction_filter_id",
              "receipt_transaction_id"
            ],
            "description": "Filter receipts for a specific transaction using its ID.",
            "endpoint_argument_name": "transaction_id"
          },
          {
            "name": "filter_from_date",
            "alternative_names": [
              "start_date_filter",
              "begin_date_filter"
            ],
            "description": "Filter receipts; only include transactions with 'user_transaction_time' after this date (ISO8601 format).",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "filter_transactions_before_date",
            "alternative_names": [
              "receipts_before_date",
              "transaction_end_date_filter"
            ],
            "description": "Filter receipts for transactions with a `user_transaction_time` before this date (ISO8601 format).",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "pagination_id",
              "last_entity_id"
            ],
            "description": "The ID of the last receipt from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_results_count",
              "page_results_size"
            ],
            "description": "The number of results per page, between 2 and 100. Defaults to 20 if unspecified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/receipts",
      "tags": [
        "Receipt"
      ],
      "summary": "List receipts",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "receipts:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "created_after",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter receipts created after this date (ISO8601 format)."
            },
            "description": "Filter receipts created after this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "created_before",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter receipts created before this date (ISO8601 format)."
            },
            "description": "Filter receipts created before this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "transaction_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter receipts for a specific transaction."
            },
            "description": "Filter receipts for a specific transaction.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter receipts for transactions with a `user_transaction_time` after this date (ISO8601 format)."
            },
            "description": "Filter receipts for transactions with a `user_transaction_time` after this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter receipts for transactions with a `user_transaction_time` before this date (ISO8601 format)."
            },
            "description": "Filter receipts for transactions with a `user_transaction_time` before this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_receipt_upload",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_receipt_image",
        "description": {
          "tagline": "Upload a receipt image and optionally link it to a transaction.",
          "detailed": "This tool uploads a receipt image to the Ramp service and can optionally associate it with a specific transaction by providing a transaction ID. If no transaction ID is provided, the service will attempt to match the receipt automatically. Use this tool when you need to manage receipts related to financial transactions."
        },
        "return_annotation": "Confirmation of receipt upload and transaction association.",
        "arguments": [
          {
            "name": "unique_idempotency_key",
            "alternative_names": [
              "uuid_prevent_duplicates",
              "unique_upload_key"
            ],
            "description": "Unique string to prevent duplicate uploads. Use a UUID for uniqueness.",
            "endpoint_argument_name": "idempotency_key"
          },
          {
            "name": "associated_user_id",
            "alternative_names": [
              "receipt_user_id",
              "transaction_user_id"
            ],
            "description": "ID of the user to be associated with the receipt for matching priority. Provide this to influence which transaction the receipt is matched with.",
            "endpoint_argument_name": "user_id"
          },
          {
            "name": "transaction_id",
            "alternative_names": [
              "trx_id",
              "transaction_identifier"
            ],
            "description": "ID of the transaction to link with the uploaded receipt. If not provided, automatic matching will be attempted based on context.",
            "endpoint_argument_name": "transaction_id"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/receipts",
      "tags": [
        "Receipt"
      ],
      "summary": "Upload a receipt",
      "description": "image and optionally associate it with a transaction.\n\nIf a `transaction_id` is provided, the receipt will be linked directly to that transaction. If not, Ramp will attempt to automatically match the receipt to the most relevant transaction based on context.\n\nThis endpoint accepts the [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) format.\n\nInclude the receipt image as a part with `Content-Disposition: attachment`. Include metadata as parts with `Content-Disposition: form-data`.",
      "requires_security": true,
      "oauth_scopes": [
        "receipts:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions)."
            },
            "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions).",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions)."
            },
            "schema_required": true
          },
          {
            "name": "transaction_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Transaction to attach to the uploaded receipt."
            },
            "description": "Transaction to attach to the uploaded receipt.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Transaction to attach to the uploaded receipt.",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "User to associate with the receipt (affects transaction matching priority)."
            },
            "description": "User to associate with the receipt (affects transaction matching priority).",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "User to associate with the receipt (affects transaction matching priority).",
              "format": "uuid"
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"idempotency_key\": \"0a0ed428-0250-4993-96ad-94cd77bc86b6\",\n          \"transaction_id\": \"01b7dc97-5b67-45a2-8b05-e4e078f3a722\",\n          \"user_id\": \"30ffb5d0-3021-4438-8253-25819d480237\"\n        },\n        \"properties\": {\n          \"idempotency_key\": {\n            \"description\": \"Unique value to prevent duplicate uploads (use a UUID to avoid collisions).\",\n            \"type\": \"string\"\n          },\n          \"transaction_id\": {\n            \"description\": \"Transaction to attach to the uploaded receipt.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"user_id\": {\n            \"description\": \"User to associate with the receipt (affects transaction matching priority).\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"user_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_receipt_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_receipt",
        "description": {
          "tagline": "Fetches details of a specified receipt.",
          "detailed": "Use this tool to retrieve the details of a receipt by providing the receipt ID. Ideal for accessing specific transaction information."
        },
        "return_annotation": "Details of a specific receipt.",
        "arguments": [
          {
            "name": "receipt_identifier",
            "alternative_names": [
              "receipt_id_value",
              "receipt_reference_number"
            ],
            "description": "The unique ID of the receipt to fetch. This is required to retrieve the correct receipt details.",
            "endpoint_argument_name": "receipt_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/receipts/{receipt_id}",
      "tags": [
        "Receipt"
      ],
      "summary": "Fetch a receipt",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "receipts:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "receipt_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_reimbursement_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_reimbursements",
        "description": {
          "tagline": "Retrieve a paginated list of reimbursements.",
          "detailed": "Use this tool to get a list of reimbursements. Supports pagination to navigate through large sets of data. Ideal for tracking expenses or auditing transactions."
        },
        "return_annotation": "A list of reimbursements with pagination support.",
        "arguments": [
          {
            "name": "filter_by_direction",
            "alternative_names": [
              "direction_filter",
              "filter_direction"
            ],
            "description": "Specify the direction of reimbursements to filter by. Options are BUSINESS_TO_USER (default) or USER_TO_BUSINESS (for repayments).",
            "endpoint_argument_name": "direction"
          },
          {
            "name": "filter_by_sync_status",
            "alternative_names": [
              "sync_status_filter",
              "sync_status_selection"
            ],
            "description": "Filter reimbursements by sync status. Options are NOT_SYNC_READY, SYNCED, or SYNC_READY.",
            "endpoint_argument_name": "sync_status"
          },
          {
            "name": "filter_by_transaction_date_after",
            "alternative_names": [
              "after_transaction_date",
              "from_transaction_date_filter"
            ],
            "description": "Specify a date to filter reimbursements by those with transaction dates after this date. Format: YYYY-MM-DD.",
            "endpoint_argument_name": "from_transaction_date"
          },
          {
            "name": "filter_before_transaction_date",
            "alternative_names": [
              "transaction_date_end",
              "max_transaction_date"
            ],
            "description": "Filter reimbursements by transaction date occurring before this date.",
            "endpoint_argument_name": "to_transaction_date"
          },
          {
            "name": "filter_awaiting_approval_by_user_id",
            "alternative_names": [
              "pending_approval_user_id",
              "approval_pending_user_id"
            ],
            "description": "Filter reimbursements awaiting approval by a specific user's ID.",
            "endpoint_argument_name": "awaiting_approval_by_user_id"
          },
          {
            "name": "filter_by_trip_id",
            "alternative_names": [
              "trip_identifier",
              "associated_trip_id"
            ],
            "description": "Filter reimbursements associated with a specific trip by providing the trip's unique identifier.",
            "endpoint_argument_name": "trip_id"
          },
          {
            "name": "filter_by_accounting_field_id",
            "alternative_names": [
              "accounting_selection_id",
              "accounting_field_selection_filter"
            ],
            "description": "Filter reimbursements by the unique accounting field selection ID on Ramp.",
            "endpoint_argument_name": "accounting_field_selection_id"
          },
          {
            "name": "filter_by_entity_id",
            "alternative_names": [
              "entity_id_filter",
              "business_entity_filter"
            ],
            "description": "Filter reimbursements by specifying a business entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_from_creation_date",
            "alternative_names": [
              "from_creation_date",
              "created_after_date"
            ],
            "description": "Filter reimbursements created after this date. Use the format YYYY-MM-DD.",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "filter_before_creation_date",
            "alternative_names": [
              "end_creation_date_filter",
              "max_creation_date"
            ],
            "description": "Filter reimbursements created before this date. Use ISO 8601 format (YYYY-MM-DD).",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "submitted_after_date",
            "alternative_names": [
              "submitted_after",
              "from_submission_date"
            ],
            "description": "Filter reimbursements submitted after this date. Expected format is YYYY-MM-DD.",
            "endpoint_argument_name": "from_submitted_at"
          },
          {
            "name": "filter_reimbursements_submitted_before_date",
            "alternative_names": [
              "submission_end_date_filter",
              "reimbursement_submission_cutoff_date"
            ],
            "description": "Filter reimbursements submitted before this specified date.",
            "endpoint_argument_name": "to_submitted_at"
          },
          {
            "name": "filter_synced_after_date",
            "alternative_names": [
              "sync_after_date_filter",
              "filter_date_synced_after"
            ],
            "description": "Filter reimbursements synced after the specified date. Provide the date in 'YYYY-MM-DD' format.",
            "endpoint_argument_name": "synced_after"
          },
          {
            "name": "filter_updated_after_date",
            "alternative_names": [
              "updated_after_date_filter",
              "reimbursements_updated_after"
            ],
            "description": "Specify a date to filter reimbursements updated after this date.",
            "endpoint_argument_name": "updated_after"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "start_page_token",
              "next_page_start_id"
            ],
            "description": "The ID of the last entity from the previous page to fetch the next page of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "items_per_page",
              "reimbursements_per_page"
            ],
            "description": "Specify the number of reimbursement records per page (2 to 100, default is 20).",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "filter_by_user_id",
            "alternative_names": [
              "user_identifier",
              "filter_user_id"
            ],
            "description": "Filter reimbursements by a specific user ID for targeted results.",
            "endpoint_argument_name": "user_id"
          },
          {
            "name": "filter_by_approval_status",
            "alternative_names": [
              "approval_status_filter",
              "approved_filter"
            ],
            "description": "Pass true to filter approved reimbursements, false for not approved. If not specified, returns all.",
            "endpoint_argument_name": "has_been_approved"
          },
          {
            "name": "filter_sync_ready",
            "alternative_names": [
              "sync_ready_filtering",
              "sync_status_filter"
            ],
            "description": "Set to true to filter reimbursements that are ready to sync to ERP systems.",
            "endpoint_argument_name": "sync_ready"
          },
          {
            "name": "filter_unsynced_reimbursements",
            "alternative_names": [
              "unsynced_reimbursements_filter",
              "filter_without_sync_commits"
            ],
            "description": "Set to true to filter reimbursements that haven't been synced to ERP systems.",
            "endpoint_argument_name": "has_no_sync_commits"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/reimbursements",
      "tags": [
        "Reimbursement"
      ],
      "summary": "List reimbursements",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "reimbursements:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "direction",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "BUSINESS_TO_USER",
                "USER_TO_BUSINESS"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by direction (BUSINESS_TO_USER default, USER_TO_BUSINESS for repayments)."
            },
            "description": "Filter by direction (BUSINESS_TO_USER default, USER_TO_BUSINESS for repayments).",
            "required": false,
            "deprecated": false,
            "default": "BUSINESS_TO_USER",
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "BUSINESS_TO_USER",
                "USER_TO_BUSINESS"
              ]
            },
            "schema_required": false
          },
          {
            "name": "sync_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by sync status. Supersedes has_no_sync_commits and sync_ready."
            },
            "description": "Filter by sync status. Supersedes has_no_sync_commits and sync_ready.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ]
            },
            "schema_required": false
          },
          {
            "name": "from_transaction_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by underlying transaction date (after this date)."
            },
            "description": "Filter by underlying transaction date (after this date).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_transaction_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by underlying transaction date (before this date)."
            },
            "description": "Filter by underlying transaction date (before this date).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "awaiting_approval_by_user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for reimbursements awaiting approval by a specific user."
            },
            "description": "Filter for reimbursements awaiting approval by a specific user.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "has_been_approved",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for reimbursements that are approved or not approved.  If not specified, returns all reimbursements."
            },
            "description": "Filter for reimbursements that are approved or not approved.  If not specified, returns all reimbursements.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "trip_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements associated with a specific trip."
            },
            "description": "Filter reimbursements associated with a specific trip.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "accounting_field_selection_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements by accounting field selection. This ID uniquely identifies an accounting field selection on Ramp."
            },
            "description": "Filter reimbursements by accounting field selection. This ID uniquely identifies an accounting field selection on Ramp.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements by business entity."
            },
            "description": "Filter reimbursements by business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements created after this date."
            },
            "description": "Filter reimbursements created after this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements created before this date."
            },
            "description": "Filter reimbursements created before this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "from_submitted_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements submitted after this date."
            },
            "description": "Filter reimbursements submitted after this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_submitted_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements submitted before this date."
            },
            "description": "Filter reimbursements submitted before this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "synced_after",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements synced after this date."
            },
            "description": "Filter reimbursements synced after this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "sync_ready",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements that are ready to sync to ERP systems."
            },
            "description": "Filter reimbursements that are ready to sync to ERP systems.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "has_no_sync_commits",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements that haven't been synced to ERP systems."
            },
            "description": "Filter reimbursements that haven't been synced to ERP systems.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "updated_after",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter reimbursements updated after this date."
            },
            "description": "Filter reimbursements updated after this date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_mileage_reimbursement_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_mileage_reimbursement",
        "description": {
          "tagline": "Create a mileage reimbursement entry.",
          "detailed": "Use this tool to create a mileage reimbursement entry when mileage needs to be compensated. This is useful for generating records for reimbursements based on travel mileage."
        },
        "return_annotation": "Mileage reimbursement creation confirmation.",
        "arguments": [
          {
            "name": "mileage_reimbursement_details",
            "alternative_names": [
              "mileage_details",
              "reimbursement_data"
            ],
            "description": "JSON object containing mileage reimbursement details such as distance, distance units (KILOMETERS or MILES), start and end locations, waypoints as an array of strings, trip date, reimbursee ID, and memo.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/reimbursements/mileage",
      "tags": [
        "Reimbursement"
      ],
      "summary": "Create a mileage reimbursement",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "reimbursements:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "distance": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "distance_units": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "KILOMETERS",
                    "MILES"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "end_location": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "memo": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "reimbursee_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "start_location": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "trip_date": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                },
                "waypoints": {
                  "val_type": "array",
                  "inner_val_type": "string",
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": null
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "distance": {
                  "type": "object",
                  "properties": {},
                  "oneOf": [
                    {
                      "type": "string",
                      "format": "decimal"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "distance_units": {
                  "type": "string",
                  "enum": [
                    "KILOMETERS",
                    "MILES"
                  ]
                },
                "end_location": {
                  "type": "string"
                },
                "memo": {
                  "type": "string"
                },
                "reimbursee_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "start_location": {
                  "type": "string"
                },
                "trip_date": {
                  "type": "string",
                  "format": "date"
                },
                "waypoints": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "distance",
                "reimbursee_id",
                "trip_date"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"distance\": 125.5,\n          \"distance_units\": \"MILES\",\n          \"end_location\": \"456 Business Ave, Philadelphia, PA 19103\",\n          \"memo\": \"Client meeting in downtown office\",\n          \"reimbursee_id\": \"7979392e-8d41-4f97-815b-ccd7584802bf\",\n          \"start_location\": \"123 Main St, Scranton, PA 18503\",\n          \"trip_date\": \"2023-08-19\",\n          \"waypoints\": [\n            \"321 Rest Area Dr, King of Prussia, PA 19406\",\n            \"789 Highway Stop, Allentown, PA 18101\"\n          ]\n        },\n        \"properties\": {\n          \"distance\": {\n            \"oneOf\": [\n              {\n                \"format\": \"decimal\",\n                \"type\": \"string\"\n              },\n              {\n                \"type\": \"number\"\n              }\n            ]\n          },\n          \"distance_units\": {\n            \"enum\": [\n              \"KILOMETERS\",\n              \"MILES\"\n            ],\n            \"type\": \"string\"\n          },\n          \"end_location\": {\n            \"type\": \"string\"\n          },\n          \"memo\": {\n            \"type\": \"string\"\n          },\n          \"reimbursee_id\": {\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"start_location\": {\n            \"type\": \"string\"\n          },\n          \"trip_date\": {\n            \"format\": \"date\",\n            \"type\": \"string\"\n          },\n          \"waypoints\": {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"distance\",\n          \"reimbursee_id\",\n          \"trip_date\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "post_reimbursement_receipt_upload",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "upload_reimbursement_receipt",
        "description": {
          "tagline": "Uploads a receipt for reimbursement processing.",
          "detailed": "Use this tool to upload a receipt for a reimbursement. If a `reimbursement_id` is provided, the receipt is linked to that reimbursement. Otherwise, a draft reimbursement is created via OCR."
        },
        "return_annotation": "Confirmation of receipt upload status.",
        "arguments": [
          {
            "name": "unique_idempotency_key",
            "alternative_names": [
              "duplicate_prevention_key",
              "upload_unique_identifier"
            ],
            "description": "Unique value to prevent duplicate uploads. Use a UUID to ensure uniqueness and avoid collisions.",
            "endpoint_argument_name": "idempotency_key"
          },
          {
            "name": "user_id_for_reimbursement",
            "alternative_names": [
              "reimburse_user_id",
              "reimbursement_user_uuid"
            ],
            "description": "UUID of the user for whom the reimbursement is to be created.",
            "endpoint_argument_name": "reimbursee_id"
          },
          {
            "name": "existing_reimbursement_id",
            "alternative_names": [
              "reimbursement_uuid",
              "attach_to_reimbursement_id"
            ],
            "description": "Optional UUID of an existing reimbursement to attach the receipt to. If not provided, a new draft will be created via OCR.",
            "endpoint_argument_name": "reimbursement_id"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/reimbursements/submit-receipt",
      "tags": [
        "Reimbursement"
      ],
      "summary": "Upload a receipt for a reimbursement",
      "description": "If a `reimbursement_id` is provided, the receipt will be linked directly to that reimbursement. If not, Ramp will attempt to automatically create a draft reimbursement via OCR.\n\nThis endpoint accepts the [multipart/form-data](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) format.\n\nInclude the receipt image as a part with `Content-Disposition: attachment`. Include metadata as parts with `Content-Disposition: form-data`.",
      "requires_security": true,
      "oauth_scopes": [
        "reimbursements:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions)."
            },
            "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions).",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique value to prevent duplicate uploads (use a UUID to avoid collisions)."
            },
            "schema_required": true
          },
          {
            "name": "reimbursee_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "UUID of the user to create the reimbursement for."
            },
            "description": "UUID of the user to create the reimbursement for.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "UUID of the user to create the reimbursement for.",
              "format": "uuid"
            },
            "schema_required": true
          },
          {
            "name": "reimbursement_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Optional UUID of existing reimbursement to attach receipt to. If not provided, a new draft reimbursement will be created via OCR."
            },
            "description": "Optional UUID of existing reimbursement to attach receipt to. If not provided, a new draft reimbursement will be created via OCR.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Optional UUID of existing reimbursement to attach receipt to. If not provided, a new draft reimbursement will be created via OCR.",
              "format": "uuid"
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"idempotency_key\": \"0a0ed428-0250-4993-96ad-94cd77bc86b6\",\n          \"reimbursee_id\": \"30ffb5d0-3021-4438-8253-25819d480237\",\n          \"reimbursement_id\": \"01b7dc97-5b67-45a2-8b05-e4e078f3a722\"\n        },\n        \"properties\": {\n          \"idempotency_key\": {\n            \"description\": \"Unique value to prevent duplicate uploads (use a UUID to avoid collisions).\",\n            \"type\": \"string\"\n          },\n          \"reimbursee_id\": {\n            \"description\": \"UUID of the user to create the reimbursement for.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"reimbursement_id\": {\n            \"description\": \"Optional UUID of existing reimbursement to attach receipt to. If not provided, a new draft reimbursement will be created via OCR.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"reimbursee_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_reimbursement_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_reimbursement",
        "description": {
          "tagline": "Fetch details of a reimbursement request.",
          "detailed": "Use this tool to retrieve detailed information about a specific reimbursement request by providing the reimbursement ID."
        },
        "return_annotation": "Details of a specific reimbursement request.",
        "arguments": [
          {
            "name": "reimbursement_id",
            "alternative_names": [
              "reimbursement_identifier",
              "reimbursement_request_id"
            ],
            "description": "The unique identifier for the reimbursement request you want to fetch. This should be the ID that uniquely represents a particular reimbursement.",
            "endpoint_argument_name": "reimbursement_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/reimbursements/{reimbursement_id}",
      "tags": [
        "Reimbursement"
      ],
      "summary": "Fetch a reimbursement",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "reimbursements:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "reimbursement_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_spend_program_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_spend_programs",
        "description": {
          "tagline": "Retrieve a list of available spend programs.",
          "detailed": "This tool fetches and returns a list of all available spend programs. It should be called when there's a need to view or manage current spend programs."
        },
        "return_annotation": "A list of spend programs available.",
        "arguments": [
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_entity_id",
              "previous_page_last_id"
            ],
            "description": "The ID for starting pagination from the last entity of the previous page.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "items_per_page",
              "number_of_results"
            ],
            "description": "Specify the number of results per page, between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/spend-programs",
      "tags": [
        "Spend Program"
      ],
      "summary": "List spend programs",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "spend_programs:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_spend_program_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_spend_program",
        "description": {
          "tagline": "Create a spend program to manage expenses.",
          "detailed": "This tool is used to create a new spend program, helping in organizing and managing expenses. It should be called when there is a need to set up a structured spending plan."
        },
        "return_annotation": "Confirmation of spend program creation.",
        "arguments": [
          {
            "name": "spend_program_details",
            "alternative_names": [
              "spend_program_configuration",
              "spend_program_setup"
            ],
            "description": "JSON object containing details such as description, display name, icon, shareability, issuance rules, card issuance preference, spend types, and restrictions for the spend program.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/spend-programs",
      "tags": [
        "Spend Program"
      ],
      "summary": "Create a spend program",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "spend_programs:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "description": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Description of the spend program."
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Display name of the spend program."
                },
                "icon": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": [
                    "AccountingServicesIcon",
                    "AdvertisingIcon",
                    "CONTRACTORS_AND_PROFESSIONAL_SERVICES",
                    "CUSTOM",
                    "CardIcon",
                    "EducationStipendIcon",
                    "EmployeeRewardsIcon",
                    "GroundTransportationIcon",
                    "LegalFeesIcon",
                    "LodgingIcon",
                    "LunchOrderingIcon",
                    "OnboardingIcon",
                    "PerDiemCardIcon",
                    "SOFTWARE",
                    "SaasSubscriptionIcon",
                    "SoftwareTrialIcon",
                    "SuppliesIcon",
                    "TeamSocialIcon",
                    "TravelExpensesIcon",
                    "VirtualEventIcon",
                    "WellnessIcon",
                    "WorkFromHomeIcon",
                    "advertising",
                    "airlines",
                    "bills",
                    "business",
                    "car_services",
                    "contractor",
                    "education",
                    "entertainment",
                    "event_balloons",
                    "event_virtual",
                    "food",
                    "fuel_and_gas",
                    "general_expense",
                    "general_merchandise",
                    "gift",
                    "government_services",
                    "internet_and_phone",
                    "legal",
                    "lodging",
                    "lodging_room",
                    "newspaper",
                    "office",
                    "physical_card",
                    "procurement_checklist",
                    "procurement_intake",
                    "professional_services",
                    "restaurants",
                    "reward",
                    "saas_software",
                    "shipping",
                    "travel_misc",
                    "wellness"
                  ],
                  "properties": null,
                  "inner_properties": null,
                  "description": "The template icon for the spend program."
                },
                "is_shareable": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Dictates whether the spend program is shareable among multiple users."
                },
                "issuance_rules": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic."
                },
                "issue_physical_card_if_needed": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Dictates whether the spend program should issue a physical card if the user does not have one."
                },
                "permitted_spend_types": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specifies the permitted spend types for the spend program."
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "A set of restrictions imposed on the spend program."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Description of the spend program."
                },
                "display_name": {
                  "type": "string",
                  "description": "Display name of the spend program."
                },
                "icon": {
                  "type": "string",
                  "description": "The template icon for the spend program.",
                  "enum": [
                    "AccountingServicesIcon",
                    "AdvertisingIcon",
                    "CONTRACTORS_AND_PROFESSIONAL_SERVICES",
                    "CUSTOM",
                    "CardIcon",
                    "EducationStipendIcon",
                    "EmployeeRewardsIcon",
                    "GroundTransportationIcon",
                    "LegalFeesIcon",
                    "LodgingIcon",
                    "LunchOrderingIcon",
                    "OnboardingIcon",
                    "PerDiemCardIcon",
                    "SOFTWARE",
                    "SaasSubscriptionIcon",
                    "SoftwareTrialIcon",
                    "SuppliesIcon",
                    "TeamSocialIcon",
                    "TravelExpensesIcon",
                    "VirtualEventIcon",
                    "WellnessIcon",
                    "WorkFromHomeIcon",
                    "advertising",
                    "airlines",
                    "bills",
                    "business",
                    "car_services",
                    "contractor",
                    "education",
                    "entertainment",
                    "event_balloons",
                    "event_virtual",
                    "food",
                    "fuel_and_gas",
                    "general_expense",
                    "general_merchandise",
                    "gift",
                    "government_services",
                    "internet_and_phone",
                    "legal",
                    "lodging",
                    "lodging_room",
                    "newspaper",
                    "office",
                    "physical_card",
                    "procurement_checklist",
                    "procurement_intake",
                    "professional_services",
                    "restaurants",
                    "reward",
                    "saas_software",
                    "shipping",
                    "travel_misc",
                    "wellness"
                  ]
                },
                "is_shareable": {
                  "type": "boolean",
                  "description": "Dictates whether the spend program is shareable among multiple users."
                },
                "issuance_rules": {
                  "type": "object",
                  "description": "Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "type": "object",
                          "description": "Set of rules for having spend programs issued by default to users",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "applies_to_all": {
                                  "type": "boolean",
                                  "description": "Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null)."
                                },
                                "department_ids": {
                                  "type": "array",
                                  "description": "List of departments whose users are able to request or be issued this spend program.",
                                  "items": {
                                    "type": "string",
                                    "format": "uuid"
                                  }
                                },
                                "location_ids": {
                                  "type": "array",
                                  "description": "List of locations whose users are able to request or be issued this spend program.",
                                  "items": {
                                    "type": "string",
                                    "format": "uuid"
                                  }
                                },
                                "user_custom_field_ids": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "format": "uuid"
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "requestable": {
                          "type": "object",
                          "description": "Set of rules for users requesting spend programs.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "applies_to_all": {
                                  "type": "boolean",
                                  "description": "Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null)."
                                },
                                "department_ids": {
                                  "type": "array",
                                  "description": "List of departments whose users are able to request or be issued this spend program.",
                                  "items": {
                                    "type": "string",
                                    "format": "uuid"
                                  }
                                },
                                "location_ids": {
                                  "type": "array",
                                  "description": "List of locations whose users are able to request or be issued this spend program.",
                                  "items": {
                                    "type": "string",
                                    "format": "uuid"
                                  }
                                },
                                "user_custom_field_ids": {
                                  "type": "array",
                                  "items": {
                                    "type": "string",
                                    "format": "uuid"
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "issue_physical_card_if_needed": {
                  "type": "boolean",
                  "description": "Dictates whether the spend program should issue a physical card if the user does not have one."
                },
                "permitted_spend_types": {
                  "type": "object",
                  "description": "Specifies the permitted spend types for the spend program.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "primary_card_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether the user's physical card can be linked to this limit."
                        },
                        "reimbursements_enabled": {
                          "type": "boolean",
                          "description": "Dictates whether reimbursements can be submitted against this limit."
                        }
                      },
                      "required": [
                        "primary_card_enabled",
                        "reimbursements_enabled"
                      ]
                    }
                  ]
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "A set of restrictions imposed on the spend program.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allowed_categories": {
                          "type": "array",
                          "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "allowed_vendors": {
                          "type": "array",
                          "description": "List of merchants allowed for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "blocked_categories": {
                          "type": "array",
                          "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "blocked_vendors": {
                          "type": "array",
                          "description": "List of merchants  blocked for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "limit": {
                          "type": "object",
                          "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
                          "format": "date-time"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "interval",
                        "limit"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "description",
                "display_name",
                "icon",
                "permitted_spend_types",
                "spending_restrictions"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"properties\": {\n          \"description\": {\n            \"description\": \"Description of the spend program.\",\n            \"type\": \"string\"\n          },\n          \"display_name\": {\n            \"description\": \"Display name of the spend program.\",\n            \"type\": \"string\"\n          },\n          \"icon\": {\n            \"description\": \"The template icon for the spend program.\",\n            \"enum\": [\n              \"AccountingServicesIcon\",\n              \"AdvertisingIcon\",\n              \"CONTRACTORS_AND_PROFESSIONAL_SERVICES\",\n              \"CUSTOM\",\n              \"CardIcon\",\n              \"EducationStipendIcon\",\n              \"EmployeeRewardsIcon\",\n              \"GroundTransportationIcon\",\n              \"LegalFeesIcon\",\n              \"LodgingIcon\",\n              \"LunchOrderingIcon\",\n              \"OnboardingIcon\",\n              \"PerDiemCardIcon\",\n              \"SOFTWARE\",\n              \"SaasSubscriptionIcon\",\n              \"SoftwareTrialIcon\",\n              \"SuppliesIcon\",\n              \"TeamSocialIcon\",\n              \"TravelExpensesIcon\",\n              \"VirtualEventIcon\",\n              \"WellnessIcon\",\n              \"WorkFromHomeIcon\",\n              \"advertising\",\n              \"airlines\",\n              \"bills\",\n              \"business\",\n              \"car_services\",\n              \"contractor\",\n              \"education\",\n              \"entertainment\",\n              \"event_balloons\",\n              \"event_virtual\",\n              \"food\",\n              \"fuel_and_gas\",\n              \"general_expense\",\n              \"general_merchandise\",\n              \"gift\",\n              \"government_services\",\n              \"internet_and_phone\",\n              \"legal\",\n              \"lodging\",\n              \"lodging_room\",\n              \"newspaper\",\n              \"office\",\n              \"physical_card\",\n              \"procurement_checklist\",\n              \"procurement_intake\",\n              \"professional_services\",\n              \"restaurants\",\n              \"reward\",\n              \"saas_software\",\n              \"shipping\",\n              \"travel_misc\",\n              \"wellness\"\n            ],\n            \"type\": \"string\"\n          },\n          \"is_shareable\": {\n            \"default\": false,\n            \"description\": \"Dictates whether the spend program is shareable among multiple users.\",\n            \"type\": \"boolean\"\n          },\n          \"issuance_rules\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"automatic\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"applies_to_all\": {\n                            \"default\": false,\n                            \"description\": \"Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null).\",\n                            \"type\": \"boolean\"\n                          },\n                          \"department_ids\": {\n                            \"description\": \"List of departments whose users are able to request or be issued this spend program.\",\n                            \"items\": {\n                              \"format\": \"uuid\",\n                              \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                          },\n                          \"location_ids\": {\n                            \"description\": \"List of locations whose users are able to request or be issued this spend program.\",\n                            \"items\": {\n                              \"format\": \"uuid\",\n                              \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                          },\n                          \"user_custom_field_ids\": {\n                            \"items\": {\n                              \"format\": \"uuid\",\n                              \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Set of rules for having spend programs issued by default to users\",\n                    \"nullable\": true\n                  },\n                  \"requestable\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"applies_to_all\": {\n                            \"default\": false,\n                            \"description\": \"Dictates whether this rule should apply to all employees or not (if True, location_ids, department_ids, and user_custom_field_ids should be null).\",\n                            \"type\": \"boolean\"\n                          },\n                          \"department_ids\": {\n                            \"description\": \"List of departments whose users are able to request or be issued this spend program.\",\n                            \"items\": {\n                              \"format\": \"uuid\",\n                              \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                          },\n                          \"location_ids\": {\n                            \"description\": \"List of locations whose users are able to request or be issued this spend program.\",\n                            \"items\": {\n                              \"format\": \"uuid\",\n                              \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                          },\n                          \"user_custom_field_ids\": {\n                            \"items\": {\n                              \"format\": \"uuid\",\n                              \"type\": \"string\"\n                            },\n                            \"type\": \"array\"\n                          }\n                        },\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Set of rules for users requesting spend programs.\",\n                    \"nullable\": true\n                  }\n                },\n                \"type\": \"object\"\n              }\n            ],\n            \"default\": null,\n            \"description\": \"Spend Program Issuance Rules can be set for requests or default issuance of Limits from a program. Set whether a program is requestable or issued by default for a given set of users and their attributes (department, locations, and custom fields). If you'd like to give these permissions to all employees, you can set `applies_to_all` to `True`. Feel free to ignore this if you don't want any custom requestability or issuance logic.\",\n            \"nullable\": true\n          },\n          \"issue_physical_card_if_needed\": {\n            \"default\": false,\n            \"description\": \"Dictates whether the spend program should issue a physical card if the user does not have one.\",\n            \"type\": \"boolean\"\n          },\n          \"permitted_spend_types\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"primary_card_enabled\": {\n                    \"description\": \"Dictates whether the user's physical card can be linked to this limit.\",\n                    \"type\": \"boolean\"\n                  },\n                  \"reimbursements_enabled\": {\n                    \"description\": \"Dictates whether reimbursements can be submitted against this limit.\",\n                    \"type\": \"boolean\"\n                  }\n                },\n                \"required\": [\n                  \"primary_card_enabled\",\n                  \"reimbursements_enabled\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the permitted spend types for the spend program.\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"allowed_categories\": {\n                    \"description\": \" List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"allowed_vendors\": {\n                    \"description\": \"List of merchants allowed for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_categories\": {\n                    \"description\": \"List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_vendors\": {\n                    \"description\": \"List of merchants  blocked for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  }\n                },\n                \"required\": [\n                  \"interval\",\n                  \"limit\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"A set of restrictions imposed on the spend program.\"\n          }\n        },\n        \"required\": [\n          \"description\",\n          \"display_name\",\n          \"icon\",\n          \"permitted_spend_types\",\n          \"spending_restrictions\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_spend_program_single_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_spend_program",
        "description": {
          "tagline": "Fetches details of a specific spend program using its ID.",
          "detailed": "This tool retrieves information about a specific spend program by using its unique identifier. It should be called when details about the program are needed, such as in financial reporting or management tasks."
        },
        "return_annotation": "Details of a specific spend program.",
        "arguments": [
          {
            "name": "spend_program_identifier",
            "alternative_names": [
              "program_id",
              "sp_id"
            ],
            "description": "The unique identifier for the spend program to fetch details for.",
            "endpoint_argument_name": "spend_program_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/spend-programs/{spend_program_id}",
      "tags": [
        "Spend Program"
      ],
      "summary": "Fetch a spend program",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "spend_programs:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "spend_program_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_statement_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_statements_with_pagination",
        "description": {
          "tagline": "Retrieve and list financial statements with pagination.",
          "detailed": "Use this tool to obtain a list of financial statements, supporting pagination for easier data management. It's helpful for users needing detailed or summarized financial records."
        },
        "return_annotation": "A list of financial statements with pagination details.",
        "arguments": [
          {
            "name": "filter_from_date",
            "alternative_names": [
              "start_date_filter",
              "begin_date_filter"
            ],
            "description": "Filter statements with end_date on or after this date. Use ISO8601 format (e.g., '2023-01-01').",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "end_date_before",
            "alternative_names": [
              "statement_end_before",
              "filter_end_before"
            ],
            "description": "Filter statements with an end_date on or before this date (ISO8601 format). Defaults to the current time if not provided.",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "previous_page_last_id",
              "last_entity_id"
            ],
            "description": "ID of the last entity from the previous page to retrieve the next page.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "number_of_results_per_page",
              "items_per_page"
            ],
            "description": "Specify the number of results per page. Must be between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/statements",
      "tags": [
        "Statement"
      ],
      "summary": "List statements",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "statements:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter statements with end_date on or after this date (ISO8601 format)."
            },
            "description": "Filter statements with end_date on or after this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": "1970-01-01T00:00:00+00:00",
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter statements with end_date on or before this date (ISO8601 format). Defaults to current time."
            },
            "description": "Filter statements with end_date on or before this date (ISO8601 format). Defaults to current time.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_statement_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_statement",
        "description": {
          "tagline": "Fetch detailed information about a specific statement.",
          "detailed": "Use this tool to retrieve a statement by its ID. Ideal for viewing billing or transaction details."
        },
        "return_annotation": "Detailed information about a specific statement.",
        "arguments": [
          {
            "name": "statement_identifier",
            "alternative_names": [
              "statement_id_value",
              "id_for_statement"
            ],
            "description": "The unique identifier for the statement to be fetched. It should be a string matching the statement's ID.",
            "endpoint_argument_name": "statement_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/statements/{statement_id}",
      "tags": [
        "Statement"
      ],
      "summary": "Fetch a statement",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "statements:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "statement_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_transactions_canonical_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": false,
      "should_skip": true,
      "skip_reason": "Complex objects in non-body parameters: query parameter 'min_amount', query parameter 'max_amount'",
      "wrapper_tool": null,
      "method": "GET",
      "path": "/developer/v1/transactions",
      "tags": [
        "Transaction"
      ],
      "summary": "List transactions",
      "description": "This endpoint supports filtering and ordering. If state is not set, all transactions except declined transactions will be returned. Note that setting multiple ordering parameters is unsupported.",
      "requires_security": true,
      "oauth_scopes": [
        "transactions:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "sk_category_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by a Ramp category code (integer)."
            },
            "description": "Filter by a Ramp category code (integer).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by department."
            },
            "description": "Filter by department.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "limit_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by limit."
            },
            "description": "Filter by limit.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by location."
            },
            "description": "Filter by location.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "merchant_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by merchant."
            },
            "description": "Filter by merchant.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "card_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by physical card."
            },
            "description": "Filter by physical card.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "spend_program_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by spend program."
            },
            "description": "Filter by spend program.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "statement_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by statement."
            },
            "description": "Filter by statement.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "approval_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "AWAITING_EMPLOYEE",
                "AWAITING_EMPLOYEE_CHANGES_REQUESTED",
                "AWAITING_EMPLOYEE_MISSING_ITEMS",
                "AWAITING_EMPLOYEE_REPAYMENT_FAILED",
                "AWAITING_EMPLOYEE_REPAYMENT_REQUESTED",
                "AWAITING_REVIEWER",
                "FULLY_APPROVED"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by transaction approval status."
            },
            "description": "Filter by transaction approval status.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "AWAITING_EMPLOYEE",
                "AWAITING_EMPLOYEE_CHANGES_REQUESTED",
                "AWAITING_EMPLOYEE_MISSING_ITEMS",
                "AWAITING_EMPLOYEE_REPAYMENT_FAILED",
                "AWAITING_EMPLOYEE_REPAYMENT_REQUESTED",
                "AWAITING_REVIEWER",
                "FULLY_APPROVED"
              ]
            },
            "schema_required": false
          },
          {
            "name": "state",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "ALL",
                "CLEARED",
                "COMPLETION",
                "DECLINED",
                "ERROR",
                "PENDING",
                "PENDING_INITIATION"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by transaction state. If set to 'ALL', all transactions including 'DECLINED' will be listed."
            },
            "description": "Filter by transaction state. If set to 'ALL', all transactions including 'DECLINED' will be listed.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "ALL",
                "CLEARED",
                "COMPLETION",
                "DECLINED",
                "ERROR",
                "PENDING",
                "PENDING_INITIATION"
              ]
            },
            "schema_required": false
          },
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by user."
            },
            "description": "Filter by user.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "awaiting_approval_by_user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions awaiting approval by a specific user."
            },
            "description": "Filter for transactions awaiting approval by a specific user.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "sync_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions by sync status. If set, it supersedes sync_ready and has_no_sync_commits"
            },
            "description": "Filter for transactions by sync status. If set, it supersedes sync_ready and has_no_sync_commits",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ]
            },
            "schema_required": false
          },
          {
            "name": "has_been_approved",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that are approved or not approved. If not specified, returns all transactions."
            },
            "description": "Filter for transactions that are approved or not approved. If not specified, returns all transactions.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "all_requirements_met_and_approved",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that are fully approved and all cardholder requirements met such as receipts, memos, tracking categories. If not specified, returns all transactions."
            },
            "description": "Filter for transactions that are fully approved and all cardholder requirements met such as receipts, memos, tracking categories. If not specified, returns all transactions.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "has_statement",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that have a statement or do not have a statement. If not specified, returns all transactions."
            },
            "description": "Filter for transactions that have a statement or do not have a statement. If not specified, returns all transactions.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "synced_after",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that have been synced after the given date."
            },
            "description": "Filter for transactions that have been synced after the given date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "min_amount",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount."
            },
            "description": "Filter for transactions that have larger amount that the given amount. This is a U.S. Dollar denominated amount.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "object",
              "properties": {},
              "oneOf": [
                {
                  "type": "string",
                  "format": "decimal"
                },
                {
                  "type": "number"
                }
              ]
            },
            "schema_required": false
          },
          {
            "name": "has_no_sync_commits",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that have not been synced to ERP systems yet."
            },
            "description": "Filter for transactions that have not been synced to ERP systems yet.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "max_amount",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount."
            },
            "description": "Filter for transactions that have smaller amount that the given amount. This is a U.S. Dollar denominated amount.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "object",
              "properties": {},
              "oneOf": [
                {
                  "type": "string",
                  "format": "decimal"
                },
                {
                  "type": "number"
                }
              ]
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions with a `user_transaction_time` after the given date."
            },
            "description": "Filter for transactions with a `user_transaction_time` after the given date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for transactions with a `user_transaction_time` before the given date."
            },
            "description": "Filter for transactions with a `user_transaction_time` before the given date.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "trip_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter for trip ID."
            },
            "description": "Filter for trip ID.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "accounting_field_selection_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transactions by accounting field selection. This ID uniquely identifies an accounting field selection on Ramp."
            },
            "description": "Filter transactions by accounting field selection. This ID uniquely identifies an accounting field selection on Ramp.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transactions by business entity."
            },
            "description": "Filter transactions by business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "requires_memo",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filters for transactions which require a memo, but do not have one. This can only be set to true."
            },
            "description": "Filters for transactions which require a memo, but do not have one. This can only be set to true.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "include_merchant_data",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Include all purchase data provided by the merchant."
            },
            "description": "Include all purchase data provided by the merchant.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "order_by_date_asc",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Sort transactions by `user_transaction_date` in ascending order."
            },
            "description": "Sort transactions by `user_transaction_date` in ascending order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "order_by_date_desc",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Sort transactions by `user_transaction_date` in descending order."
            },
            "description": "Sort transactions by `user_transaction_date` in descending order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "order_by_amount_asc",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Sort transactions by amount in ascending order."
            },
            "description": "Sort transactions by amount in ascending order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "order_by_amount_desc",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Sort transactions by amount in descending order."
            },
            "description": "Sort transactions by amount in descending order.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "sync_ready",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "This field has been deprecated in favor of using the sync_status filter with SYNC_READY. Filter for transactions that are coded with accounting fields and ready to sync to ERP systems. Behavior may diverge from the equivalent in-app filter."
            },
            "description": "This field has been deprecated in favor of using the sync_status filter with SYNC_READY. Filter for transactions that are coded with accounting fields and ready to sync to ERP systems. Behavior may diverge from the equivalent in-app filter.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_transaction_canonical_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_transaction_details",
        "description": {
          "tagline": "Fetch detailed information about a transaction.",
          "detailed": "This tool retrieves the canonical resource details for a transaction specified by its ID. It should be called when you need comprehensive information about a particular transaction."
        },
        "return_annotation": "Detailed information about a specific transaction.",
        "arguments": [
          {
            "name": "transaction_id",
            "alternative_names": [
              "txn_identifier",
              "transaction_reference_id"
            ],
            "description": "A unique identifier for the transaction to fetch its detailed information.",
            "endpoint_argument_name": "transaction_id"
          },
          {
            "name": "include_merchant_data",
            "alternative_names": [
              "include_merchant_info",
              "fetch_merchant_data"
            ],
            "description": "Include all purchase data provided by the merchant when set to true.",
            "endpoint_argument_name": "include_merchant_data"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/transactions/{transaction_id}",
      "tags": [
        "Transaction"
      ],
      "summary": "Fetch a transaction",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "transactions:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "include_merchant_data",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Include all purchase data provided by the merchant"
            },
            "description": "Include all purchase data provided by the merchant",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          }
        ],
        "path": [
          {
            "name": "transaction_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_transfer_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_transfer_list",
        "description": {
          "tagline": "Retrieve a paginated list of transfers.",
          "detailed": "Use this tool to get a list of financial transfers, including pagination details for navigating large datasets. It helps in checking transaction histories and managing transfer records."
        },
        "return_annotation": "List of transfers with pagination details.",
        "arguments": [
          {
            "name": "filter_by_sync_status",
            "alternative_names": [
              "sync_status_filter",
              "sync_status_selector"
            ],
            "description": "Specify the sync status to filter transfers. Options: NOT_SYNC_READY, SYNCED, SYNC_READY.",
            "endpoint_argument_name": "sync_status"
          },
          {
            "name": "transfer_status_filter",
            "alternative_names": [
              "status_filter",
              "filter_by_status"
            ],
            "description": "Specify the status to filter transfers by, using predefined status codes. Accepts values such as 'ACH_CONFIRMED', 'CANCELED', 'COMPLETED', etc.",
            "endpoint_argument_name": "status"
          },
          {
            "name": "business_entity_id",
            "alternative_names": [
              "entity_identifier",
              "company_id"
            ],
            "description": "Filter transfers based on the specified business entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_by_statement_id",
            "alternative_names": [
              "statement_filter_id",
              "statement_identifier"
            ],
            "description": "Include only transfers associated with the specified statement ID.",
            "endpoint_argument_name": "statement_id"
          },
          {
            "name": "filter_from_date",
            "alternative_names": [
              "start_date_filter",
              "initial_date_filter"
            ],
            "description": "Specify the date to filter transfers that occurred after this date, in ISO8601 format.",
            "endpoint_argument_name": "from_date"
          },
          {
            "name": "filter_transfers_before_date",
            "alternative_names": [
              "end_date_filter",
              "before_date_transfer_filter"
            ],
            "description": "Filter transfers that occurred before this date (in ISO8601 format).",
            "endpoint_argument_name": "to_date"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "pagination_cursor",
              "next_page_start_id"
            ],
            "description": "The ID of the last entity on the previous page to fetch the next set of results in pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_result_count",
              "items_per_page"
            ],
            "description": "Specify the number of results per page, between 2 and 100. Defaults to 20 if unspecified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "filter_unsynced_transfers",
            "alternative_names": [
              "unsynced_transfers_only",
              "exclude_synced_transfers"
            ],
            "description": "Filter transfers that have not been synced when set to true.",
            "endpoint_argument_name": "has_no_sync_commits"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/transfers",
      "tags": [
        "Transfer Payment"
      ],
      "summary": "List transfer payments",
      "description": "For information on how to use this endpoint, refer to the [Transfers Guide](/developer-api/v1/guides/transfers).",
      "requires_security": true,
      "oauth_scopes": [
        "transfers:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "sync_status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by sync status. Supersedes has_no_sync_commits if both are provided."
            },
            "description": "Filter by sync status. Supersedes has_no_sync_commits if both are provided.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "NOT_SYNC_READY",
                "SYNCED",
                "SYNC_READY"
              ]
            },
            "schema_required": false
          },
          {
            "name": "status",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "ACH_CONFIRMED",
                "CANCELED",
                "COMPLETED",
                "ERROR",
                "INITIATED",
                "NOT_ACKED",
                "NOT_ENOUGH_FUNDS",
                "PROCESSING_BY_ODFI",
                "REJECTED_BY_ODFI",
                "RETURNED_BY_RDFI",
                "SUBMITTED_TO_FED",
                "SUBMITTED_TO_RDFI",
                "UNNECESSARY",
                "UPLOADED"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by transfer status. See [Transfers Guide](/developer-api/v1/guides/transfers) for definitions."
            },
            "description": "Filter by transfer status. See [Transfers Guide](/developer-api/v1/guides/transfers) for definitions.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "ACH_CONFIRMED",
                "CANCELED",
                "COMPLETED",
                "ERROR",
                "INITIATED",
                "NOT_ACKED",
                "NOT_ENOUGH_FUNDS",
                "PROCESSING_BY_ODFI",
                "REJECTED_BY_ODFI",
                "RETURNED_BY_RDFI",
                "SUBMITTED_TO_FED",
                "SUBMITTED_TO_RDFI",
                "UNNECESSARY",
                "UPLOADED"
              ]
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transfers by business entity."
            },
            "description": "Filter transfers by business entity.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "statement_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transfers included in the specified statement."
            },
            "description": "Filter transfers included in the specified statement.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "has_no_sync_commits",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transfers that have not been synced."
            },
            "description": "Filter transfers that have not been synced.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "from_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transfers that occurred after this date (ISO8601 format)."
            },
            "description": "Filter transfers that occurred after this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "to_date",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter transfers that occurred before this date (ISO8601 format)."
            },
            "description": "Filter transfers that occurred before this date (ISO8601 format).",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_transfer_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_transfer_details",
        "description": {
          "tagline": "Retrieve transfer details using a specific transfer ID.",
          "detailed": "Use this tool to get detailed information about a transfer by providing its unique transfer ID. Ideal for checking the status or details of a particular transfer operation."
        },
        "return_annotation": "Details of a specific transfer by its ID.",
        "arguments": [
          {
            "name": "transfer_id",
            "alternative_names": [
              "transfer_identifier",
              "transfer_reference_id"
            ],
            "description": "The unique identifier for the transfer. Use this to retrieve specific transfer details.",
            "endpoint_argument_name": "transfer_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/transfers/{transfer_id}",
      "tags": [
        "Transfer Payment"
      ],
      "summary": "Fetch a transfer payment",
      "description": "For information on how to use this endpoint, refer to the [Transfers Guide](/developer-api/v1/guides/transfers).",
      "requires_security": true,
      "oauth_scopes": [
        "transfers:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "transfer_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_user_list_with_pagination",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_users",
        "description": {
          "tagline": "Retrieve a paginated list of users.",
          "detailed": "This tool is used to fetch a list of users from the service. It supports pagination to manage large sets of user data efficiently."
        },
        "return_annotation": "A list of users with pagination details.",
        "arguments": [
          {
            "name": "filter_by_employee_id",
            "alternative_names": [
              "employee_identifier",
              "user_employee_id"
            ],
            "description": "Filter users by their employee ID to narrow down the user list.",
            "endpoint_argument_name": "employee_id"
          },
          {
            "name": "user_role_filter",
            "alternative_names": [
              "role_filter",
              "filter_role"
            ],
            "description": "Specify the role to filter users. Valid roles include: AUDITOR, BUSINESS_ADMIN, BUSINESS_BOOKKEEPER, BUSINESS_OWNER, BUSINESS_USER, GUEST_USER, IT_ADMIN.",
            "endpoint_argument_name": "role"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_page_id",
              "previous_page_end_id"
            ],
            "description": "The ID of the last entity from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "number_of_results_per_page",
              "page_result_count"
            ],
            "description": "The number of results returned per page. Must be between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "business_entity_id",
            "alternative_names": [
              "entity_id_filter",
              "business_unit_id"
            ],
            "description": "Filter the list of users by specifying a business entity ID.",
            "endpoint_argument_name": "entity_id"
          },
          {
            "name": "filter_by_department_id",
            "alternative_names": [
              "department_identifier_filter",
              "department_filter"
            ],
            "description": "Filter the user list by a specific department ID to narrow down the results.",
            "endpoint_argument_name": "department_id"
          },
          {
            "name": "filter_by_email",
            "alternative_names": [
              "email_filter",
              "user_email"
            ],
            "description": "Filter users by their email address for precise retrieval.",
            "endpoint_argument_name": "email"
          },
          {
            "name": "filter_by_location_id",
            "alternative_names": [
              "location_filter",
              "set_location_id"
            ],
            "description": "Specify a location ID to filter users by their location.",
            "endpoint_argument_name": "location_id"
          },
          {
            "name": "include_deleted_users",
            "alternative_names": [
              "include_removed_users",
              "show_deleted_users"
            ],
            "description": "Set to true to include deleted users in the response. Defaults to false.",
            "endpoint_argument_name": "include_deleted"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/users",
      "tags": [
        "User"
      ],
      "summary": "List users",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "users:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "employee_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Filter by user employee_id"
            },
            "description": "Filter by user employee_id",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "role",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "Filter by user role"
            },
            "description": "Filter by user role",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ]
            },
            "schema_required": false
          },
          {
            "name": "include_deleted",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Include deleted users in the response. Defaults to False"
            },
            "description": "Include deleted users in the response. Defaults to False",
            "required": false,
            "deprecated": false,
            "default": false,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "entity_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "filter by business entity"
            },
            "description": "filter by business entity",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "filter by department"
            },
            "description": "filter by department",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "email",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "filter by email"
            },
            "description": "filter by email",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "email"
            },
            "schema_required": false
          },
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "filter by location"
            },
            "description": "filter by location",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_user_creation_deferred_task",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "send_user_invite_async",
        "description": {
          "tagline": "Initiate an async task to send a user invite email.",
          "detailed": "Use this tool to start an asynchronous task for sending a user invitation via email. This is part of the onboarding process where users need to accept the invite to continue. Assign the user to a specific entity by providing a location_id."
        },
        "return_annotation": "Confirmation of async user invite task triggered.",
        "arguments": [
          {
            "name": "employee_email_address",
            "alternative_names": [
              "user_email_address",
              "recipient_email_address"
            ],
            "description": "The email address of the employee to whom the invite will be sent.",
            "endpoint_argument_name": "email"
          },
          {
            "name": "employee_first_name",
            "alternative_names": [
              "user_first_name",
              "invitee_first_name"
            ],
            "description": "The first name of the employee receiving the invite.",
            "endpoint_argument_name": "first_name"
          },
          {
            "name": "unique_idempotency_key",
            "alternative_names": [
              "idempotency_token",
              "request_uuid"
            ],
            "description": "A unique identifier for the request, used to recognize and manage retries. Use a randomly generated UUID to avoid collisions.",
            "endpoint_argument_name": "idempotency_key"
          },
          {
            "name": "employee_last_name",
            "alternative_names": [
              "user_last_name",
              "invitee_last_name"
            ],
            "description": "Provide the last name of the employee to be invited.",
            "endpoint_argument_name": "last_name"
          },
          {
            "name": "employee_role",
            "alternative_names": [
              "user_role",
              "invite_role"
            ],
            "description": "The employee's role. Options: Admin, Cardholder, Bookkeeper. Note: Owner is not invitable.",
            "endpoint_argument_name": "role"
          },
          {
            "name": "employee_department_identifier",
            "alternative_names": [
              "department_identifier",
              "dept_id"
            ],
            "description": "Unique identifier of the employee's department. Required for assigning the user to the correct department.",
            "endpoint_argument_name": "department_id"
          },
          {
            "name": "direct_manager_identifier",
            "alternative_names": [
              "manager_id",
              "supervisor_id"
            ],
            "description": "Unique identifier of the employee's direct manager.",
            "endpoint_argument_name": "direct_manager_id"
          },
          {
            "name": "employee_location_identifier",
            "alternative_names": [
              "employee_location_id",
              "location_identifier"
            ],
            "description": "Unique identifier for the employee's location, mapped to a specific entity.",
            "endpoint_argument_name": "location_id"
          },
          {
            "name": "is_manager",
            "alternative_names": [
              "manager_status",
              "employee_manager_status"
            ],
            "description": "Indicate whether the employee is a manager.",
            "endpoint_argument_name": "is_manager"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/users/deferred",
      "tags": [
        "User"
      ],
      "summary": "Create a user invite",
      "description": "Call this endpoint to trigger an async task to send out a user invite via email. Users will need to accept the invite in order to be onboarded.\n\nAssign a user to a specific entity by specifying a `location_id` on creation. Locations are mapped to entities with a many-to-one relationship.",
      "requires_security": true,
      "oauth_scopes": [
        "users:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the employee's department"
            },
            "description": "Unique identifier of the employee's department",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique identifier of the employee's department",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "direct_manager_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the employee's direct manager"
            },
            "description": "Unique identifier of the employee's direct manager",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique identifier of the employee's direct manager",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "email",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The employee's email address"
            },
            "description": "The employee's email address",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The employee's email address",
              "format": "email"
            },
            "schema_required": true
          },
          {
            "name": "first_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "First name of the employee"
            },
            "description": "First name of the employee",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "First name of the employee"
            },
            "schema_required": true
          },
          {
            "name": "idempotency_key",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "description": "an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "schema_required": true
          },
          {
            "name": "is_manager",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether the employee is a manager"
            },
            "description": "Whether the employee is a manager",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Whether the employee is a manager"
            },
            "schema_required": false
          },
          {
            "name": "last_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Last name of the employee"
            },
            "description": "Last name of the employee",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Last name of the employee"
            },
            "schema_required": true
          },
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the employee's location"
            },
            "description": "Unique identifier of the employee's location",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique identifier of the employee's location",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "role",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role."
            },
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.",
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ]
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"department_id\": \"2d68eb67-f6eb-4284-8683-7d530c77a5a6\",\n          \"direct_manager_id\": \"ccc5d4cc-337f-49a5-86b3-5df128233f2c\",\n          \"email\": \"cardholder_7@company.com\",\n          \"first_name\": \"Linda\",\n          \"idempotency_key\": \"d471d830-2e73-4082-8a75-68540f83e86e\",\n          \"is_manager\": false,\n          \"last_name\": \"Gu\",\n          \"location_id\": \"f4efe11c-221f-4b49-a1e4-33eaf96a49ee\",\n          \"role\": \"BUSINESS_USER\"\n        },\n        \"properties\": {\n          \"department_id\": {\n            \"description\": \"Unique identifier of the employee's department\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"direct_manager_id\": {\n            \"description\": \"Unique identifier of the employee's direct manager\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"email\": {\n            \"description\": \"The employee's email address\",\n            \"format\": \"email\",\n            \"type\": \"string\"\n          },\n          \"first_name\": {\n            \"description\": \"First name of the employee\",\n            \"maxLength\": 255,\n            \"type\": \"string\"\n          },\n          \"idempotency_key\": {\n            \"description\": \"an idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          },\n          \"is_manager\": {\n            \"description\": \"Whether the employee is a manager\",\n            \"type\": \"boolean\"\n          },\n          \"last_name\": {\n            \"description\": \"Last name of the employee\",\n            \"maxLength\": 255,\n            \"type\": \"string\"\n          },\n          \"location_id\": {\n            \"description\": \"Unique identifier of the employee's location\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"role\": {\n            \"description\": \"The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a invitable role.\",\n            \"enum\": [\n              \"AUDITOR\",\n              \"BUSINESS_ADMIN\",\n              \"BUSINESS_BOOKKEEPER\",\n              \"BUSINESS_OWNER\",\n              \"BUSINESS_USER\",\n              \"GUEST_USER\",\n              \"IT_ADMIN\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"email\",\n          \"first_name\",\n          \"idempotency_key\",\n          \"last_name\",\n          \"role\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "get_user_deferred_task_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "retrieve_task_status",
        "description": {
          "tagline": "Fetch the status of a deferred task by task ID.",
          "detailed": "Call this tool to check the status and details of a specific deferred task using its task ID."
        },
        "return_annotation": "Deferred task status and details.",
        "arguments": [
          {
            "name": "task_id",
            "alternative_names": [
              "task_identifier",
              "deferred_task_id"
            ],
            "description": "The unique identifier for the deferred task to retrieve its status. This should be a string.",
            "endpoint_argument_name": "task_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/users/deferred/status/{task_id}",
      "tags": [
        "User"
      ],
      "summary": "Fetch deferred task status",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "users:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "task_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_user_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_user_info",
        "description": {
          "tagline": "Fetch detailed information about a user by ID.",
          "detailed": "This tool retrieves detailed user information, including profile details, by using a user ID. It should be called when there is a need to access specific user data."
        },
        "return_annotation": "Detailed information about a specific user.",
        "arguments": [
          {
            "name": "user_identifier",
            "alternative_names": [
              "user_id_value",
              "identifier_for_user"
            ],
            "description": "The unique identifier of the user to fetch. This should be a string representing the user's ID.",
            "endpoint_argument_name": "user_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/users/{user_id}",
      "tags": [
        "User"
      ],
      "summary": "Fetch a user",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "users:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_user_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_user_details",
        "description": {
          "tagline": "Update a user's profile information.",
          "detailed": "Use this tool to modify the details of a user's profile based on their user ID. It updates user-specific information and returns the updated profile details."
        },
        "return_annotation": "Details of the updated user profile.",
        "arguments": [
          {
            "name": "user_identifier",
            "alternative_names": [
              "user_id_key",
              "user_id_string"
            ],
            "description": "A unique string to identify the user whose details are to be updated.",
            "endpoint_argument_name": "user_id"
          },
          {
            "name": "department_unique_identifier",
            "alternative_names": [
              "dept_id",
              "department_id_value"
            ],
            "description": "Unique identifier for the user's department to be updated.",
            "endpoint_argument_name": "department_id"
          },
          {
            "name": "employee_direct_manager_id",
            "alternative_names": [
              "direct_manager_unique_identifier",
              "manager_id"
            ],
            "description": "Unique identifier for the employee's direct manager. This ID links the employee to their manager within the system.",
            "endpoint_argument_name": "direct_manager_id"
          },
          {
            "name": "user_first_name",
            "alternative_names": [
              "given_first_name",
              "employee_first_name"
            ],
            "description": "The first name of the user to be updated. It must be a string.",
            "endpoint_argument_name": "first_name"
          },
          {
            "name": "last_name",
            "alternative_names": [
              "surname",
              "family_name"
            ],
            "description": "The last name of the user. This field is required for identifying and updating the user's profile.",
            "endpoint_argument_name": "last_name"
          },
          {
            "name": "location_identifier",
            "alternative_names": [
              "employee_location_id",
              "site_id"
            ],
            "description": "Unique identifier of the employee's location for updating location details.",
            "endpoint_argument_name": "location_id"
          },
          {
            "name": "employee_role",
            "alternative_names": [
              "user_role",
              "profile_role"
            ],
            "description": "The employee's role, restricted to Admin, Cardholder, or Bookkeeper. Note: Owner is not allowed.",
            "endpoint_argument_name": "role"
          },
          {
            "name": "auto_promote_manager",
            "alternative_names": [
              "promote_manager_automatically",
              "automatic_manager_promotion"
            ],
            "description": "Set to true to automatically promote the user's manager to manager.",
            "endpoint_argument_name": "auto_promote"
          },
          {
            "name": "is_manager",
            "alternative_names": [
              "employee_is_manager",
              "holds_manager_position"
            ],
            "description": "Indicates whether the employee is a manager. Set to true if they are a manager, false otherwise.",
            "endpoint_argument_name": "is_manager"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/users/{user_id}",
      "tags": [
        "User"
      ],
      "summary": "Update a user",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "users:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "auto_promote",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether to automatically promote the users manager to manager."
            },
            "description": "Whether to automatically promote the users manager to manager.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Whether to automatically promote the users manager to manager."
            },
            "schema_required": false
          },
          {
            "name": "department_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the employee's department"
            },
            "description": "Unique identifier of the employee's department",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique identifier of the employee's department",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "direct_manager_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the employee's direct manager"
            },
            "description": "Unique identifier of the employee's direct manager",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique identifier of the employee's direct manager",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "first_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "is_manager",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether the employee is a manager"
            },
            "description": "Whether the employee is a manager",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "boolean",
              "description": "Whether the employee is a manager"
            },
            "schema_required": false
          },
          {
            "name": "last_name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "location_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the employee's location"
            },
            "description": "Unique identifier of the employee's location",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Unique identifier of the employee's location",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "role",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ],
              "properties": null,
              "inner_properties": null,
              "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value."
            },
            "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.",
              "enum": [
                "AUDITOR",
                "BUSINESS_ADMIN",
                "BUSINESS_BOOKKEEPER",
                "BUSINESS_OWNER",
                "BUSINESS_USER",
                "GUEST_USER",
                "IT_ADMIN"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"department_id\": \"2d68eb67-f6eb-4284-8683-7d530c77a5a6\",\n          \"direct_manager_id\": \"ccc5d4cc-337f-49a5-86b3-5df128233f2c\",\n          \"first_name\": \"Jeremy\",\n          \"is_manager\": true,\n          \"last_name\": \"Smith\",\n          \"location_id\": \"f4efe11c-221f-4b49-a1e4-33eaf96a49ee\",\n          \"role\": \"BUSINESS_ADMIN\"\n        },\n        \"properties\": {\n          \"auto_promote\": {\n            \"description\": \"Whether to automatically promote the users manager to manager.\",\n            \"type\": \"boolean\"\n          },\n          \"department_id\": {\n            \"description\": \"Unique identifier of the employee's department\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"direct_manager_id\": {\n            \"description\": \"Unique identifier of the employee's direct manager\",\n            \"format\": \"uuid\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"first_name\": {\n            \"minLength\": 1,\n            \"type\": \"string\"\n          },\n          \"is_manager\": {\n            \"description\": \"Whether the employee is a manager\",\n            \"type\": \"boolean\"\n          },\n          \"last_name\": {\n            \"minLength\": 1,\n            \"type\": \"string\"\n          },\n          \"location_id\": {\n            \"description\": \"Unique identifier of the employee's location\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"role\": {\n            \"description\": \"The employee's role; It could be one of the following values: Admin, Cardholder, Bookkeeper; Note that Owner is not a permissible value.\",\n            \"enum\": [\n              \"AUDITOR\",\n              \"BUSINESS_ADMIN\",\n              \"BUSINESS_BOOKKEEPER\",\n              \"BUSINESS_OWNER\",\n              \"BUSINESS_USER\",\n              \"GUEST_USER\",\n              \"IT_ADMIN\"\n            ],\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    },
    {
      "name": "patch_user_deactivation_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "deactivate_user_account",
        "description": {
          "tagline": "Deactivate a user's account to restrict access.",
          "detailed": "This tool should be called to deactivate a user's account, preventing them from logging in, using cards, or receiving notifications."
        },
        "return_annotation": "Confirmation of user account deactivation.",
        "arguments": [
          {
            "name": "user_account_id",
            "alternative_names": [
              "user_identifier",
              "account_id"
            ],
            "description": "The unique identifier for the user whose account is to be deactivated.",
            "endpoint_argument_name": "user_id"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/users/{user_id}/deactivate",
      "tags": [
        "User"
      ],
      "summary": "Deactivate a user",
      "description": "When users are deactivated, they will no longer be able to log in, spend on cards, or receive any notifications from Ramp.",
      "requires_security": true,
      "oauth_scopes": [
        "users:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_user_reactivation_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "reactivate_user_account",
        "description": {
          "tagline": "Reactivates a user's account to restore access and notifications.",
          "detailed": "Use this tool to reactivate a user's Ramp account, allowing them to log in, use their cards, and receive notifications again."
        },
        "return_annotation": "Confirmation of user account reactivation.",
        "arguments": [
          {
            "name": "user_id",
            "alternative_names": [
              "account_id",
              "membership_id"
            ],
            "description": "The unique identifier for the user account to be reactivated. This is required to execute the reactivation process.",
            "endpoint_argument_name": "user_id"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/users/{user_id}/reactivate",
      "tags": [
        "User"
      ],
      "summary": "Reactivate a user",
      "description": "Upon reactivation, users can log in to Ramp again, spend on their previously issued cards and resume receiving Ramp notifications.",
      "requires_security": true,
      "oauth_scopes": [
        "users:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "user_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_card_vault_creation",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_spend_allocation_card",
        "description": {
          "tagline": "Create a new spend allocation and retrieve card details.",
          "detailed": "This tool creates a new spend allocation and provides sensitive card details. It should be used when there is a need to generate a card vault in the Ramp system."
        },
        "return_annotation": "Spend allocation and sensitive card details.",
        "arguments": [
          {
            "name": "spend_allocation_card_details",
            "alternative_names": [
              "card_creation_details",
              "vault_card_request"
            ],
            "description": "JSON object providing details for card vault creation, including accounting rules, display name, spend program ID, spending restrictions, and user ID.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/vault/cards",
      "tags": [
        "Card Vault"
      ],
      "summary": "Creates a spend allocation and card",
      "description": "Sends back spend allocation and sensitive card details.",
      "requires_security": true,
      "oauth_scopes": [
        "cards:read_vault",
        "limits:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_rules": {
                  "val_type": "array",
                  "inner_val_type": "json",
                  "enum": null,
                  "properties": null,
                  "inner_properties": {
                    "field_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category"
                    },
                    "field_option_id": {
                      "val_type": "string",
                      "inner_val_type": null,
                      "enum": null,
                      "properties": null,
                      "inner_properties": null,
                      "description": "UUID of the tracking category option"
                    }
                  },
                  "description": "Set accounting rules for the Spend Limit and Card"
                },
                "display_name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Cosmetic display name of the limit."
                },
                "spend_program_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The id of the associated spend program."
                },
                "spending_restrictions": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program."
                },
                "user_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the card owner."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_rules": {
                  "type": "array",
                  "description": "Set accounting rules for the Spend Limit and Card",
                  "items": {
                    "type": "object",
                    "properties": {
                      "field_id": {
                        "type": "string",
                        "description": "UUID of the tracking category",
                        "format": "uuid"
                      },
                      "field_option_id": {
                        "type": "string",
                        "description": "UUID of the tracking category option",
                        "format": "uuid"
                      }
                    },
                    "required": [
                      "field_id",
                      "field_option_id"
                    ]
                  }
                },
                "display_name": {
                  "type": "string",
                  "description": "Cosmetic display name of the limit."
                },
                "spend_program_id": {
                  "type": "string",
                  "description": "The id of the associated spend program.",
                  "format": "uuid"
                },
                "spending_restrictions": {
                  "type": "object",
                  "description": "Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "allowed_categories": {
                          "type": "array",
                          "description": " List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "allowed_vendors": {
                          "type": "array",
                          "description": "List of merchants allowed for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "blocked_categories": {
                          "type": "array",
                          "description": "List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.",
                          "items": {
                            "type": "integer"
                          }
                        },
                        "blocked_mcc_codes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "blocked_vendors": {
                          "type": "array",
                          "description": "List of merchants  blocked for the limit.",
                          "items": {
                            "type": "string",
                            "format": "uuid"
                          }
                        },
                        "interval": {
                          "type": "string",
                          "description": "Time interval to apply limit to.",
                          "enum": [
                            "ANNUAL",
                            "DAILY",
                            "MONTHLY",
                            "QUARTERLY",
                            "TERTIARY",
                            "TOTAL",
                            "WEEKLY",
                            "YEARLY"
                          ]
                        },
                        "limit": {
                          "type": "object",
                          "description": "Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        },
                        "lock_date": {
                          "type": "string",
                          "description": "Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.",
                          "format": "date-time"
                        },
                        "transaction_amount_limit": {
                          "type": "object",
                          "description": "Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.",
                          "properties": {},
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "amount": {
                                  "type": "integer",
                                  "description": "the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents."
                                },
                                "currency_code": {
                                  "type": "string",
                                  "description": "The type of currency, in ISO 4217 format. e.g. USD for US dollars"
                                }
                              },
                              "required": [
                                "amount"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "interval",
                        "limit"
                      ]
                    }
                  ]
                },
                "user_id": {
                  "type": "string",
                  "description": "Unique identifier of the card owner.",
                  "format": "uuid"
                }
              },
              "required": [
                "user_id"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"accounting_rules\": [\n            {\n              \"field_id\": \"3f30896b-cd22-47af-b48a-c6c3068bc780\",\n              \"field_option_id\": \"d062e221-9c95-47b5-8dc6-d6c881693caf\"\n            }\n          ],\n          \"display_name\": \"Travel Hotel Booking Purchase\",\n          \"spending_restrictions\": {\n            \"allowed_categories\": [\n              18,\n              20\n            ],\n            \"auto_lock_date\": null,\n            \"interval\": \"TOTAL\",\n            \"limit\": {\n              \"amount\": 500000,\n              \"currency_code\": \"USD\"\n            }\n          },\n          \"user_id\": \"d8135cfe-0396-4b2d-b2cf-ad809fb04731\"\n        },\n        \"properties\": {\n          \"accounting_rules\": {\n            \"description\": \"Set accounting rules for the Spend Limit and Card\",\n            \"items\": {\n              \"properties\": {\n                \"field_id\": {\n                  \"description\": \"UUID of the tracking category\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                },\n                \"field_option_id\": {\n                  \"description\": \"UUID of the tracking category option\",\n                  \"format\": \"uuid\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"field_id\",\n                \"field_option_id\"\n              ],\n              \"type\": \"object\"\n            },\n            \"type\": \"array\"\n          },\n          \"display_name\": {\n            \"description\": \"Cosmetic display name of the limit.\",\n            \"type\": \"string\"\n          },\n          \"spend_program_id\": {\n            \"description\": \"The id of the associated spend program.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"allowed_categories\": {\n                    \"description\": \" List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) allowed for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"allowed_vendors\": {\n                    \"description\": \"List of merchants allowed for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_categories\": {\n                    \"description\": \"List of [Ramp category codes](/developer-api/v1/overview/conventions#ramp-category-codes) blocked for the limit.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"blocked_vendors\": {\n                    \"description\": \"List of merchants  blocked for the limit.\",\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Total amount limit per interval. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If lock date has passed, set to a future date or to null to unlock the card.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"allOf\": [\n                      {\n                        \"properties\": {\n                          \"amount\": {\n                            \"description\": \"the amount of money represented in the smallest denomination of the currency. For example, when the currency is USD, then the amount is expressed in cents.\",\n                            \"type\": \"integer\"\n                          },\n                          \"currency_code\": {\n                            \"default\": \"USD\",\n                            \"description\": \"The type of currency, in ISO 4217 format. e.g. USD for US dollars\",\n                            \"type\": \"string\"\n                          }\n                        },\n                        \"required\": [\n                          \"amount\"\n                        ],\n                        \"type\": \"object\"\n                      }\n                    ],\n                    \"description\": \"Max amount per transaction. Currently we expect the currency to be USD and the amount need to be denominated in cents.\"\n                  }\n                },\n                \"required\": [\n                  \"interval\",\n                  \"limit\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the spending restrictions. If spend_program_id is passed, this field is ignored and the limit will inherit the spending restrictions of the spend program.\"\n          },\n          \"user_id\": {\n            \"description\": \"Unique identifier of the card owner.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"user_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_vendor_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_vendor_list",
        "description": {
          "tagline": "Retrieve a list of available vendors.",
          "detailed": "This tool retrieves a list of vendors from the Ramp service. It should be called when you need to access or display vendor information."
        },
        "return_annotation": "Returns a list of vendors.",
        "arguments": [
          {
            "name": "filter_by_category_ids",
            "alternative_names": [
              "category_ids_list",
              "categories_filter"
            ],
            "description": "Comma-separated list of integers to filter vendors by Ramp Category Codes.",
            "endpoint_argument_name": "sk_category_ids"
          },
          {
            "name": "created_after_date",
            "alternative_names": [
              "creation_start_date",
              "begin_created_date"
            ],
            "description": "Filter vendors created after this date. Use ISO 8601 format.",
            "endpoint_argument_name": "from_created_at"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "pagination_start",
              "last_entity_id"
            ],
            "description": "ID of the last entity from the previous page to retrieve the next set of results. Used for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_result_count",
              "number_of_results"
            ],
            "description": "Specify the number of vendor results to return per page, between 2 and 100. The default is 20 if not provided.",
            "endpoint_argument_name": "page_size"
          },
          {
            "name": "vendor_owner_identifier",
            "alternative_names": [
              "vendor_owner_user_id",
              "vendor_owner_user_identifier"
            ],
            "description": "Unique identifier of the user who owns the vendor. Provide a valid user ID string.",
            "endpoint_argument_name": "vendor_owner_id"
          },
          {
            "name": "vendor_name_filter",
            "alternative_names": [
              "filter_vendor_by_name",
              "search_vendor_name"
            ],
            "description": "Filter vendors by name. Provide a string to match vendor names containing this value.",
            "endpoint_argument_name": "name"
          },
          {
            "name": "include_only_active_vendors",
            "alternative_names": [
              "filter_by_active_status",
              "show_active_vendors_only"
            ],
            "description": "Set to true to show only active vendors. False includes all vendors.",
            "endpoint_argument_name": "is_active"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/vendors",
      "tags": [
        "Vendor"
      ],
      "summary": "List vendors",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "sk_category_ids",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Show only vendors whose sk_category_id matches a [Ramp Category Code](/developer-api/v1/overview/conventions#ramp-category-codes) in the passed list. Expects a comma-separated list of integers."
            },
            "description": "Show only vendors whose sk_category_id matches a [Ramp Category Code](/developer-api/v1/overview/conventions#ramp-category-codes) in the passed list. Expects a comma-separated list of integers.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "from_created_at",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Show only vendors with created_at after this date. This parameter should be provided as a datetime string that conforms to ISO 8601"
            },
            "description": "Show only vendors with created_at after this date. This parameter should be provided as a datetime string that conforms to ISO 8601",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "date-time"
            },
            "schema_required": false
          },
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          },
          {
            "name": "vendor_owner_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the user which owns this vendor."
            },
            "description": "Unique identifier of the user which owns this vendor.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "is_active",
            "value_schema": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "boolean"
            },
            "schema_required": false
          },
          {
            "name": "name",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          }
        ],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_vendor_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "create_vendor",
        "description": {
          "tagline": "Create and approve a new vendor automatically.",
          "detailed": "This tool is used to create a new vendor via the API. Vendors created are approved by default and bypass existing approval policies. Use this when you need to quickly add a vendor to the system."
        },
        "return_annotation": "Confirmation of vendor creation.",
        "arguments": [
          {
            "name": "vendor_creation_details",
            "alternative_names": [
              "vendor_addition_data",
              "new_vendor_info"
            ],
            "description": "A JSON object containing detailed information for creating the vendor. Includes fields for accounting ID, address, contacts, country, vendor name, payment and tax details requests, state (for US-based vendors), vendor owner ID, and tracking category. Ensure either `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` is provided, not both.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/vendors",
      "tags": [
        "Vendor"
      ],
      "summary": "Create a new vendor",
      "description": "Vendors created in the API are approved by default, and are not subject to\nexisting approval policies.",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_vendor_remote_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided."
                },
                "address": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The address of the vendor."
                },
                "business_vendor_contacts": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Detailed information about the vendor contact."
                },
                "country": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The country of the vendor."
                },
                "name": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Name of the new vendor to be created."
                },
                "request_payment_details": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Whether to request payment details from the vendor (ACH bank account, international wire transfer, and check mailing address). Requires a contact email."
                },
                "request_tax_details": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Whether to request tax information from the vendor (Tax Identification Number, federal tax classification, and tax address). Requires a contact email."
                },
                "state": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The state if country is US. Note that this field is ignored for non-US countries."
                },
                "vendor_owner_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the user that will own this vendor."
                },
                "vendor_tracking_category_option_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Ramp unique identifier of the accounting vendor to link to this vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_vendor_remote_id": {
                  "type": "string",
                  "description": "The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided."
                },
                "address": {
                  "type": "object",
                  "description": "The address of the vendor.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "address_line_1": {
                          "type": "string",
                          "description": "Primary address line of the vendor."
                        },
                        "address_line_2": {
                          "type": "string",
                          "description": "Secondary address line or suite number of the vendor."
                        },
                        "city": {
                          "type": "string",
                          "description": "City of the vendor address."
                        },
                        "country": {
                          "type": "string",
                          "description": "Country of the vendor address."
                        },
                        "postal_code": {
                          "type": "string",
                          "description": "Postal or ZIP code of the vendor address."
                        },
                        "state": {
                          "type": "string",
                          "description": "The state if country is US. Note that this field is ignored for non-US countries."
                        }
                      },
                      "required": [
                        "address_line_1",
                        "city",
                        "postal_code"
                      ]
                    }
                  ]
                },
                "business_vendor_contacts": {
                  "type": "object",
                  "description": "Detailed information about the vendor contact.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "email"
                      ]
                    }
                  ]
                },
                "country": {
                  "type": "string",
                  "description": "The country of the vendor."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the new vendor to be created."
                },
                "request_payment_details": {
                  "type": "boolean",
                  "description": "Whether to request payment details from the vendor (ACH bank account, international wire transfer, and check mailing address). Requires a contact email."
                },
                "request_tax_details": {
                  "type": "boolean",
                  "description": "Whether to request tax information from the vendor (Tax Identification Number, federal tax classification, and tax address). Requires a contact email."
                },
                "state": {
                  "type": "string",
                  "description": "The state if country is US. Note that this field is ignored for non-US countries."
                },
                "vendor_owner_id": {
                  "type": "string",
                  "description": "Unique identifier of the user that will own this vendor.",
                  "format": "uuid"
                },
                "vendor_tracking_category_option_id": {
                  "type": "string",
                  "description": "Ramp unique identifier of the accounting vendor to link to this vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.",
                  "format": "uuid"
                }
              },
              "required": [
                "business_vendor_contacts",
                "country",
                "vendor_owner_id"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"business_vendor_contacts\": {\n            \"email\": \"vendor@ramp.com\",\n            \"first_name\": \"John\",\n            \"last_name\": \"Doe\",\n            \"phone\": \"+13525342357\"\n          },\n          \"country\": \"US\",\n          \"name\": \"Ramp\",\n          \"request_payment_details\": true,\n          \"request_tax_details\": true,\n          \"state\": \"NY\",\n          \"vendor_owner_id\": \"6b864472-294e-4fc9-91ab-158d684c8886\",\n          \"vendor_tracking_category_option_id\": \"60a1a5c9-9b2d-4658-9024-cc4baebf819a\"\n        },\n        \"properties\": {\n          \"accounting_vendor_remote_id\": {\n            \"description\": \"The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.\",\n            \"type\": \"string\"\n          },\n          \"address\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"address_line_1\": {\n                    \"description\": \"Primary address line of the vendor.\",\n                    \"type\": \"string\"\n                  },\n                  \"address_line_2\": {\n                    \"description\": \"Secondary address line or suite number of the vendor.\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  },\n                  \"city\": {\n                    \"description\": \"City of the vendor address.\",\n                    \"type\": \"string\"\n                  },\n                  \"country\": {\n                    \"description\": \"Country of the vendor address.\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  },\n                  \"postal_code\": {\n                    \"description\": \"Postal or ZIP code of the vendor address.\",\n                    \"type\": \"string\"\n                  },\n                  \"state\": {\n                    \"description\": \"The state if country is US. Note that this field is ignored for non-US countries.\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"address_line_1\",\n                  \"city\",\n                  \"postal_code\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"The address of the vendor.\"\n          },\n          \"business_vendor_contacts\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"email\": {\n                    \"type\": \"string\"\n                  },\n                  \"first_name\": {\n                    \"type\": \"string\"\n                  },\n                  \"last_name\": {\n                    \"type\": \"string\"\n                  },\n                  \"phone\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"email\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Detailed information about the vendor contact.\"\n          },\n          \"country\": {\n            \"description\": \"The country of the vendor.\",\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Name of the new vendor to be created.\",\n            \"type\": \"string\"\n          },\n          \"request_payment_details\": {\n            \"default\": false,\n            \"description\": \"Whether to request payment details from the vendor (ACH bank account, international wire transfer, and check mailing address). Requires a contact email.\",\n            \"type\": \"boolean\"\n          },\n          \"request_tax_details\": {\n            \"default\": false,\n            \"description\": \"Whether to request tax information from the vendor (Tax Identification Number, federal tax classification, and tax address). Requires a contact email.\",\n            \"type\": \"boolean\"\n          },\n          \"state\": {\n            \"default\": null,\n            \"description\": \"The state if country is US. Note that this field is ignored for non-US countries.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"vendor_owner_id\": {\n            \"description\": \"Unique identifier of the user that will own this vendor.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"vendor_tracking_category_option_id\": {\n            \"description\": \"Ramp unique identifier of the accounting vendor to link to this vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"business_vendor_contacts\",\n          \"country\",\n          \"vendor_owner_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_vendor_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_vendor_details",
        "description": {
          "tagline": "Fetch vendor details using the vendor ID.",
          "detailed": "This tool retrieves detailed information about a specific vendor using their unique vendor ID. It should be called when you need to access vendor profiles and relevant details."
        },
        "return_annotation": "Vendor details and profile information.",
        "arguments": [
          {
            "name": "vendor_id",
            "alternative_names": [
              "vendor_identifier",
              "vendor_code"
            ],
            "description": "The unique ID of the vendor to fetch details for. This is required to identify and retrieve the correct vendor profile.",
            "endpoint_argument_name": "vendor_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/vendors/{vendor_id}",
      "tags": [
        "Vendor"
      ],
      "summary": "Fetch a vendor",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "patch_vendor_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_vendor",
        "description": {
          "tagline": "Updates the details of an existing vendor.",
          "detailed": "Use this tool to modify and update the details of an existing vendor when changes are required to their information."
        },
        "return_annotation": "Confirmation of vendor update success or failure.",
        "arguments": [
          {
            "name": "vendor_identifier",
            "alternative_names": [
              "vendor_id_number",
              "vendor_unique_id"
            ],
            "description": "The unique identifier for the vendor to be updated. This should be a string value representing the vendor's ID.",
            "endpoint_argument_name": "vendor_id"
          },
          {
            "name": "vendor_update_details",
            "alternative_names": [
              "vendor_patch_data",
              "vendor_modification_info"
            ],
            "description": "JSON object detailing vendor update: includes accounting remote ID, address, country, name, active status, state (for US), and a vendor tracking category option ID. At most one of accounting remote ID or vendor tracking category option ID should be provided.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "PATCH",
      "path": "/developer/v1/vendors/{vendor_id}",
      "tags": [
        "Vendor"
      ],
      "summary": "Update a vendor",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "accounting_vendor_remote_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided."
                },
                "address": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The address of the vendor."
                },
                "country": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The country of the vendor."
                },
                "description": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Name of the vendor."
                },
                "is_active": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Whether this vendor is active."
                },
                "state": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "The state if country is US. Note that this field is ignored for non-US countries."
                },
                "vendor_tracking_category_option_id": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Unique identifier of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided."
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "accounting_vendor_remote_id": {
                  "type": "string",
                  "description": "The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided."
                },
                "address": {
                  "type": "object",
                  "description": "The address of the vendor.",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "address_line_1": {
                          "type": "string",
                          "description": "Primary address line of the vendor."
                        },
                        "address_line_2": {
                          "type": "string",
                          "description": "Secondary address line or suite number of the vendor."
                        },
                        "city": {
                          "type": "string",
                          "description": "City of the vendor address."
                        },
                        "country": {
                          "type": "string",
                          "description": "Country of the vendor address."
                        },
                        "postal_code": {
                          "type": "string",
                          "description": "Postal or ZIP code of the vendor address."
                        },
                        "state": {
                          "type": "string",
                          "description": "The state if country is US. Note that this field is ignored for non-US countries."
                        }
                      },
                      "required": [
                        "address_line_1",
                        "city",
                        "postal_code"
                      ]
                    }
                  ]
                },
                "country": {
                  "type": "string",
                  "description": "The country of the vendor."
                },
                "description": {
                  "type": "string",
                  "description": "Name of the vendor."
                },
                "is_active": {
                  "type": "boolean",
                  "description": "Whether this vendor is active."
                },
                "state": {
                  "type": "string",
                  "description": "The state if country is US. Note that this field is ignored for non-US countries."
                },
                "vendor_tracking_category_option_id": {
                  "type": "string",
                  "description": "Unique identifier of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.",
                  "format": "uuid"
                }
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"address\": {\n            \"address_line_1\": \"442 Good St\",\n            \"address_line_2\": null,\n            \"city\": \"Allentown\",\n            \"country\": \"US\",\n            \"postal_code\": \"18102\",\n            \"state\": \"Pennsylvania\"\n          },\n          \"country\": \"US\",\n          \"description\": \"Some description\",\n          \"is_active\": true,\n          \"state\": \"NY\",\n          \"vendor_tracking_category_option_id\": \"60a1a5c9-9b2d-4658-9024-cc4baebf819a\"\n        },\n        \"properties\": {\n          \"accounting_vendor_remote_id\": {\n            \"description\": \"The accounting remote id of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.\",\n            \"type\": \"string\"\n          },\n          \"address\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"address_line_1\": {\n                    \"description\": \"Primary address line of the vendor.\",\n                    \"type\": \"string\"\n                  },\n                  \"address_line_2\": {\n                    \"description\": \"Secondary address line or suite number of the vendor.\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  },\n                  \"city\": {\n                    \"description\": \"City of the vendor address.\",\n                    \"type\": \"string\"\n                  },\n                  \"country\": {\n                    \"description\": \"Country of the vendor address.\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  },\n                  \"postal_code\": {\n                    \"description\": \"Postal or ZIP code of the vendor address.\",\n                    \"type\": \"string\"\n                  },\n                  \"state\": {\n                    \"description\": \"The state if country is US. Note that this field is ignored for non-US countries.\",\n                    \"nullable\": true,\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"address_line_1\",\n                  \"city\",\n                  \"postal_code\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"The address of the vendor.\"\n          },\n          \"country\": {\n            \"description\": \"The country of the vendor.\",\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"description\": \"Name of the vendor.\",\n            \"type\": \"string\"\n          },\n          \"is_active\": {\n            \"description\": \"Whether this vendor is active.\",\n            \"type\": \"boolean\"\n          },\n          \"state\": {\n            \"default\": null,\n            \"description\": \"The state if country is US. Note that this field is ignored for non-US countries.\",\n            \"nullable\": true,\n            \"type\": \"string\"\n          },\n          \"vendor_tracking_category_option_id\": {\n            \"description\": \"Unique identifier of the vendor. At most one of `accounting_vendor_remote_id` or `vendor_tracking_category_option_id` should be provided.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "delete_vendor_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "remove_vendor",
        "description": {
          "tagline": "Delete a vendor, if no associated dependencies exist.",
          "detailed": "Use this tool to delete a vendor from the system, provided there are no associated transactions, bills, contracts, or spend requests linked to the vendor. The operation will confirm if the vendor is successfully deleted or if deletion was not possible due to existing dependencies."
        },
        "return_annotation": "Confirmation of vendor deletion status.",
        "arguments": [
          {
            "name": "vendor_identifier",
            "alternative_names": [
              "vendor_unique_id",
              "vendor_reference_id"
            ],
            "description": "The unique identifier of the vendor to be deleted. Ensure the vendor has no associated dependencies.",
            "endpoint_argument_name": "vendor_id"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/vendors/{vendor_id}",
      "tags": [
        "Vendor"
      ],
      "summary": "Delete a vendor",
      "description": "A vendor cannot be deleted if it has associated transactions, bills, contracts, or spend requests.",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_vendor_bank_account_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "list_vendor_bank_accounts",
        "description": {
          "tagline": "Retrieve a list of vendor bank accounts.",
          "detailed": "Use this tool to obtain a list of bank accounts associated with a specific vendor. Useful for managing vendor payments or verifying banking details."
        },
        "return_annotation": "List of vendor bank accounts.",
        "arguments": [
          {
            "name": "vendor_id",
            "alternative_names": [
              "supplier_id",
              "vendor_identifier"
            ],
            "description": "The unique identifier for the vendor whose bank accounts are being retrieved.",
            "endpoint_argument_name": "vendor_id"
          },
          {
            "name": "last_entity_id_for_pagination",
            "alternative_names": [
              "pagination_start_id",
              "previous_page_last_id"
            ],
            "description": "The ID of the last vendor bank account from the previous page for pagination.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "page_results_count",
              "items_per_page"
            ],
            "description": "The number of results returned per page, between 2 and 100. Defaults to 20 if unspecified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/vendors/{vendor_id}/accounts",
      "tags": [
        "Vendor"
      ],
      "summary": "List vendor bank accounts",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_vendor_bank_account_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_vendor_bank_account",
        "description": {
          "tagline": "Fetch the bank account details of a specific vendor.",
          "detailed": "Use this tool to retrieve detailed information about a vendor's bank account based on the vendor ID and bank account ID."
        },
        "return_annotation": "Vendor bank account details.",
        "arguments": [
          {
            "name": "bank_account_identifier",
            "alternative_names": [
              "account_id",
              "bank_account_reference"
            ],
            "description": "The unique identifier of the bank account to be fetched.",
            "endpoint_argument_name": "bank_account_id"
          },
          {
            "name": "vendor_id",
            "alternative_names": [
              "vendor_identifier",
              "vendor_unique_id"
            ],
            "description": "Unique identifier for the vendor whose bank account details are to be fetched.",
            "endpoint_argument_name": "vendor_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/vendors/{vendor_id}/accounts/{bank_account_id}",
      "tags": [
        "Vendor"
      ],
      "summary": "Fetch a vendor bank account",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "bank_account_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_vendor_contact_list_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_vendor_contacts",
        "description": {
          "tagline": "Retrieve a list of contacts for a given vendor.",
          "detailed": "Use this tool to obtain contact information associated with a specific vendor by providing the vendor ID."
        },
        "return_annotation": "List of contacts for a specified vendor.",
        "arguments": [
          {
            "name": "vendor_id",
            "alternative_names": [
              "vendor_identifier",
              "vendor_unique_id"
            ],
            "description": "The unique identifier for the vendor whose contacts you want to retrieve. It must be a valid string representing the vendor ID.",
            "endpoint_argument_name": "vendor_id"
          },
          {
            "name": "pagination_start_id",
            "alternative_names": [
              "last_entity_id",
              "next_page_start"
            ],
            "description": "The ID of the last entity from the previous page, used to paginate to the next set of results.",
            "endpoint_argument_name": "start"
          },
          {
            "name": "results_per_page",
            "alternative_names": [
              "items_per_page",
              "contact_count_per_page"
            ],
            "description": "Number of results per page, between 2 and 100. Defaults to 20 if not specified.",
            "endpoint_argument_name": "page_size"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/vendors/{vendor_id}/contacts",
      "tags": [
        "Vendor"
      ],
      "summary": "List vendor contacts for vendor",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [
          {
            "name": "start",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The ID of the last entity of the previous page, used for pagination to get the next page."
            },
            "description": "The ID of the last entity of the previous page, used for pagination to get the next page.",
            "required": false,
            "deprecated": false,
            "default": null,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "string"
            },
            "schema_required": false
          },
          {
            "name": "page_size",
            "value_schema": {
              "val_type": "integer",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used."
            },
            "description": "The number of results to be returned in each page. The value must be between 2 and 100. If not specified, the default value 20 will be used.",
            "required": false,
            "deprecated": false,
            "default": 20,
            "location": "query",
            "content_type": null,
            "json_schema": {
              "type": "integer"
            },
            "schema_required": false
          }
        ],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "get_vendor_contact_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "fetch_vendor_contact",
        "description": {
          "tagline": "Fetch a specific vendor contact's details.",
          "detailed": "Use this tool to retrieve contact information for a specific vendor using their vendor ID and contact ID."
        },
        "return_annotation": "Details of a vendor contact.",
        "arguments": [
          {
            "name": "vendor_contact_id",
            "alternative_names": [
              "contact_id",
              "vendor_contact_unique_id"
            ],
            "description": "The unique identifier for the vendor contact to be fetched. It is a string value associated with a specific contact.",
            "endpoint_argument_name": "vendor_contact_id"
          },
          {
            "name": "vendor_id",
            "alternative_names": [
              "supplier_id",
              "company_id"
            ],
            "description": "The unique identifier for the vendor whose contact information you want to retrieve. This is a required field.",
            "endpoint_argument_name": "vendor_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/vendors/{vendor_id}/contacts/{vendor_contact_id}",
      "tags": [
        "Vendor"
      ],
      "summary": "Fetch a vendor contact",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:read"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_contact_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          },
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_vendor_bank_account_update_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "update_vendor_payment_details",
        "description": {
          "tagline": "Add or update payment details for a vendor.",
          "detailed": "Use this tool to add or update payment details for a vendor through the business's approval workflow. Supports ACH and Wire transfer methods, requiring routing and account numbers. The proposal may require approval based on the business's policies."
        },
        "return_annotation": "Confirms update of vendor payment details through approval workflow.",
        "arguments": [
          {
            "name": "vendor_identifier",
            "alternative_names": [
              "vendor_id_number",
              "vendor_key"
            ],
            "description": "The unique identifier for the vendor whose payment details are to be updated. This should be a string.",
            "endpoint_argument_name": "vendor_id"
          },
          {
            "name": "vendor_payment_details",
            "alternative_names": [
              "payment_details",
              "vendor_payment_info"
            ],
            "description": "JSON object with optional nickname, ACH details, wire details, and default indicator. Use for adding or updating vendor payment methods.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/vendors/{vendor_id}/update-bank-accounts",
      "tags": [
        "Vendor"
      ],
      "summary": "Add to a vendor's bank account details",
      "description": "Adds payment details for the vendor through the approval workflow.\nThe proposal may require approval depending on the business's approval policies.\n\nSupported payment methods:\n- ACH: US bank account with routing and account numbers\n- Wire: US wire transfer with routing and account numbers",
      "requires_security": true,
      "oauth_scopes": [
        "vendors:write"
      ],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "vendor_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "account_nickname": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Optional nickname for the payment account"
                },
                "ach_details": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "ACH payment details"
                },
                "is_default": {
                  "val_type": "boolean",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Whether this should be the default payment method"
                },
                "wire_details": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Wire payment details"
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "account_nickname": {
                  "type": "string",
                  "description": "Optional nickname for the payment account"
                },
                "ach_details": {
                  "type": "object",
                  "description": "ACH payment details",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "account_name": {
                          "type": "string",
                          "description": "Account name"
                        },
                        "account_number": {
                          "type": "string",
                          "description": "ACH account number"
                        },
                        "account_owner_type": {
                          "type": "string",
                          "description": "Account owner type",
                          "enum": [
                            "BUSINESS",
                            "INDIVIDUAL"
                          ]
                        },
                        "account_type": {
                          "type": "string",
                          "description": "Account type",
                          "enum": [
                            "Checking",
                            "Savings"
                          ]
                        },
                        "routing_number": {
                          "type": "string",
                          "description": "ACH routing number"
                        }
                      },
                      "required": [
                        "account_number",
                        "routing_number"
                      ]
                    }
                  ]
                },
                "is_default": {
                  "type": "boolean",
                  "description": "Whether this should be the default payment method"
                },
                "wire_details": {
                  "type": "object",
                  "description": "Wire payment details",
                  "properties": {},
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "account_name": {
                          "type": "string",
                          "description": "Account name"
                        },
                        "account_number": {
                          "type": "string",
                          "description": "Wire account number"
                        },
                        "routing_number": {
                          "type": "string",
                          "description": "Wire routing number"
                        }
                      },
                      "required": [
                        "account_number",
                        "routing_number"
                      ]
                    }
                  ]
                }
              }
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"account_nickname\": \"Primary Business Account\",\n          \"ach_details\": {\n            \"account_name\": \"Business Account\",\n            \"account_number\": \"123456789\",\n            \"account_owner_type\": \"BUSINESS\",\n            \"account_type\": \"Checking\",\n            \"routing_number\": \"021000021\"\n          },\n          \"is_default\": false\n        },\n        \"properties\": {\n          \"account_nickname\": {\n            \"description\": \"Optional nickname for the payment account\",\n            \"type\": \"string\"\n          },\n          \"ach_details\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"account_name\": {\n                    \"default\": \"Business Account\",\n                    \"description\": \"Account name\",\n                    \"type\": \"string\"\n                  },\n                  \"account_number\": {\n                    \"description\": \"ACH account number\",\n                    \"type\": \"string\"\n                  },\n                  \"account_owner_type\": {\n                    \"default\": \"BUSINESS\",\n                    \"description\": \"Account owner type\",\n                    \"enum\": [\n                      \"BUSINESS\",\n                      \"INDIVIDUAL\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"account_type\": {\n                    \"default\": \"Checking\",\n                    \"description\": \"Account type\",\n                    \"enum\": [\n                      \"Checking\",\n                      \"Savings\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"routing_number\": {\n                    \"description\": \"ACH routing number\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"account_number\",\n                  \"routing_number\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"ACH payment details\"\n          },\n          \"is_default\": {\n            \"default\": false,\n            \"description\": \"Whether this should be the default payment method\",\n            \"type\": \"boolean\"\n          },\n          \"wire_details\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"account_name\": {\n                    \"default\": \"Business Account\",\n                    \"description\": \"Account name\",\n                    \"type\": \"string\"\n                  },\n                  \"account_number\": {\n                    \"description\": \"Wire account number\",\n                    \"type\": \"string\"\n                  },\n                  \"routing_number\": {\n                    \"description\": \"Wire routing number\",\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"account_number\",\n                  \"routing_number\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Wire payment details\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_outbound_webhook_subscription_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_webhook_subscriptions",
        "description": {
          "tagline": "Retrieve all outbound webhook subscriptions.",
          "detailed": "Call this tool to get a list of all currently registered outbound webhook subscriptions from the service."
        },
        "return_annotation": "A list of all webhook subscriptions.",
        "arguments": []
      },
      "method": "GET",
      "path": "/developer/v1/webhooks",
      "tags": [
        "Webhooks"
      ],
      "summary": "Get all webhook subscriptions",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_outbound_webhook_subscription_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "register_webhook_subscription",
        "description": {
          "tagline": "Register a new outbound webhook subscription.",
          "detailed": "This tool registers a new outbound webhook subscription. The newly registered subscription will be in a pending verification state, requiring verification with the provided challenge."
        },
        "return_annotation": "Details of the pending webhook subscription.",
        "arguments": [
          {
            "name": "webhook_subscription_details",
            "alternative_names": [
              "subscription_details",
              "webhook_details"
            ],
            "description": "JSON object containing 'endpoint_url', 'event_types', and optional 'additional_headers'.",
            "endpoint_argument_name": "requestBody"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/webhooks",
      "tags": [
        "Webhooks"
      ],
      "summary": "Creates a new webhook subscription",
      "description": "The newly registered subscription will be in the pending verficiation state. You will need to verify your endpoint with the provided challenge.",
      "requires_security": true,
      "oauth_scopes": [],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "requestBody",
            "value_schema": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": {
                "additional_headers": {
                  "val_type": "json",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Optional headers to include with webhook requests. Max 5 headers, header names max 100 chars, values max 1000 chars."
                },
                "endpoint_url": {
                  "val_type": "string",
                  "inner_val_type": null,
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "URL where webhook events will be sent"
                },
                "event_types": {
                  "val_type": "array",
                  "inner_val_type": "string",
                  "enum": null,
                  "properties": null,
                  "inner_properties": null,
                  "description": "Events that this subscription will receive"
                }
              },
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "object",
              "properties": {
                "additional_headers": {
                  "type": "object",
                  "description": "Optional headers to include with webhook requests. Max 5 headers, header names max 100 chars, values max 1000 chars.",
                  "properties": {},
                  "additionalProperties": {
                    "maxLength": 1000,
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "endpoint_url": {
                  "type": "string",
                  "description": "URL where webhook events will be sent",
                  "format": "url"
                },
                "event_types": {
                  "type": "array",
                  "description": "Events that this subscription will receive",
                  "items": {
                    "type": "string",
                    "enum": [
                      "bills.approved",
                      "bills.created",
                      "bills.paid",
                      "bills.rejected",
                      "purchase_orders.created",
                      "purchase_orders.updated",
                      "reimbursements.ready_for_review",
                      "reimbursements.ready_to_sync",
                      "tests.test_event",
                      "transactions.authorized",
                      "transactions.cleared",
                      "transactions.ready_for_review",
                      "transactions.ready_to_sync",
                      "unified_requests.external_approval_request",
                      "vendors.activated",
                      "webhooks.verification"
                    ]
                  }
                }
              },
              "required": [
                "endpoint_url",
                "event_types"
              ]
            },
            "schema_required": false
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"additional_headers\": {\n            \"Authorization\": \"Bearer token123\",\n            \"X-Custom-Header\": \"value\"\n          },\n          \"endpoint_url\": \"https://example.com/webhook\",\n          \"event_types\": [\n            \"TRANSACTION_REFUNDED\",\n            \"USER_INVITED\"\n          ]\n        },\n        \"properties\": {\n          \"additional_headers\": {\n            \"additionalProperties\": {\n              \"maxLength\": 1000,\n              \"minLength\": 1,\n              \"type\": \"string\"\n            },\n            \"description\": \"Optional headers to include with webhook requests. Max 5 headers, header names max 100 chars, values max 1000 chars.\",\n            \"maxLength\": 5,\n            \"type\": \"object\"\n          },\n          \"endpoint_url\": {\n            \"description\": \"URL where webhook events will be sent\",\n            \"format\": \"url\",\n            \"type\": \"string\"\n          },\n          \"event_types\": {\n            \"description\": \"Events that this subscription will receive\",\n            \"items\": {\n              \"enum\": [\n                \"bills.approved\",\n                \"bills.created\",\n                \"bills.paid\",\n                \"bills.rejected\",\n                \"purchase_orders.created\",\n                \"purchase_orders.updated\",\n                \"reimbursements.ready_for_review\",\n                \"reimbursements.ready_to_sync\",\n                \"tests.test_event\",\n                \"transactions.authorized\",\n                \"transactions.cleared\",\n                \"transactions.ready_for_review\",\n                \"transactions.ready_to_sync\",\n                \"unified_requests.external_approval_request\",\n                \"vendors.activated\",\n                \"webhooks.verification\"\n              ],\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          }\n        },\n        \"required\": [\n          \"endpoint_url\",\n          \"event_types\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": true,
      "validate_request_body_schema": true,
      "use_flatten_mode": false
    },
    {
      "name": "get_outbound_webhook_subscription_detail_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "get_webhook_subscription_by_id",
        "description": {
          "tagline": "Retrieve details of a webhook subscription by ID.",
          "detailed": "Call this tool to get detailed information about a specific webhook subscription using its ID. Useful for managing or verifying webhook configurations."
        },
        "return_annotation": "Details of a specific webhook subscription.",
        "arguments": [
          {
            "name": "webhook_identifier",
            "alternative_names": [
              "webhook_id",
              "subscription_id"
            ],
            "description": "The unique identifier for the webhook subscription to retrieve details.",
            "endpoint_argument_name": "webhook_id"
          }
        ]
      },
      "method": "GET",
      "path": "/developer/v1/webhooks/{webhook_id}",
      "tags": [
        "Webhooks"
      ],
      "summary": "Get a webhook subscription by id",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "webhook_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "delete_outbound_webhook_subscription_detail_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "delete_webhook_subscription",
        "description": {
          "tagline": "Deletes a webhook subscription based on its ID.",
          "detailed": "Use this tool to delete a webhook subscription by providing its unique ID. This is useful for managing and cleaning up webhook subscription lists by removing unwanted or outdated entries."
        },
        "return_annotation": "Confirmation of webhook subscription deletion by ID.",
        "arguments": [
          {
            "name": "webhook_id",
            "alternative_names": [
              "webhook_identifier",
              "subscription_id"
            ],
            "description": "The unique ID of the webhook subscription to be deleted. This should be a string that distinctly identifies the webhook subscription.",
            "endpoint_argument_name": "webhook_id"
          }
        ]
      },
      "method": "DELETE",
      "path": "/developer/v1/webhooks/{webhook_id}",
      "tags": [
        "Webhooks"
      ],
      "summary": "Delete a webhook subscription by id",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "webhook_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": []
      },
      "request_body_spec": null,
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": false
    },
    {
      "name": "post_outbound_webhook_subscription_verify_resource",
      "selected_for_wrapping": false,
      "spec_built": true,
      "wrap_finished": true,
      "should_skip": false,
      "skip_reason": null,
      "wrapper_tool": {
        "name": "verify_webhook_subscription",
        "description": {
          "tagline": "Verify a webhook subscription to ensure proper setup.",
          "detailed": "Use this tool to verify the setup of a webhook subscription by confirming its configuration is correct."
        },
        "return_annotation": "Confirmation of the webhook subscription verification.",
        "arguments": [
          {
            "name": "webhook_identifier",
            "alternative_names": [
              "webhook_id_value",
              "webhook_key"
            ],
            "description": "The unique identifier for the webhook subscription to verify.",
            "endpoint_argument_name": "webhook_id"
          },
          {
            "name": "webhook_verification_challenge",
            "alternative_names": [
              "webhook_challenge_code",
              "verification_challenge_string"
            ],
            "description": "A string used to verify the webhook endpoint.",
            "endpoint_argument_name": "challenge"
          }
        ]
      },
      "method": "POST",
      "path": "/developer/v1/webhooks/{webhook_id}/verify",
      "tags": [
        "Webhooks"
      ],
      "summary": "Verify a webhook subscription",
      "description": "",
      "requires_security": true,
      "oauth_scopes": [],
      "security_schemes": [
        "oauth2"
      ],
      "parameters": {
        "query": [],
        "path": [
          {
            "name": "webhook_id",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": ""
            },
            "description": "",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "path",
            "content_type": null,
            "json_schema": {
              "type": "string",
              "format": "uuid"
            },
            "schema_required": false
          }
        ],
        "header": [],
        "cookie": [],
        "body": [
          {
            "name": "challenge",
            "value_schema": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Challenge to verify webhook endpoint"
            },
            "description": "Challenge to verify webhook endpoint",
            "required": true,
            "deprecated": false,
            "default": null,
            "location": "body",
            "content_type": "application/json",
            "json_schema": {
              "type": "string",
              "description": "Challenge to verify webhook endpoint"
            },
            "schema_required": true
          }
        ]
      },
      "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"challenge\": \"ramp_challenge_a8f5f167f44f4964e6c998dee827110c\"\n        },\n        \"properties\": {\n          \"challenge\": {\n            \"description\": \"Challenge to verify webhook endpoint\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"challenge\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
      "use_request_body_schema_mode": false,
      "validate_request_body_schema": false,
      "use_flatten_mode": true
    }
  ],
  "security_scheme_key_selected": "oauth2",
  "security_scheme_selected": {
    "flows": {
      "authorizationCode": {
        "authorizationUrl": "https://api.ramp.com/v1/authorize",
        "scopes": {
          "accounting:read": "Grant read access to accounting",
          "accounting:write": "Grant write access to accounting",
          "attendee_types:read": "Grant read access to attendee_types",
          "attendee_types:write": "Grant write access to attendee_types",
          "audit_logs:read": "Grant read access to audit_logs",
          "bank_accounts:read": "Grant read access to bank_accounts",
          "bank_feeds:read": "Grant read access to bank_feeds",
          "bills:read": "Grant read access to bills",
          "bills:write": "Grant write access to bills",
          "business:read": "Grant read access to business",
          "cards:read": "Grant read access to cards",
          "cards:read_vault": "Grant read_vault access to cards",
          "cards:write": "Grant write access to cards",
          "cashbacks:read": "Grant read access to cashbacks",
          "custom_records:read": "Grant read access to custom_records",
          "custom_records:write": "Grant write access to custom_records",
          "departments:read": "Grant read access to departments",
          "departments:write": "Grant write access to departments",
          "entities:read": "Grant read access to entities",
          "external_attendees:read": "Grant read access to external_attendees",
          "external_attendees:write": "Grant write access to external_attendees",
          "item_receipts:read": "Grant read access to item_receipts",
          "item_receipts:write": "Grant write access to item_receipts",
          "leads:read": "Grant read access to leads",
          "leads:write": "Grant write access to leads",
          "limits:read": "Grant read access to limits",
          "limits:write": "Grant write access to limits",
          "locations:read": "Grant read access to locations",
          "locations:write": "Grant write access to locations",
          "memos:read": "Grant read access to memos",
          "memos:write": "Grant write access to memos",
          "merchants:read": "Grant read access to merchants",
          "offline_access": "Grant access to offline_access",
          "openid": "Grant access to openid",
          "purchase_orders:read": "Grant read access to purchase_orders",
          "purchase_orders:write": "Grant write access to purchase_orders",
          "receipt_integrations:read": "Grant read access to receipt_integrations",
          "receipt_integrations:write": "Grant write access to receipt_integrations",
          "receipts:read": "Grant read access to receipts",
          "receipts:write": "Grant write access to receipts",
          "reimbursements:read": "Grant read access to reimbursements",
          "reimbursements:write": "Grant write access to reimbursements",
          "repayments:read": "Grant read access to repayments",
          "spend_programs:read": "Grant read access to spend_programs",
          "spend_programs:write": "Grant write access to spend_programs",
          "statements:read": "Grant read access to statements",
          "transactions:read": "Grant read access to transactions",
          "transactions:write": "Grant write access to transactions",
          "transfers:read": "Grant read access to transfers",
          "treasury:read": "Grant read access to treasury",
          "trips:read": "Grant read access to trips",
          "users:read": "Grant read access to users",
          "users:write": "Grant write access to users",
          "vendors:read": "Grant read access to vendors",
          "vendors:write": "Grant write access to vendors"
        },
        "tokenUrl": "https://api.ramp.com/developer/v1/token"
      },
      "clientCredentials": {
        "scopes": {
          "accounting:read": "Grant read access to accounting",
          "accounting:write": "Grant write access to accounting",
          "attendee_types:read": "Grant read access to attendee_types",
          "attendee_types:write": "Grant write access to attendee_types",
          "audit_logs:read": "Grant read access to audit_logs",
          "bank_accounts:read": "Grant read access to bank_accounts",
          "bank_feeds:read": "Grant read access to bank_feeds",
          "bills:read": "Grant read access to bills",
          "bills:write": "Grant write access to bills",
          "business:read": "Grant read access to business",
          "cards:read": "Grant read access to cards",
          "cards:read_vault": "Grant read_vault access to cards",
          "cards:write": "Grant write access to cards",
          "cashbacks:read": "Grant read access to cashbacks",
          "custom_records:read": "Grant read access to custom_records",
          "custom_records:write": "Grant write access to custom_records",
          "departments:read": "Grant read access to departments",
          "departments:write": "Grant write access to departments",
          "entities:read": "Grant read access to entities",
          "external_attendees:read": "Grant read access to external_attendees",
          "external_attendees:write": "Grant write access to external_attendees",
          "item_receipts:read": "Grant read access to item_receipts",
          "item_receipts:write": "Grant write access to item_receipts",
          "leads:read": "Grant read access to leads",
          "leads:write": "Grant write access to leads",
          "limits:read": "Grant read access to limits",
          "limits:write": "Grant write access to limits",
          "locations:read": "Grant read access to locations",
          "locations:write": "Grant write access to locations",
          "memos:read": "Grant read access to memos",
          "memos:write": "Grant write access to memos",
          "merchants:read": "Grant read access to merchants",
          "offline_access": "Grant access to offline_access",
          "openid": "Grant access to openid",
          "purchase_orders:read": "Grant read access to purchase_orders",
          "purchase_orders:write": "Grant write access to purchase_orders",
          "receipt_integrations:read": "Grant read access to receipt_integrations",
          "receipt_integrations:write": "Grant write access to receipt_integrations",
          "receipts:read": "Grant read access to receipts",
          "receipts:write": "Grant write access to receipts",
          "reimbursements:read": "Grant read access to reimbursements",
          "reimbursements:write": "Grant write access to reimbursements",
          "repayments:read": "Grant read access to repayments",
          "spend_programs:read": "Grant read access to spend_programs",
          "spend_programs:write": "Grant write access to spend_programs",
          "statements:read": "Grant read access to statements",
          "transactions:read": "Grant read access to transactions",
          "transactions:write": "Grant write access to transactions",
          "transfers:read": "Grant read access to transfers",
          "treasury:read": "Grant read access to treasury",
          "trips:read": "Grant read access to trips",
          "users:read": "Grant read access to users",
          "users:write": "Grant write access to users",
          "vendors:read": "Grant read access to vendors",
          "vendors:write": "Grant write access to vendors"
        },
        "tokenUrl": "https://api.ramp.com/developer/v1/token"
      }
    },
    "type": "oauth2"
  }
}
