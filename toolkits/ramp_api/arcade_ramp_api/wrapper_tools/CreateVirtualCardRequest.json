{
  "name": "CreateVirtualCardRequest",
  "fully_qualified_name": "RampApi.CreateVirtualCardRequest@0.1.0",
  "description": "Initiate a request to create a new virtual card.\n\nCall this tool to start an asynchronous task for requesting a new virtual card creation.",
  "toolkit": {
    "name": "RampApi",
    "description": null,
    "version": "0.1.0"
  },
  "input": {
    "parameters": [
      {
        "name": "virtual_card_request_details",
        "required": true,
        "description": "Details for creating the virtual card, including card_program_id, display_name, entity_id, idempotency_key, is_temporary, spending_restrictions, and user_id.",
        "value_schema": {
          "val_type": "json",
          "inner_val_type": null,
          "enum": null,
          "properties": {
            "card_program_id": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given."
            },
            "display_name": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Cosmetic display name of the card."
            },
            "entity_id": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location."
            },
            "idempotency_key": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "is_temporary": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Set to true to create a temporary card"
            },
            "spending_restrictions": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided."
            },
            "user_id": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the card owner."
            }
          },
          "inner_properties": null,
          "description": ""
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "requestBody"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'post_virtual_card'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": {
      "provider_id": "arcade-ramp",
      "provider_type": "oauth2",
      "id": null,
      "oauth2": {
        "scopes": [
          "cards:write"
        ]
      }
    },
    "secrets": null,
    "metadata": null
  },
  "deprecation_message": null,
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.1.0",
    "description": "Tools that enable LLMs to interact directly with the ramp API."
  },
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.2.0",
      "description": ""
    },
    "url": "https://api.ramp.com/developer/v1/cards/deferred/virtual",
    "http_method": "POST",
    "headers": {},
    "parameters": [
      {
        "name": "requestBody",
        "tool_parameter_name": "virtual_card_request_details",
        "description": "",
        "value_schema": {
          "val_type": "json",
          "inner_val_type": null,
          "enum": null,
          "properties": {
            "card_program_id": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given."
            },
            "display_name": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Cosmetic display name of the card."
            },
            "entity_id": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Create card associated with business entity. If not provided, defaults to entity associated with user's location."
            },
            "idempotency_key": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs."
            },
            "is_temporary": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Set to true to create a temporary card"
            },
            "spending_restrictions": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided."
            },
            "user_id": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Unique identifier of the card owner."
            }
          },
          "inner_properties": null,
          "description": ""
        },
        "accepted_as": "body",
        "required": true,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [],
    "secrets": [
      {
        "arcade_key": "auth_token",
        "parameter_name": "Authorization",
        "accepted_as": "header",
        "formatted_value": "Bearer {authorization}",
        "description": "The OAuth token to use for authentication.",
        "is_auth_token": true
      }
    ],
    "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"schema\": {\n        \"example\": {\n          \"display_name\": \"T&E\",\n          \"entity_id\": \"7051bc66-a8cb-4e68-81c4-caf6459ac168\",\n          \"idempotency_key\": \"3a5b1f62-988f-4190-bf31-b7ae87c5df42\",\n          \"spending_restrictions\": {\n            \"amount\": 5000,\n            \"categories\": [],\n            \"currency\": \"USD\",\n            \"interval\": \"MONTHLY\",\n            \"transaction_amount_limit\": 100\n          },\n          \"user_id\": \"d8135cfe-0396-4b2d-b2cf-ad809fb04731\"\n        },\n        \"properties\": {\n          \"card_program_id\": {\n            \"description\": \"Alternative method to create a card using a card program. One of spending_restrictions or card_program_id must be provided. If this value is given, no other attributes (other than idempotency_key) may be given.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"display_name\": {\n            \"description\": \"Cosmetic display name of the card.\",\n            \"type\": \"string\"\n          },\n          \"entity_id\": {\n            \"description\": \"Create card associated with business entity. If not provided, defaults to entity associated with user's location.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          },\n          \"idempotency_key\": {\n            \"description\": \"An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request. To avoid collisions, we encourage clients to use random generated UUIDs.\",\n            \"type\": \"string\"\n          },\n          \"is_temporary\": {\n            \"default\": false,\n            \"description\": \"Set to true to create a temporary card\",\n            \"type\": \"boolean\"\n          },\n          \"spending_restrictions\": {\n            \"allOf\": [\n              {\n                \"properties\": {\n                  \"amount\": {\n                    \"description\": \"Amount limit total per interval.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"blocked_mcc_codes\": {\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"card_accounting_rules\": {\n                    \"items\": {\n                      \"properties\": {\n                        \"tracking_category_id\": {\n                          \"format\": \"uuid\",\n                          \"type\": \"string\"\n                        },\n                        \"tracking_category_option_id\": {\n                          \"format\": \"uuid\",\n                          \"type\": \"string\"\n                        },\n                        \"tracking_category_option_remote_name\": {\n                          \"type\": \"string\"\n                        }\n                      },\n                      \"required\": [\n                        \"tracking_category_id\",\n                        \"tracking_category_option_id\",\n                        \"tracking_category_option_remote_name\"\n                      ],\n                      \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories\": {\n                    \"description\": \"List of [Ramp Category Codes](/developer-api/v1/overview/conventions#ramp-category-codes) this card is restricted to.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_blacklist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"categories_whitelist\": {\n                    \"items\": {\n                      \"type\": \"integer\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"currency\": {\n                    \"description\": \"Currency in which the amount is specified.\",\n                    \"type\": \"string\"\n                  },\n                  \"interval\": {\n                    \"description\": \"Time interval to apply limit to.\",\n                    \"enum\": [\n                      \"ANNUAL\",\n                      \"DAILY\",\n                      \"MONTHLY\",\n                      \"QUARTERLY\",\n                      \"TERTIARY\",\n                      \"TOTAL\",\n                      \"WEEKLY\",\n                      \"YEARLY\"\n                    ],\n                    \"type\": \"string\"\n                  },\n                  \"lock_date\": {\n                    \"description\": \"Date to automatically lock the card. If `lock_date` has passed, set to a future date or to null to unlock the card. Note that this is different from the actual card expiration date. This date need to conforms to ISO8601 format.\",\n                    \"format\": \"date-time\",\n                    \"type\": \"string\"\n                  },\n                  \"policy_id\": {\n                    \"type\": \"string\"\n                  },\n                  \"transaction_amount_limit\": {\n                    \"description\": \"Max amount limit per transaction.\",\n                    \"minimum\": 0,\n                    \"oneOf\": [\n                      {\n                        \"format\": \"decimal\",\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"number\"\n                      }\n                    ]\n                  },\n                  \"vendor_blacklist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  },\n                  \"vendor_whitelist\": {\n                    \"items\": {\n                      \"format\": \"uuid\",\n                      \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                  }\n                },\n                \"required\": [\n                  \"amount\",\n                  \"interval\"\n                ],\n                \"type\": \"object\"\n              }\n            ],\n            \"description\": \"Specifies the spend restrictions on a Ramp card. One of `spending_restrictions` or `card_program_id` must be provided.\"\n          },\n          \"user_id\": {\n            \"description\": \"Unique identifier of the card owner.\",\n            \"format\": \"uuid\",\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"idempotency_key\",\n          \"user_id\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
    "use_request_body_schema_mode": true,
    "validate_request_body_schema": true
  }
}
