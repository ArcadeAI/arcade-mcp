{
  "name": "CreatePreReceiveHook",
  "fully_qualified_name": "GithubApi.CreatePreReceiveHook@0.1.0",
  "description": "Create a pre-receive hook for GitHub enterprise administration.\n\nUse this tool when you need to create a pre-receive hook for managing GitHub enterprise repositories. It's crucial for setting up checks before code is accepted.",
  "toolkit": {
    "name": "ArcadeGithubApi",
    "description": null,
    "version": "0.1.0"
  },
  "input": {
    "parameters": [
      {
        "name": "pre_receive_hook_configuration",
        "required": true,
        "description": "A JSON object containing details for creating a pre-receive hook, including name, script, enforcement state, and other settings.",
        "value_schema": {
          "val_type": "json",
          "inner_val_type": null,
          "enum": null,
          "properties": {
            "allow_downstream_configuration": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether enforcement can be overridden at the org or repo level. default: `false`"
            },
            "enforcement": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The state of enforcement for this hook. default: `disabled`"
            },
            "environment": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The pre-receive environment where the script is executed."
            },
            "name": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The name of the hook."
            },
            "script": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The script that the hook runs."
            },
            "script_repository": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The GitHub repository where the script is kept."
            }
          },
          "inner_properties": null,
          "description": ""
        },
        "inferrable": true,
        "http_endpoint_parameter_name": "requestBody"
      }
    ]
  },
  "output": {
    "description": "Response from the API endpoint 'enterprise-admin/create-pre-receive-hook'.",
    "available_modes": [
      "value",
      "error",
      "null"
    ],
    "value_schema": {
      "val_type": "json",
      "inner_val_type": null,
      "enum": null,
      "properties": null,
      "inner_properties": null,
      "description": null
    }
  },
  "requirements": {
    "authorization": {
      "provider_id": "arcade-github",
      "provider_type": "oauth2",
      "id": null,
      "oauth2": null
    },
    "secrets": [
      {
        "key": "GIT_SERVER_URL"
      }
    ],
    "metadata": null
  },
  "deprecation_message": null,
  "metadata": {
    "object_type": "api_wrapper_tool",
    "version": "1.1.0",
    "description": "Tools that enable LLMs to interact directly with the GitHub API."
  },
  "http_endpoint": {
    "metadata": {
      "object_type": "http_endpoint",
      "version": "1.2.0",
      "description": ""
    },
    "url": "{git_server_url}/api/v3/admin/pre-receive-hooks",
    "http_method": "POST",
    "headers": {},
    "parameters": [
      {
        "name": "requestBody",
        "tool_parameter_name": "pre_receive_hook_configuration",
        "description": "",
        "value_schema": {
          "val_type": "json",
          "inner_val_type": null,
          "enum": null,
          "properties": {
            "allow_downstream_configuration": {
              "val_type": "boolean",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "Whether enforcement can be overridden at the org or repo level. default: `false`"
            },
            "enforcement": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The state of enforcement for this hook. default: `disabled`"
            },
            "environment": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The pre-receive environment where the script is executed."
            },
            "name": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The name of the hook."
            },
            "script": {
              "val_type": "string",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The script that the hook runs."
            },
            "script_repository": {
              "val_type": "json",
              "inner_val_type": null,
              "enum": null,
              "properties": null,
              "inner_properties": null,
              "description": "The GitHub repository where the script is kept."
            }
          },
          "inner_properties": null,
          "description": ""
        },
        "accepted_as": "body",
        "required": true,
        "deprecated": false,
        "default": null,
        "documentation_urls": []
      }
    ],
    "documentation_urls": [],
    "secrets": [
      {
        "arcade_key": "GIT_SERVER_URL",
        "parameter_name": "git_server_url",
        "accepted_as": "path",
        "formatted_value": null,
        "description": "",
        "is_auth_token": false
      },
      {
        "arcade_key": "auth_token",
        "parameter_name": "Authorization",
        "accepted_as": "header",
        "formatted_value": "Bearer {authorization}",
        "description": "The OAuth token to use for authentication.",
        "is_auth_token": true
      }
    ],
    "request_body_spec": "{\n  \"content\": {\n    \"application/json\": {\n      \"examples\": {\n        \"default\": {\n          \"value\": {\n            \"allow_downstream_configuration\": false,\n            \"enforcement\": \"disabled\",\n            \"environment\": {\n              \"id\": 2\n            },\n            \"name\": \"Check Commits\",\n            \"script\": \"scripts/commit_check.sh\",\n            \"script_repository\": {\n              \"full_name\": \"DevIT/hooks\"\n            }\n          }\n        }\n      },\n      \"schema\": {\n        \"properties\": {\n          \"allow_downstream_configuration\": {\n            \"description\": \"Whether enforcement can be overridden at the org or repo level. default: `false`\",\n            \"type\": \"boolean\"\n          },\n          \"enforcement\": {\n            \"description\": \"The state of enforcement for this hook. default: `disabled`\",\n            \"type\": \"string\"\n          },\n          \"environment\": {\n            \"additionalProperties\": true,\n            \"description\": \"The pre-receive environment where the script is executed.\",\n            \"properties\": {},\n            \"type\": \"object\"\n          },\n          \"name\": {\n            \"description\": \"The name of the hook.\",\n            \"type\": \"string\"\n          },\n          \"script\": {\n            \"description\": \"The script that the hook runs.\",\n            \"type\": \"string\"\n          },\n          \"script_repository\": {\n            \"additionalProperties\": true,\n            \"description\": \"The GitHub repository where the script is kept.\",\n            \"properties\": {},\n            \"type\": \"object\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"script\",\n          \"script_repository\",\n          \"environment\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"required\": true\n}",
    "use_request_body_schema_mode": true,
    "validate_request_body_schema": true
  }
}
